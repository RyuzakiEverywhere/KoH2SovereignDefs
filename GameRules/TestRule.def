// def TestRule : GameRule
// {
// 	//log = 1

// 	target { kingdom k }

// 	triggers
// 	{ 
// 		character became_king
// 		// {
// 		// 	target = (sender.kingdom)
// 		// }
// 		character skills_changed
// 		{
// 			condition = (sender.is_king)
// 			//target = (sender.kingdom)
// 		}
// 	}

// 	condition active = (k.king.FinancesSkill)

// 	mod ks_debug = 1 { stack_group = "debug" }

// 	outcomes
// 	{
// 		// main some_outcome
// 		// {
// 		// 	condition = (k.is_player)
// 		// 	log = true
// 		// }
// 		//trigger test_outcome_trigger
// 		//mod ks_debug = 1 { duration = 10 }
// 	}

// 	rule ChildRule
// 	{
// 		//log = 1

// 		triggers 
// 		{
// 			//target TestRule
// 			//target test_outcome_trigger 
// 			target income_tick = //[ "income_tick", "income_changed" ]
// 	 	}

// 		condition active = (k.resources.gold < -1000)
// 	}

// 	timer Timer = 5/10
// 	{ 
// 		//log = 2
// 		max_ticks = 3 
// 		trigger_parent = true
// 		stop_parent = true

// 		rule InstantRule
// 		{
// 			//log = 1
// 			condition execute = true
// 			//cooldown = 15
// 			outcomes
// 			{
// 				mod ks_debug = 1 { duration = 60; max_stacks = 2; stack_group = "debug" }
// 				//set_var test_counter = (k.test_counter || 0) + 1
// 			}
// 		}

// 		rule PersistantRule
// 		{
// 			//log = 1
// 			triggers
// 			{ 
// 				target income_tick
// 				character skills_changed { condition = (sender = k.king) }
// 			}
// 			condition active = (k.king.StewardshipSkill)
// 		}
// 	}

// }

// def CharacterInPrisonRule : GameRule
// {
// 	//log = 1

// 	target { character c }

// 	triggers { target prison_changed }	

// 	condition active = (c.prison_kingdom)

// 	rule FreeOnConquestRule
// 	{
// 		//log = 1

// 		triggers
// 		{
// 			realm kingdom_changed 
// 			{
// 				var old_kingdom = (param)
// 				var new_kingdom = (sender.kingdom)
// 				var realm = (sender)
// 				condition = (new_kingdom = c.kingdom) && (old_kingdom = c.prison_kingdom)
// 				//chance = (c.class_level)
// 			}
// 		}

// 		condition execute = (trigger.name = "kingdom_changed") 

// 		outcomes
// 		{
// 			main owner_escaped =10
// 		}

// 		outcome_defaults
// 		{
// 			owner_escaped
// 			{
// 				case src_kingdom
// 				{
// 					message
// 					{
// 						def = OutcomeMessage
// 						text caption = "Prisoner released!"
// 						text text = "We found {owner} in the dungeon of {trigger.realm} and released him."
// 					}
// 				}
// 				case prison_kingdom
// 				{
// 					message
// 					{
// 						def = OutcomeMessage
// 						text caption = "Prisoner lost!"
// 						text text = "{src_kingdom} found {owner} in the dungeon of {trigger.realm} and released him."
// 					}
// 				}
// 			}
// 		}
// 	}

// 	rule InciteDungeonRevoltRule
// 	{
// 		//log = 3

// 		triggers
// 		{
// 			target CharacterInPrisonRule
// 		}

// 		condition active = (c.Marshal)

// 		//status DangerousStatus
		
// 		// outcomes
// 		// {
// 		// 	status DangerousStatus
// 		// }

// 		timer Timer = 60/120
// 		{
// 			_outcomes
// 			{
// 				main incite_revolt = (50 + c.class_level)
// 			}
// 		}
// 	}
// }

// // ambient rule for "rocking the boat" during "bad" events in a war
// // goal is to introduce SMALL chance and SMALL effects for flavour, and to "seed" other features
// def WhenWarGoesBadRule : GameRule
// {
// 	//log = 1

// 	target { kingdom k }

// 	triggers = 10
// 	{
// 		kingdom battle_lost = 2
// 		kingdom own_province_occupied //!!! not implemented trigger
// 		character killed_in_battle = 20
// 		character imprisoned_in_battle = 5
// 	}

// 	cooldown = 0.001 // prevents multiple activations for the same battle (with different triggers)

// 	condition execute = true

// 	outcomes
// 	{
// 		option _ArmyMoraleDrop = 10
// 		{
// 			mod ks_army_morale = -1
// 			{
// 				stack_group = "WhenWarGoesBad"
// 				duration = (RndF(15, 30) * 60)
// 			}
// 		}

// 		option try_spawn_rebellion = 10
// 	}
// }

// def OnLostWarRule : GameRule
// {
// 	//log = 1

// 	target { kingdom k }

// 	triggers
// 	{
// 		kingdom war_lost
// 	}

// 	condition active = true //ThinkAboutRebelsTimer will stop us

// 	var winner = (trigger.param.winner)

// 	outcomes
// 	{
// 		//c# already modifies crown authority on war won/lost
// 		//also crown_authority = -1

// 		// eventually lose control over random (1,3) provinces occupied by us
// 		option LoseControlOfOccupiedTowns //!!! not imlemented outcome
// 	 	{ 
// 	 		chance = (MapCA(k, 50, 20, 5))
// 	 		count = (RndI(1,3))
// 	 	}
// 	}

// 	timer ThinkAboutRebelsTimer = 5/10
// 	{ 
// 		stop_parent = true

// 		outcomes
// 		{
// 			// if they don't have their loyalists already, try spawn some ...
// 			main try_spawn_loyalists = (max(80, k.GetRealmsWithMajorityCount(winner) * 20))
// 			{
// 				condition = (k.NumLoyalists(winner) = 0)
// 				loyalists_kingdom = (winner)
// 			}

// 			// and generic rebels, chance is what's left from loyalists above
// 			option try_spawn_rebels
// 		}
// 	}
// }

// def IncBattleLosingStreakCounterRule : GameRule
// {
// 	target { kingdom k }
// 	triggers { kingdom battle_lost }
// 	condition execute = true
// 	outcomes
// 	{
// 		set_var battle_losing_streak = (k.battle_losing_streak || 0) + 1
// 	}
// }

// def ClearBattleLosingStreakCounterRule : GameRule
// {
// 	target { kingdom k }
// 	triggers { kingdom battle_won }
// 	condition execute = (k.battle_losing_streak > 0)
// 	outcomes
// 	{
// 		del_var battle_losing_streak
// 	}
// }

// def LostManyBattlesInARowRule : GameRule
// {
// 	target { kingdom k }
// 	triggers = 50 
// 	{ 
// 		kingdom IncBattleLosingStreakCounterRule
// 	}
// 	cooldown = 60
// 	condition execute = (k.battle_losing_streak >= 5 + MapCA(k, 0, 0, 5)) //&& k.stats.ks_army_morale.NmStacks("LostManyBattlesInARow") < 3
// 	outcomes
// 	{
// 		mod ks_army_morale = -3 
// 		{
// 			max_stacks = 3
// 			stack_group = "LostManyBattlesInARow"
// 			duration = (RndF(15, 30) * 60)
// 		}
// 	}			
// }

// def ClearLostManyBattlesInARowOnPeaceRule : GameRule
// {
// 	target { kingdom k }
// 	triggers { kingdom war_ended }
// 	condition execute = (k.num_wars = 0)
// 	outcomes
// 	{
// 		del_mod ks_army_morale = "LostManyBattlesInARow"
// 		del_var battle_losing_streak
// 	}
// }

// def WhenCharacterExiledRule : GameRule
// {
// 	target { character c }
// 	triggers { character exiled }
// 	condition execute = true

// 	log class = (c.class_name)
// 	log kingdom = (c.kingdom)
// 	log crown_authority = (c.kingdom.crown_authority)
// 	log level = (c.class_level)
// 	log kingdom_in = (c.kingdom_in)

// 	outcomes
// 	{
// 		//log = 2
// 		also _IfMarshal
// 		{
// 			condition = (c.is_marshal)
			
// 			log base_chance = (20)

// 			option TryRevolt = base_chance //!!! not implemented outcome: try become a rebel
// 			{
// 				condition = (c.kingdom.crown_authority <= 0)
// 			}

// 			option TryMercenary = base_chance //!!! not implemented outcome: try become mercenary
// 			{
// 				condition = (c.kingdom_in && c.kingdom_in != c.kingdom)
// 			}
// 		}

// 		also _IfMerchant
// 		{
// 			condition = (c.is_merchant)

// 			option StealGold = (c.class_level / 10) //!!! not implemented outcome
// 			{
// 				condition = (c.kingdom.resources.gold >= 10)
// 				log amount = (ceil(RndF(0, c.kingdom.resources.gold / 10), 10))
// 			}
// 		}

// 		also _IfCleric
// 		{
// 			condition = (c.is_cleric)

// 			also _IfCatholic
// 			{
// 				condition = (c.kingdom.is_catholic)

// 				also rel_change = (-50 - c.class_level * 2)
// 				{
// 					tgt_kingdom = (c.kingdom.papacy)
// 				}

// 				option _Excommunicate = (map3_clamp(c.kingdom.relation_with_pope, -1000, 0, 1000, 25, 0, 0))
// 				{
// 					condition = (!c.kingdom.excommunicated)
// 					trigger ExcommunicateOnClericExiled { target = (c.kingdom) }
// 				}
// 			}

// 			also _IfOtrhodox
// 			{
// 				condition = (c.kingdom.is_orthodox)

// 				main _IfPatriarch
// 				{
// 					condition = (c.is_patriarch)
// 					also crown_authority = -3
// 				}

// 			}

// 			also _IfMuslim
// 			{
// 				condition = (c.kingdom.is_muslim)

// 				mod ks_stability = (-2 - c.class_level / 5)
// 				{
// 					target = (c.kingdom)
// 					duration = (RndF(5, 15) * 60)
// 				}
// 			}
// 		}		
// 	}
// }

// def ExcommunicateOnClericExiledRule : GameRule
// {
// 	target { kingdom k }
// 	triggers { kingdom ExcommunicateOnClericExiled }
// 	condition active = true // timer will stop us
// 	timer Timer = 3/5
// 	{
// 		stop_parent = true
// 		outcomes
// 		{
// 			also excommunicate //!!! not imlemented outcome
// 		}
// 	}
// }