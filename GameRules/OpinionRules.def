def LogOpinionChanges : GameRule
{
	target { kingdom kingdom }
	triggers { kingdom opinion_changed }
	condition execute = true
	
	// log = 1
	// log opinion = (trigger.param)
	// log name = (opinion.id)
	// log amount = (opinion.last_change_amount)
	// log reason = (opinion.last_change_reason)
}

template OpinionChangeRule : GameRule
{
	string opinion
	float amount
	string reason
	text flavor = "Our standing with the {opinion_name_def.name} has changed - they disapprove some of our recent decisions."
	var st_sender = (start_trigger.sender)
	var st_param = (start_trigger.param)
	
	target { kingdom kingdom }
	
	condition execute = true
	
	opinion_name_def = (kingdom.opinions[opinion].def)
	
	outcomes
	{
		main opinion_change = (100 - ((amount < 0) && kingdom.ks_chance_avoid_opinion_drops_perc))
		{
			case kingdom
			{
				case positive = (amount > 0 && kingdom.opinions[opinion] != 10)
				{
					message
					{
						def = PositiveOpinionOutcomeMessage
						switch_value = (kingdom.opinions[opinion].def.name)
						
						case Nobility
						{
							voice_line = "narrator_voice:opinion_increased_nobility"
							sprite icon = "Assets/UI/Elements/msg_icons/Icon_Message_Nobility_Positive.png:Icon_Message_Nobility_Positive#2" //GUID:0757ebb56fba00f449e3d478c9682f6c
							sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_OpinionChange_Nobility_Positive.tga:UI_Illustration_OpinionChange_Nobility_Positive#2" //GUID:d96316076473fdd4cbc113d707823a25
						}
						case Army
						{
							voice_line = "narrator_voice:opinion_increased_army"
							sprite icon = "Assets/UI/Elements/msg_icons/Icon_Message_Army_Positive.png:Icon_Message_Army_Positive#2" //GUID:c6d58c6f92d5d8c4d8c5129b5d34cea4
							sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_OpinionChange_Army_Positive.tga:UI_Illustration_OpinionChange_Army_Positive#2" //GUID:24098b8f52e61f647947df233869d2b5
						}
						case Merchants
						{
							voice_line = "narrator_voice:opinion_increased_merchants"
							sprite icon = "Assets/UI/Elements/msg_icons/Icon_Message_Merchants_Positive.png:Icon_Message_Merchants_Positive#2" //GUID:54b850ba25ecd2c4a9ca2cc4776daecb
							sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_OpinionChange_Merchants_Positive.tga:UI_Illustration_OpinionChange_Merchants_Positive#2" //GUID:a0dc70e1e5c75874a9965beac5802687
						}
						case Clergy
						{
							voice_line = "narrator_voice:opinion_increased_clergy"
							case Catholic = (kingdom.is_catholic)
							{
								sprite icon = "Assets/UI/Elements/msg_icons/Icon_Message_ClergyCatholic_Positive.png:Icon_Message_ClergyCatholic_Positive#2" //GUID:8892a5e6ecd321940ba53cc1e1d46849
								sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_OpinionChange_ClergyCatholic_Positive.tga:UI_Illustration_OpinionChange_ClergyCatholic_Positive#2" //GUID:b67f6f341fc1389498e24fb4a6a243f7
							}
							case Orthodox = (kingdom.is_orthodox)
							{
								sprite icon = "Assets/UI/Elements/msg_icons/Icon_Message_ClergyOrthodox_Positive.png:Icon_Message_ClergyOrthodox_Positive#2" //GUID:fb36d05d93d27d142bae88170d21ba85
								sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_OpinionChange_Clergy_Orthodox_Positive.tga:UI_Illustration_OpinionChange_Clergy_Orthodox_Positive#2" //GUID:2cdd4196aab68bd4d8983c38892a471b
							}
						}
						case Scholars
						{
							voice_line = "narrator_voice:opinion_increased_scholars"
							sprite icon = "Assets/UI/Elements/msg_icons/Icon_Message_Scholars_Positive.png:Icon_Message_Scholars_Positive#2" //GUID:f71fe1668844bba44a7cbb7ef9b985cd
							sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_OpinionChange_Scholars_Positive.png:UI_Illustration_OpinionChange_Scholars_Positive#2" //GUID:0f8916867434ba347b34f868990e45c7
						}
						case Shamans
						{
							voice_line = "narrator_voice:opinion_increased_shamans"
							sprite icon = "Assets/UI/Elements/msg_icons/Icon_Message_Shamans_Positive.png:Icon_Message_Shamans_Positive#2" //GUID:7f20c074b1c07c742a26a6b4fe01a65a
							sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_OpinionChange_Shamans_Positive.png:UI_Illustration_OpinionChange_Shamans_Positive#2" //GUID:b7634e178a4371240a131cd835991e9f
						}
						case Peasantry
						{
							voice_line = "narrator_voice:opinion_increased_peasantry"
							sprite icon = "Assets/UI/Elements/msg_icons/Icon_Message_Peasantry_Positive.png:Icon_Message_Peasantry_Positive#2" //GUID:0197d64a50a601c45a7abbda2034c3d7
							sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_OpinionChange_Peasantry_Positive.tga:UI_Illustration_OpinionChange_Peasantry_Positive#2" //GUID:212268947bb15ee46a4af789f863c36b
						}
						text caption = "{opinion_name_def.name} opinion increased"
						text text = "{flavor}"
					}
				}
				case negative = (amount < 0 && kingdom.opinions[opinion] != -10)
				{
					message
					{
						def = NegativeOpinionOutcomeMessage
						switch_value = (kingdom.opinions[opinion].def.name)
						
						case Nobility
						{
							voice_line = "narrator_voice:opinion_decreased_nobility"
							sprite icon = "Assets/UI/Elements/msg_icons/Icon_Message_Nobility_Negative.png:Icon_Message_Nobility_Negative#2" //GUID:8c253982ca51d2a40b1f8a50f89980c6
							sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_OpinionChange_Nobility_Negative.tga:UI_Illustration_OpinionChange_Nobility_Negative#2" //GUID:6b765112ed59f3040a4c38f1cf07931f
						}
						case Army
						{
							voice_line = "narrator_voice:opinion_decreased_army"
							sprite icon = "Assets/UI/Elements/msg_icons/Icon_Message_Army_Negative.png:Icon_Message_Army_Negative#2" //GUID:169b1e05799cb4b4ba899dc7a60b1341
							sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_OpinionChange_Army_Negative.png:UI_Illustration_OpinionChange_Army_Negative#2" //GUID:ee2eb78fda8b45746b112dc127d1c17a
						}
						case Merchants
						{
							voice_line = "narrator_voice:opinion_decreased_merchants"
							sprite icon = "Assets/UI/Elements/msg_icons/Icon_Message_Merchants_Negative.png:Icon_Message_Merchants_Negative#2" //GUID:4eb86779a6cf72c4ba756955aa504366
							sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_OpinionChange_Merchants_Negative.tga:UI_Illustration_OpinionChange_Merchants_Negative#2" //GUID:5ccedba080388004dad8998287bbffee
						}
						case Clergy
						{
							voice_line = "narrator_voice:opinion_decreased_clergy"
							case Catholic = (kingdom.is_catholic)
							{
								sprite icon = "Assets/UI/Elements/msg_icons/Icon_Message_ClergyCatholic_Negative.png:Icon_Message_ClergyCatholic_Negative#2" //GUID:8b0e28d2e84d54e48b27d070d6011122
								sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_OpinionChange_ClergyCatholic_Negative.tga:UI_Illustration_OpinionChange_ClergyCatholic_Negative#2" //GUID:72c725cbc15d04946a895a91686e30d8
							}
							case Orthodox = (kingdom.is_orthodox)
							{
								sprite icon = "Assets/UI/Elements/msg_icons/Icon_Message_ClergyOrthodox_Negative.png:Icon_Message_ClergyOrthodox_Negative#2" //GUID:412a33112a8f0114a8746cdffbbea902
								sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_OpinionChange_ClergyOrthodox_Negative.tga:UI_Illustration_OpinionChange_ClergyOrthodox_Negative#2" //GUID:8f9a4f8d65d622245a51fb39e8bd816c
							}
						}
						case Scholars
						{
							voice_line = "narrator_voice:opinion_decreased_scholars"
							sprite icon = "Assets/UI/Elements/msg_icons/Icon_Message_Scholars_Negative.png:Icon_Message_Scholars_Negative#2" //GUID:13998fbb35cbb374aa98f47de92e4628
							sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_OpinionChange_Scholars_Negative.png:UI_Illustration_OpinionChange_Scholars_Negative#2" //GUID:79233a96c9dc7d24891eb922c725ef89
						}
						case Shamans
						{
							voice_line = "narrator_voice:opinion_decreased_shamans"
							sprite icon = "Assets/UI/Elements/msg_icons/Icon_Message_Shamans_Negative.png:Icon_Message_Shamans_Negative#2" //GUID:0a0b1b5513b404a4ca94c3ed65f71b8b
							sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_OpinionChange_Shamans_Negative.tga:UI_Illustration_OpinionChange_Shamans_Negative#2" //GUID:3161c44938985c243a055ef4e5b8142f
						}
						case Peasantry
						{
							voice_line = "narrator_voice:opinion_decreased_peasantry"
							sprite icon = "Assets/UI/Elements/msg_icons/Icon_Message_Peasantry_Negative.png:Icon_Message_Peasantry_Negative#2" //GUID:63f887873150f0342a66ae44c94256cb
							sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_OpinionChange_Peasantry_Negative.png:UI_Illustration_OpinionChange_Peasantry_Negative#2" //GUID:cf440c41e2d362148b31ea69544203cd
						}
						text caption = "{opinion_name_def.name} opinion decreased"
						text text = "{flavor}"
					}
				}
			}
		}
		option prevent_opinion_drop
		{
			case kingdom
			{
				message
				{
					def = OpinionOutcomeMessage
					switch_value = (kingdom.opinions[opinion].def.name)
					
					case Nobility
					{
						sprite icon = "Assets/UI/Elements/msg_icons/Icon_Message_Nobility_Positive.png:Icon_Message_Nobility_Positive#2" //GUID:0757ebb56fba00f449e3d478c9682f6c
					}
					case Army
					{
						sprite icon = "Assets/UI/Elements/msg_icons/Icon_Message_Army_Positive.png:Icon_Message_Army_Positive#2" //GUID:c6d58c6f92d5d8c4d8c5129b5d34cea4
					}
					case Merchants
					{
						sprite icon = "Assets/UI/Elements/msg_icons/Icon_Message_Merchants_Positive.png:Icon_Message_Merchants_Positive#2" //GUID:54b850ba25ecd2c4a9ca2cc4776daecb
					}
					case Clergy
					{
						sprite icon = "Assets/UI/Elements/msg_icons/Icon_Message_ClergyCatholic_Positive.png:Icon_Message_ClergyCatholic_Positive#2" //GUID:8892a5e6ecd321940ba53cc1e1d46849
					}
					case Scholars
					{
						sprite icon = "Assets/UI/Elements/msg_icons/Icon_Message_Scholars_Positive.png:Icon_Message_Scholars_Positive#2" //GUID:f71fe1668844bba44a7cbb7ef9b985cd
					}
					case Shamans
					{
						sprite icon = "Assets/UI/Elements/msg_icons/Icon_Message_Shamans_Positive.png:Icon_Message_Shamans_Positive#2" //GUID:7f20c074b1c07c742a26a6b4fe01a65a
					}
					case Peasantry
					{
						sprite icon = "Assets/UI/Elements/msg_icons/Icon_Message_Peasantry_Positive.png:Icon_Message_Peasantry_Positive#2" //GUID:0197d64a50a601c45a7abbda2034c3d7
					}
					text caption = "{opinion_name_def.name} opinion decline avoided"
					text text = ["Some of the recent events made the {opinion_name_def.name} quite agitated, but with his unique leadership {kingdom.king:s} calmed them down.",
								 "Our {opinion_name_def.name} didn't approve some of our king's recent actions, but he managed to convince them that he did what he have to.",
								 "Some representatives of the {opinion_name_def.name} gathered to protest against some of {kingdom.king:s} latest decisions, but after he made an inspiring speech, they dispersed, content with his argumentation."]
				}
			}
		}
	}
	
	outcome_defaults : OutcomeDefaults
}

//////////////
///Nobility///
//////////////

def LoseWarNobilityOpinionRule : OpinionChangeRule
{
	opinion = "NobilityOpinion"
	amount = -3
	reason = "war_lost"
	flavor = "Losing the war against {st_param.winner} has put doubt within few of your high-standing nobles."
	
	triggers { kingdom war_lost }
}

def LoseProvinceNobilityOpinionRule : OpinionChangeRule
{
	opinion = "NobilityOpinion"
	amount = (st_sender.is_pagan && -2 || -1)
	reason = "province_lost"
	flavor = "Losing control over the province of {st_param} has shaken the nobles in your kingdom."
	
	triggers {
		kingdom realm_deleted
		{
			condition = (!param.kingdom.is_papacy || param.kingdom.num_realms > 1) //dont trigger when restoring papacy
		}
	}
}

// def IncreaseTaxesNobilityOpinionRule : OpinionChangeRule
// {
// 	opinion = "NobilityOpinion"
// 	amount = -3
// 	reason = "taxes_increased"
// 	flavor = "Increasing the taxes we collect from our provinces has angered some of our noblemen."

// 	triggers
// 	{
// 		kingdom tax_rate_changed
// 		{
// 			condition = (param) //param == true -> increased
// 		}
// 	}
// }

def GetBankruptNobilityOpinionRule : OpinionChangeRule
{
	opinion = "NobilityOpinion"
	amount = -2
	reason = "getting_bankrupt"
	flavor = "The disastrous state of our economy led to enormous distrust of the capabilities of our current royal court to rule over {kingdom}."
	
	triggers { kingdom getting_bankrupt }
}

def RebelsOccupyProvinceNobilityOpinionRule : OpinionChangeRule
{
	opinion = "NobilityOpinion"
	amount = -3
	reason = "rebels_occupy_province"
	flavor = "The inability of {king} to take care of the rebel armies and stop their advances is considered as a sign of weakness by the nobility."
	
	triggers
	{
		realm controlling_obj_changed
		{
			condition = (sender.is_rebel_occupied)
		}
	}
}

def DefeatRebelNobilityOpinionRule : OpinionChangeRule
{
	opinion = "NobilityOpinion"
	amount = 1
	reason = "defeat_rebel"
	flavor = "The victory over the rebel scum, previously pillaging our lands, is appreciated by the nobility."
	
	triggers
	{
		realm rebel_defeated
	}
}

def WinWarNobilityOpinionRule : OpinionChangeRule
{
	opinion = "NobilityOpinion"
	amount = 1
	reason = "war_won_nobility"
	flavor = "Winning the war against {st_param.loser} has proven to our nobility that their {kingdom.king.title} possesses a sharp military mind, capable of taking swift care of all who stand in his path!"
	
	triggers { kingdom war_won }
}

def ExileNobleNobilityOpinionRule : OpinionChangeRule
{
	opinion = "NobilityOpinion"
	amount = -1
	reason = "exiled_noble"
	flavor = "Exiling {st_sender}, a prominent aristocrat and a member of the royal court, led to notable discontent amongst our noblemen." //!!! add reference to exiled character name
	
	triggers
	{
		character exiled
		{
			condition = (!kingdom.ks_discard_exile_abandon_penalties && (RndF(1,100) <= sender.class_level * 6))
		}
	}
}


def RefuseOfferNobilityOpinionRule : OpinionChangeRule
{
	opinion = "NobilityOpinion"
	
	float our_influence = (trigger.param.to.GetInfluenceIn(trigger.param.from))
	float their_influence = (trigger.param.from.GetInfluenceIn(trigger.param.to))
	int amount_influence = (min(0, round((our_influence - their_influence)/20)))
	
	float pc_accept_ratio_above_threshold = (st_param.pc_accept_ratio_above_threshold)
	int t1 = ((pc_accept_ratio_above_threshold > 0) && -1)
	int t2 = ((pc_accept_ratio_above_threshold > 0.3) && -2)
	int t3 = ((pc_accept_ratio_above_threshold > 0.6) && -3)
	int amount_accept_ratio = (t3 || t2 || t1)
	
	amount = (max(-3, amount_influence + amount_accept_ratio))
	reason = "refuse_offer"
	flavor = "Our noblemen dislike that we rejected the recent diplomatic offer of {st_param.src_kingdom} so lightly."
	cooldown = 900
	
	triggers = 5
	{
		kingdom recieved_offer_declined
		{
			condition = (amount < 0 && !param.def.is_catholic_church_offer)
		}
	}
}


// Refusing to pay ransom //implemented in AskForPrisonerRansom offer's outcomes


def AbandonPrisonerNobilityOpinionRule : OpinionChangeRule
{
	opinion = "NobilityOpinion"
	amount = -3
	reason = "abandon_prisoner"
	flavor = "Our decision to abandon the respected {st_param} in a foreign dungeon was met with disapproval and has caused some uproar amongst our nobility."
	
	triggers
	{
		kingdom character_abandoned
		{
			condition = (!kingdom.ks_discard_exile_abandon_penalties)
		}
	}
}


// def AgreeToRebelDemandsNobilityOpinionRule : OpinionChangeRule //!!! not implemented
// {
// 	opinion = "NobilityOpinion"
// 	amount = -3/-5
// 	reason = "agree_to_rebel_demands"

// 	triggers { kingdom dummy }
// }


def NewKingNobilityOpinionRule : OpinionChangeRule
{
	opinion = "NobilityOpinion"
	
	amount = ((trigger.change_type == "new_dynasty") && -3 || -1)
	reason = "new_king"
	flavor = "The death of our {king.title} has shaken up our internal matters and some of our nobles might cause problems. Trying times are ahead of us."
	
	triggers {
		kingdom king_changed
		{
			condition = (is_old_king_death)
		}
	}
}

def AcceptVassalityNobilityOpinionRule : OpinionChangeRule
{
	opinion = "NobilityOpinion"
	amount = -5
	reason = "accept_vassality"
	flavor = "Our acceptance of {kingdom.vassal_of:s} sovereignty was met with disapproval."
	
	triggers { kingdom became_vassal_opinion }
}

def TakeLoanNobilityOpinionRule : OpinionChangeRule //!!! revise once loans logic is final
{
	opinion = "NobilityOpinion"
	amount = (-RndI(1, 3))
	reason = "take_loan"
	flavor = "News of our recent loan has spread quickly and many of our nobles aren't pleased. They demand to know how will the gold be used and how will we pay it back."
	
	triggers { kingdom take_loan }
}

def RepayLoanNobilityOpinionRule : OpinionChangeRule //!!! not implemented in logic
{
	opinion = "NobilityOpinion"
	amount = (RndI(1, 3))
	reason = "repay_loan"
	flavor = "As we managed to pay back our debts, most of the noblement, that were worried before, are now content."
	
	triggers { kingdom repay_loan }
}

def NobilityDeclareIndependenceOpinionRule : OpinionChangeRule
{
	opinion = "NobilityOpinion"
	var nobility_opinion = (kingdom.opinions[opinion].value)
	amount = (nobility_opinion > 0 && 3 || -3)
	reason = "nobility_opinion_independence"
	flavor = "Many of our noblemen had a strong and vocal reaction, regarding our independence - some are pleased, others - scared by the consequences."
	
	triggers
	{
		kingdom independence
		{
			condition = (nobility_opinion != 0)
		}
	}
}

def DeclaringWarNobilityOpinionRule : OpinionChangeRule
{
	opinion = "NobilityOpinion"
	var rel = (trigger.param.from.GetRelationship(trigger.param.to))
	var f5 = ((rel > 750) && -5)
	var f4 = ((rel > 500) && -4)
	var f3 = ((rel > 300) && -3)
	var f2 = ((rel > 200) && -2)
	var f1 = ((rel > 100) && -1)
	var h3 = ((rel < (-750)) && 3)
	var h2 = ((rel < (-500)) && 2)
	var h1 = ((rel < (-250)) && 1)
	amount = (f5 || f4 || f3 || f2 || f1 || h3 || h2 || h1)
	reason = "declare_war"
	
	flavor = "Declaring war on {st_param.tgt_kingdom} instantly resulted in loud reaction of our noblemen - some support the decision and other find it unnecessary and reckless."
	
	triggers
	{
		kingdom sent_offer_accepted
		{
			condition = (amount != 0 && param.name == "DeclareWar")
		}
	}
}


def PalaceFinishedNobilityOpinionRule : OpinionChangeRule
{
	opinion = "NobilityOpinion"
	amount = 2
	reason = "commercial_building_finished"
	flavor = "The completion of our {st_param.name} in {st_param.realm} demonstrated the greatness of {king} and his ability to lead our kingdom to glory!"
	
	triggers
	{
		kingdom build_finished
		{
			condition = (param.def.id == "#RoyalPalace")
		}
	}
}

def PalaceDestroyedNobilityOpinionRule : OpinionChangeRule
{
	opinion = "NobilityOpinion"
	
	amount = -2
	flavor = "The destruction of the once great {st_param.name} in {st_param.realm} undoubtedly lowered the opinion of our noblemen towards {king}. They wonder what could possibly explain such deed."
	
	triggers
	{
		kingdom building_destroyed
		{
			condition = (param.def.id == "#RoyalPalace")
		}
	}
}

def UpgradeCompletedNobilityOpinionRule : OpinionChangeRule
{
	opinion = "NobilityOpinion"
	amount = 1
	reason = "complete_nobility_upgrade"
	
	bool building_is_queens = (st_param.id == "#QueensChambers")
	bool building_is_harem = (st_param.id == "#Harem")
	bool building_is_status = ((st_param.id == "#GreatHall") || (st_param.id == "#SeatOfPower"))
	bool building_is_court = (st_param.id == "#Courthouse")
	
	flavor = $["Our noblemen are impressed by the greatness and prosperity we demonstrate to the other kingdoms with our recent improvements."
			   "[{building_is_queens:if} There are some that mutter {kingdom.queen} has too much control over {kingdom.king}, but none of them dares to say it out loud.]"
			   "[{building_is_harem:if} Some of the noblemen are a bit worried that {kingdom.king} might spend too much of his time new {st_param.name}, though.]"
			   "[{building_is_status:if} Surely, only few kingdoms have such marvelous {st_param.name} as ours.]"
			   "[{building_is_court:if} Building {st_param.name} is an important step for brining order and prosperity in our towns and increasing our authority.]"
			  ]
	
	triggers
	{
		kingdom building_upgrade_unlocked
		{
			//condition = (param.stat_modifiers.rs_happiness > 0)
			condition = (param.id == "#QueensChambers" || param.name == "#Harem" || param.name == "#GreatHall" || param.name == "#SeatOfPower" || param.id == "#Courthouse")
		}
	}
}

def WonLoyalRealmNobilityOpinionRule : OpinionChangeRule
{
	opinion = "NobilityOpinion"
	amount = 1
	reason = "won_loyal_realm"
	flavor = "Our noblemen congratulate {kingdom.king} that he finally freed our people in {st_param.realm_in}!"
	
	triggers
	{
		kingdom battle_won
		{
			condition = (param.castle != null && param.attacker_kingdom == sender  && param.realm_in.majority_kingdom == sender)
		}
	}
}

def PrisonerRecoveredNobilityOpinionRule : OpinionChangeRule
{
	opinion = "NobilityOpinion"
	var t3 = ((st_sender.class_level > 10) && 3)
	var t2 = ((st_sender.class_level > 5) && 2)
	var t1 = 1
	var king_bonus = (st_sender.is_king && 2)
	var prince_bonus = (st_sender.is_prince && 1)
	amount = ((t3 || t2 || t1) + king_bonus + prince_bonus)
	reason = "prisoner_recovered"
	flavor = "Our nobility is delighted to welcome {st_sender} back to the royal court. They really respect {kingdom.king:s} efforts to free him."
	
	triggers
	{
		character prisoner_released
		character prisoner_ransomed
	}
}

def TraditionAdoptedNobilityOpinionRule : OpinionChangeRule
{
	opinion = "NobilityOpinion"
	amount = 2
	reason = "tradition_adopted_nobility"
	flavor = "Our noblemen are happy that the people of {st_sender} have accepted {st_param.name} as one of their core values."
	
	triggers
	{
		kingdom new_tradition
		{
			condition = (param.def.skill.def.class_gradient_key == "Diplomat")
		}
	}
}

def HoldAFeastNobilityOpinionRule : OpinionChangeRule
{
	opinion = "NobilityOpinion"
	amount = 2
	reason = "hold_feast_nobility"
	flavor = "Our noblemen greatly enjoyed the generous feast {kingdom.king} organized recently and still praise the royal cooks and entertainers."
	
	triggers
	{
		kingdom hold_feast
	}
}

//////////////
///Religion///
//////////////



def ChristianJoinJihadChristianSideOpinionRule : OpinionChangeRule
{
	opinion = "ClergyOpinion"
	amount = 3
	reason = "joined_against_jihad"
	flavor = "Our priests welcome our decision to aid our Christian bretheren in the {st_param}! Uniting in the face of an incoming Muslim invasion was the right choice."
	
	triggers
	{
		kingdom joined_war
		{
			condition = (sender.is_christian && param.is_jihad && GetEnemyLeader(param, sender).is_caliphate)
		}
	}
}

def ChristianLeaveJihadChristianSideOpinionRule : OpinionChangeRule
{
	opinion = "ClergyOpinion"
	amount = -3
	reason = "joined_against_jihad"
	flavor = "Our priests condemn our decision to abandon the war of our Chirstian bretheren. Withdrawing from the {st_param.war} has given a hefty advantage to the Muslim invaders."
	
	triggers
	{
		kingdom left_war
		{
			condition = (sender.is_christian && param.war.is_jihad &&param.enemy_leader.is_caliphate)
		}
	}
}

def AgreeToLeadCrusadeClergyOpinionRule : OpinionChangeRule
{
	opinion = "ClergyOpinion"
	amount = (trigger.param.reason != "forced" and 5 or 3)
	reason = "agree_lead_crusade"
	flavor = "Our clergy wishes to reassure you of their full support for the crusade! Deus vult!"
	
	triggers
	{
		character crusade_started
	}
}

def RefuseToLeadCrusadeClergyOpinionRule : OpinionChangeRule
{
	opinion = "ClergyOpinion"
	amount = -2
	reason = "refuse_lead_crusade"
	flavor = "Refusing to lead a crusade has infuriated our clergymen! They're openly questioning {st_param.tgt_kingdom.king:s} faith, courage, and capacity to rule."
	
	triggers
	{
		kingdom recieved_offer_declined
		{
			condition = (param.name == "LeadCrusadeOffer")
		}
	}
}

def AttackingCatholicKingdomClergyOpinionRule : OpinionChangeRule
{
	opinion = "ClergyOpinion"
	var our_rel = (st_sender.GetRelationship(st_sender.papacy))
	var their_rel = (st_param.tgt_kingdom.GetRelationship(st_sender.papacy))
	amount = (round(map( ((our_rel - their_rel) / 2), -1000, 1000, -10, -1)))
	reason = "attack_catholic_kingdom"
	flavor = "Our military advances against the Catholic kingdom of {st_param.tgt_kingdom} have angered our clergy."
	
	triggers
	{
		kingdom sent_offer_accepted
		{
			condition = (param.name == "DeclareWar" && sender.is_catholic && param.tgt_kingdom.is_catholic && !param.tgt_kingdom.excommunicated)
		}
	}
}

def AttackingPopeClergyOpinionRule : OpinionChangeRule
{
	opinion = "ClergyOpinion"
	amount = -5
	reason = "attack_pope"
	flavor = "Declaring war against {st_param.tgt_kingdom} has wounded our relations with our Clergy greatly! We should be more careful when showing aggression against the Pope."
	
	triggers
	{
		kingdom sent_offer_accepted
		{
			condition = (param.name == "DeclareWar" && sender.is_catholic && param.tgt_kingdom == sender.papacy)
		}
	}
}

def CatholicRefusePeaceWithPopeClergyOpinionRule : OpinionChangeRule
{
	opinion = "ClergyOpinion"
	amount = -5
	reason = "catholic_refuse_peace_with_pope"
	flavor = "Our priest condemn the refusal of {king} to sign peace with the Papal States. They say he is an utter disgrace to {kingdom}."
	cooldown = 900
	
	triggers
	{
		kingdom recieved_offer_declined
		{
			var is_peace_offer = (param.name == "WhitePeaceOffer" || param.name = "PeaceDemandTribute" || param.name = "PeaceOfferTribute")
			condition = (is_peace_offer && param.from.is_papacy && param.to.is_catholic)
		}
	}
}


def PopeEntersCourtClergyOpinionRule : OpinionChangeRule
{
	opinion = "ClergyOpinion"
	amount = 5
	reason = "pope_enters_court"
	flavor = "Our people rejoice - the Pope has arrived in our kingdom and fulfills his holy duties from within our court!"
	triggers { kingdom cleric_elected_pope }
}

// def PlaceOfWorshipDestroyedClergyOpinionRule : OpinionChangeRule
// {
// 	opinion = "ClergyOpinion"
// 	amount = -3
// 	reason = "place_of_worship_destroyed"
// 	flavor = "Our clergymen are furious about the destruction of {st_param.name} in {st_param.realm}. They are worried and demand explanation."

// 	triggers
// 	{ 
// 		kingdom building_destroyed
// 		{
// 			condition = ((sender.is_christian && param.name == "Church") || (sender.is_muslim && param.name == "Masjid"))
// 		}
// 	}
// }

def RivalPlaceOfWorshipDestroyedClergyOpinionRule : OpinionChangeRule
{
	opinion = "ClergyOpinion"
	amount = 3
	reason = "rival_place_of_worship_destroyed"
	flavor = "Our {kingdom.cleric_title:s} celebrated the destruction of {st_param.name} in {st_param.realm}. Such places, supporting unrighteous and shameful beliefs within our kingdom, should all be reduced to rubble, they say."
	
	triggers
	{
		kingdom building_destroyed
		{
			var rival_christian = (!sender.is_christian && param.name == "Cathedral") //(!sender.is_christian && (param.name == "Church" || param.name == "Cathedral"))
			var rival_muslim = (!sender.is_muslim && param.name == "GreatMosque") //(!sender.is_muslim && (param.name == "Masjid" || param.name == "GreatMosque"))
			//var rival_pagan = (!sender.is_pagan && param.name == "Temple")
			condition = (rival_christian || rival_muslim || rival_pagan)
		}
	}
}

def GreatPlaceOfWorshipDestroyedClergyOpinionRule : OpinionChangeRule
{
	opinion = "ClergyOpinion"
	amount = -2
	reason = "great_place_of_worship_destroyed"
	flavor = "Our {kingdom.cleric_title:s} are furious about the destruction of the emblematic {st_param.name} in {st_param.realm}. They demand its immediate restoration or threaten to withdraw their support of {king}."
	
	triggers
	{
		kingdom building_destroyed
		{
			condition = ((sender.is_christian && param.name == "Cathedral") || (sender.is_muslim && param.name == "GreatMosque"))
		}
	}
}

def GreatPlaceOfWorshipFinishedClergyOpinionRule : OpinionChangeRule
{
	opinion = "ClergyOpinion"
	amount = 2
	reason = "great_place_of_worship_finished"
	flavor = "Our {kingdom.cleric_title:s} praise {king} for the glorious {st_param.name} in {st_param.realm} that was recently built."
	
	triggers
	{
		kingdom build_finished
		{
			condition = ((sender.is_christian && param.def.id == "#Cathedral") || (sender.is_muslim && param.def.id == "#GreatMosque"))
		}
	}
}

def AttackingByzantiumClergyOpinionRule : OpinionChangeRule
{
	opinion = "ClergyOpinion"
	var rel = (kingdom.GetRelationship(kingdom.byzantium))
	amount = ( ((kingdom.constantinople_kingdom == kingdom.byzantium) && (rel < 0)) && -5 || -3)
	reason = "attack_byzantium"
	flavor = "Attacking {st_param.tgt_kingdom} might have been a costly decision, as it has greatly angered our church and shaken our Orthodox unity."
	triggers
	{
		kingdom sent_offer_accepted
		{
			condition = (param.name == "DeclareWar" && sender.is_orthodox && param.tgt_kingdom == sender.byzantium)
		}
	}
}

def OrthodoxRefusePeaceWithEcumenicalPatriarchClergyOpinionRule : OpinionChangeRule
{
	opinion = "ClergyOpinion"
	var clergy_opinion = (kingdom.opinions[opinion].value)
	amount = (clergy_opinion >= 0 && -5 || -3)
	reason = "orthodox_refuse_peace_with_ecumenical_patriarch"
	flavor = "Our priest condemn the refusal of {king} to sign peace with {st_param.tgt_kingdom} and thus worsen our relations with the Ecumenical Patriarchate of Constantinople."
	cooldown = 900
	
	triggers
	{
		kingdom recieved_offer_declined
		{
			var is_peace_offer = (param.name == "WhitePeaceOffer" || param.name = "PeaceDemandTribute" || param.name = "PeaceOfferTribute")
			condition = (is_peace_offer && param.from.has_ecumenical_patriarch && param.to.is_orthodox)
		}
	}
}

def AttackingConquerorOfRomeClergyOpinionRule : OpinionChangeRule
{
	opinion = "ClergyOpinion"
	amount = 2
	reason = "attack_conqueror_of_rome"
	flavor = "Declaring war on {st_param.tgt_kingdom} was the right thing to do, as it has shown our commitment to liberating Rome from the clutches of its unrightful holders!"
	triggers
	{
		kingdom sent_offer_accepted
		{
			condition = (param.name == "DeclareWar" && sender.is_catholic && param.tgt_kingdom == sender.rome_kingdom && sender.rome_kingdom != sender.papacy)
		}
	}
}

def AttackingConquerorOfConstantinopleClergyOpinionRule : OpinionChangeRule
{
	opinion = "ClergyOpinion"
	amount = 5
	reason = "attack_conqueror_of_constantinople"
	flavor = "Our war declaration against {st_param.tgt_kingdom}, the unrightful owners of Constantinople, was met with unanimous applaud!" //!!! reference "Constantinople" better...
	triggers
	{
		kingdom sent_offer_accepted
		{
			condition = (param.name == "DeclareWar" && sender.is_orthodox && param.tgt_kingdom == sender.constantinople_kingdom && !sender.constantinople_kingdom.is_orthodox)
		}
	}
}

// def RelationWithPapacyWorsenedClergyOpinionRule : OpinionChangeRule
// {
// 	opinion = "ClergyOpinion"
// 	amount = -1
// 	reason = "relation_with_papacy_worsened"
// 	flavor = "After a gathering, many of our bishops signed under an angry letter to {king}. They are unhappy that our diplomatic actions are worsening our relations with the Holy See."

// 	triggers
// 	{
// 		kingdom relation_modified
// 		{
// 			condition = (sender.is_catholic && param.target.is_papacy && param.direct && (param.value < 0) && (param.source.relation_with_pope < 0))
// 		}
// 	}
// }


def AcceptOfferFromPapacyClergyOpinionRule : OpinionChangeRule
{
	opinion = "ClergyOpinion"
	amount = 1
	reason = "accept_offer"
	flavor = "Our clergymen cordially congratulated {king} for his wise decision to accept a diplomatic request from the Holy See."
	
	triggers
	{
		kingdom recieved_offer_accepted
		{
			condition = (param.to.is_catholic && param.from.is_papacy)
		}
	}
}

def DeclinedOfferFromPapacyClergyOpinionRule : OpinionChangeRule
{
	opinion = "ClergyOpinion"
	amount = -1
	reason = "declined_offer"
	flavor = "After a gathering, many of our bishops signed under an angry letter to {king}. They are unhappy that we disrespected and denied a diplomatic request of the Holy See."
	
	triggers
	{
		kingdom recieved_offer_declined
		{
			condition = (param.to.is_catholic && param.from.is_papacy)
		}
	}
}

def TraditionAdoptedClergyOpinionRule : OpinionChangeRule
{
	opinion = "ClergyOpinion"
	amount = 2
	reason = "tradition_adopted_clergy"
	flavor = "Our {kingdom.cleric_title:s} are happy that the people of {st_sender} have {st_param.name} among their core values."
	
	triggers
	{
		kingdom new_tradition
		{
			condition = (param.def.skill.def.class_gradient_key == "Cleric")
		}
	}
}


//Establish Caliphate //implemented in ClaimCaliphateAction

//Abolish Caliphate //implemented in AbandonCaliphateAction

def NewJihadClergyOpinionRule : OpinionChangeRule
{
	opinion = "ClergyOpinion"
	amount = 3
	reason = "start_jihad"
	flavor = "The decision of our {king.title} to lead a jihad against {st_param} was greeted with unanimous approval by all of our scholars!"
	
	triggers
	{
		kingdom new_jihad
		{
			condition = (sender.is_caliphate)
		}
	}
}

//refuse to join a Jihad // skip for now !!! not implemented

def LoseMuslimHolyCityToInfidelsClergyOpinionRule : OpinionChangeRule
{
	opinion = "ClergyOpinion"
	amount = -10
	reason = "muslim_holy_city_lost_to_infidels"
	flavor = "Our religious leaders say we have failed Allah by losing our holiest city to the infidels. They are resolute - we must win it back or die trying."
	
	triggers
	{
		kingdom realm_deleted
		{
			var muslim_holy_land = (!param.is_catholic_holy_land && (param.is_shia_holy_land || param.is_sunni_holy_land))
			condition = (sender.is_muslim && !param.GetKingdom().is_muslim && muslim_holy_land)
		}
	}
}

def DeclareWarOnNonMuslimOwnerOfMuslimHolyCityClergyOpinionRule : OpinionChangeRule
{
	opinion = "ClergyOpinion"
	amount = 5
	reason = "declare_war_on_non_muslim_owner_of_muslim_holy_city"
	flavor = "Imams and {kingdom.cleric_title:s} of {kingdom} stands behind the decision of {king} - we must wage war and free the holy lands of Allah from the infidels."
	
	triggers
	{
		kingdom sent_offer_accepted
		{
			condition = (param.name == "DeclareWar" && param.from.is_muslim && !param.to.is_muslim && (param.to.HasRealm("Baghdad") || param.to.HasRealm("Yathrib") || param.to.HasRealm("Al_Maqqah")))
		}
	}
}

//Joining a Jihad // skip for now !!! not implemented

def AttackingCaliphateClergyOpinionRule : OpinionChangeRule
{
	opinion = "ClergyOpinion"
	amount = -3
	reason = "attack_caliphate"
	flavor = "Attacking {st_param.tgt_kingdom} might have been a sound tactical choice, but it was deemed as a mistake by our Scholars."
	
	triggers
	{
		kingdom sent_offer_accepted
		{
			condition = (param.name == "DeclareWar" && sender.is_muslim && param.tgt_kingdom.is_caliphate)
		}
	}
}

def RefuseJoinJihadAsMuslimOpinionRule : OpinionChangeRule
{
	opinion = "ClergyOpinion"
	amount = -2
	reason = "refuse_join_jihad"
	flavor = "Refusing to join a holy jihad has infuriated our scholars! They're openly questioning {st_param.tgt_kingdom.king:s} faith, courage, and capacity to rule."
	
	triggers
	{
		kingdom recieved_offer_declined
		{
			condition = (param.name == "DemandSupportInWar" && param.arg.is_jihad && sender.is_muslim)
		}
	}
}

def JoinJihadOpinionRule : OpinionChangeRule
{
	opinion = "ClergyOpinion"
	amount = 3
	reason = "join_jihad"
	flavor = "Our Scholars are exalted by the decision of their {kingdom.king} to offer his armies in support of the {st_param}!"
	triggers {
		kingdom joined_war
		{
			condition = (param.is_jihad && sender.is_muslim && GetEnemyLeader(param, sender) == param.jihad_target)
		}
	}
}

def JoinJihadWrongSideOpinionRule : OpinionChangeRule
{
	opinion = "ClergyOpinion"
	amount = -5
	reason = "join_jihad_wrong_side"
	flavor = "Our Scholars will not stand the decision of their {kingdom.king} to stand against Muslim armies in the {st_param}."
	triggers {
		kingdom joined_war
		{
			condition = (param.is_jihad && sender.is_muslim && GetEnemyLeader(param, sender).is_caliphate)
		}
	}
}


def AttackingInfidelsClergyOpinionRule : OpinionChangeRule
{
	opinion = "ClergyOpinion"
	amount = 1
	reason = "attack_infidels"
	flavor = "Declaring war on {st_param.tgt_kingdom} has pleased our Scholars greatly - death to the enemies of Allah!"
	
	triggers
	{
		kingdom sent_offer_accepted
		{
			condition = (param.name == "DeclareWar" && sender.is_muslim && !param.tgt_kingdom.is_muslim && param.tgt_kingdom != sender.jihad_target)
		}
	}
}

def PeaceWithInfidelsClergyOpinionRule : OpinionChangeRule
{
	opinion = "ClergyOpinion"
	amount = ((trigger.param.to.jihad_attacker != null || trigger.param.from.jihad_attacker != null) && -3 || -1)
	reason = "offer_peace_to_infidels"
	flavor = "Our clerisy and all zealous believers in {kingdom} look down on the decision to sign truce with the heathens of [{st_param.from.is_muslim:if}{st_param.to}|{st_param.from}]."
	
	var is_peace_offer = (trigger.param.name == "WhitePeaceOffer" || trigger.param.name = "PeaceDemandTribute" || trigger.param.name = "PeaceOfferTribute")
	triggers
	{
		kingdom sent_offer_accepted
		{
			condition = (is_peace_offer && param.from.is_muslim && !param.to.is_muslim)
		}
		kingdom recieved_offer_accepted
		{
			condition = (is_peace_offer && param.to.is_muslim && !param.from.is_muslim)
		}
	}
}

def ConqueringJerusalemClergyOpinionRule : OpinionChangeRule
{
	opinion = "ClergyOpinion"
	amount = 5
	reason = "conquer_jerusalem"
	flavor = "A momentous day is upon us, as people in our provinces and across distant lands praise our successful invasion of {st_param}!"
	
	triggers
	{
		kingdom realm_added
		{
			condition = (!sender.is_pagan && param == sender.religions.catholic.holy_lands_realm)
		}
	}
}

def ConqueringProvinceClergyOpinionRule : OpinionChangeRule
{
	opinion = "ClergyOpinion"
	amount = (st_param.is_important && 5 || 1)
	reason = "conquer_province_pagan"
	flavor = "Our warriors have yet again proven that they are favored by the Gods, as they crushed their opposition in the battle for {st_param.realm_in}!"
	
	triggers
	{
		kingdom battle_won
		{
			condition = (param.castle != null && param.attacker_kingdom == sender && sender.is_pagan)
		}
	}
}

def WinWarPaganClergyOpinionRule : OpinionChangeRule
{
	opinion = "ClergyOpinion"
	amount = 3
	reason = "war_won_pagan"
	flavor = "Our Shamans praise our successful campaign against {st_param.loser}! The Gods are yet again on our side."
	
	triggers
	{
		kingdom war_won
		{
			condition = (sender.is_pagan)
		}
	}
}

def ChangeReligionClergyOpinionRule : OpinionChangeRule
{
	opinion = "ClergyOpinion"
	amount = -10
	reason = "religion_changed"
	flavor = "Changing the religion of our kingdom has shaken the people! The roots of our former beliefs must be eradicated if we want our lands to be truly stable."
	
	triggers
	{
		kingdom religion_changed
		{
			condition = (param != null) // if there is a valid previous religion
		}
	}
}

def ExileClericClergyOpinionRule : OpinionChangeRule
{
	opinion = "ClergyOpinion"
	amount = -5
	reason = "exiled_cleric"
	flavor = "News about the exile of one of the holiest men in our kingdom has reached the religious echelons within our court. Needless to say, they aren't so happy." //!!! add reference to exiled character name
	
	triggers
	{
		character exiled
		{
			condition = (sender.is_cleric && !kingdom.ks_discard_exile_abandon_penalties && (RndF(1,100) <= sender.class_level * 6))
		}
	}
}

def LosingWarPaganClergyOpinionRule : OpinionChangeRule
{
	opinion = "ClergyOpinion"
	amount = -5
	reason = "war_lost_pagan"
	flavor = "Our unsuccessful war against {st_param.winner} may be a sign of dark days ahead... Have the Gods forgotten us?"
	
	triggers
	{
		kingdom war_lost
		{
			condition = (sender.is_pagan)
		}
	}
}

def LoseProvinceClergyOpinionRule : OpinionChangeRule
{
	opinion = "ClergyOpinion"
	amount = -3
	reason = "lose_province_pagan"
	flavor = "Today, our armies have been left astray by the Gods, as they failed to defend the lands of {st_param}. Some even dare to say the Gods are displeased by our ruler."
	
	triggers
	{
		kingdom realm_deleted
		{
			condition = (sender.is_pagan)
		}
	}
}

def LoseBattleClergyOpinionRule : OpinionChangeRule
{
	opinion = "ClergyOpinion"
	amount = -1
	reason = "character_battle_lost"
	flavor = "Our warriors have lost their way. Some of our religious leaders start to doubt whether {king} is really godsent."
	
	triggers
	{
		// This trigger is not send when failing to defend a siege,
		// since the primary defender is a castle, not a character.
		character battle_lost
		{
			condition = ((RndF(1,100) <= sender.army.leader.GetStat("cs_clergy_opinion_penalty_on_battle_defeat")) && (!sender.kingdom.is_pagan || param.defeated_armies_count > 1))
		}
	}
}

def MarriageWithOtherReligionClergyOpinionRule : OpinionChangeRule // consider referencing the names of the marriage targets in the flavor text
{
	opinion = "ClergyOpinion"
	amount = -3
	reason = "marriage_with_other_religion"
	flavor = "Forming a royal marriage with {st_param.spouse.kingdom_before_marriage} was seen by many as an ill-advised move. We should be careful and avoid such ungodly deeds."
	
	triggers
	{
		kingdom character_married
		{
			condition = (!sender.is_pagan && param.spouse.kingdom_before_marriage.is_pagan)
		}
	}
}

def UpgradeCompletedClergyOpinionRule : OpinionChangeRule
{
	opinion = "ClergyOpinion"
	amount = 1
	reason = "complete_clergy_upgrade"
	flavor = "Our {kingdom.cleric_title:s} rejoice upon the glorious improvements of our holy sites and practices! 'That brings us closer to God', they say, marvelling the new {st_param.name}."
	
	triggers
	{
		kingdom building_upgrade_unlocked
		{
			//condition = (param.stat_modifiers.rs_happiness > 0)
			condition = (param.id == "#ChristianDecoration" || param.id == "#MuslimDecoration" || param.id == "#ChristianCeremonies"  || param.id == "#MuslimCeremonies" || param.id == "#PaganCeremonies" || param.id == "#ArtsSchool")
		}
	}
}

def RestorePapacyClergyOpinionRule : OpinionChangeRule
{
	opinion = "ClergyOpinion"
	amount = 15
	reason = "papacy_restored"
	flavor = "Our clergy is delighted that {st_sender.king} has restored the Papacy, not that something else could have been expected. {st_sender} is truly a bastion of the Catholic faith!"
	
	triggers
	{
		kingdom restored_papacy
		{
			condition = (sender.is_catholic)
		}
	}
}

def GiveGoldToPapacyClergyOpinionRule : OpinionChangeRule
{
	opinion = "ClergyOpinion"
	var s5 = ((st_param.gold_amount >= st_param.donor.S5) && 5)
	var s4 = ((st_param.gold_amount >= st_param.donor.S4) && 4)
	var s3 = ((st_param.gold_amount >= st_param.donor.S3) && 3)
	var s2 = ((st_param.gold_amount >= st_param.donor.S2) && 2)
	var s1 = ((st_param.gold_amount >= st_param.donor.S1) && 1)
	amount = (s5 || s4 || s3 || s2 || s1)
	reason = "give_gold_to_papacy"
	flavor = "Our clergymen are proud that {st_sender} is able and willing to help the papacy with a proper donation, sent to {st_param.recipient.king}!"
	
	triggers
	{
		kingdom sent_offer_accepted
		{
			condition = (param.name == "OfferGold" && param.recipient.is_papacy)
		}
		
		kingdom recieved_offer_accepted
		{
			condition = (param.name == "DemandGold" && param.recipient.is_papacy)
		}
	}
}

def WeWereUnexcommunicatedClergyOpinionRule : OpinionChangeRule
{
	opinion = "ClergyOpinion"
	amount = 5
	reason = "unexcommunicated"
	flavor = "By convincing {pope} to lift the stigma of excommunication over our {st_sender.kingdom.KingdomType}, {st_sender.king} showed our clergy that he is a holy man acting under the guidance of God."
	
	triggers
	{
		kingdom unexcommunicated
		{
			condition = (sender.is_catholic)
		}
	}
}

def ConvertRealmClergyOpinionRule : OpinionChangeRule
{
	opinion = "ClergyOpinion"
	amount = 1
	reason = "convert_realm"
	flavor = "The people in {st_param} have welcomed {st_sender.kingdom.religion:ism} into their lives. This fills the hearts of our {kingdom.cleric_title:s} with warmth and pride!"
	
	triggers
	{
		character converted_realm
	}
}

def OrthodoxDeclaredWarClergyOpinionRule : OpinionChangeRule
{
	opinion = "ClergyOpinion"
	amount = -1
	reason = "declared_war"
	flavor = "Our clergy issued a stern reminder that despite what a certain {st_sender.kingdom.king.title} might believe, war is never the answer!"
	
	triggers
	{
		kingdom declared_war
		{
			condition = (sender.is_orthodox)
		}
	}
}

def OrthodoxRefusedPeaceClergyOpinionRule : OpinionChangeRule
{
	opinion = "ClergyOpinion"
	amount = -1
	reason = "refused_peace"
	flavor = "{st_sender.kingdom:ian} clerics are frustrated that {st_sender.kingdom.king:s} bloodthirst stands in the way of a peaceful conflict resolution!"
	cooldown = 1800
	
	triggers = 50
	{
		kingdom recieved_offer_declined
		{
			condition = (param.name == "PeaceOfferTribute" || param.name == "WhitePeaceOffer")
		}
	}
}



//////////////
/////Army/////
//////////////

def KingdomFoodNegativeArmyOpinionRule : OpinionChangeRule
{
	opinion = "ArmyOpinion"
	amount = -1
	reason = "food_negative"
	flavor = "Our soldiers all over the kingdom are unsatisfied, to say the least, by the insufficient kingdom food supplies. Our generals are getting worried."
	
	triggers
	{
		kingdom negative_kingdom_food_penalty
	}
}

def LoseWarArmyOpinionRule : OpinionChangeRule // !!! not tested
{
	opinion = "ArmyOpinion"
	amount = (st_param.attacker == st_sender && -5 || -1)
	reason = "war_lost"
	flavor = "Losing the war against {st_param.winner} has demoralized our army deeply, sowing doubt amongst our commanding ranks."
	
	triggers { kingdom war_lost }
}

def WinWarArmyOpinionRule : OpinionChangeRule // !!! not tested
{
	opinion = "ArmyOpinion"
	amount = 3
	reason = "war_won_army"
	flavor = "The successful war against {st_param.loser} has proven to our military that their {st_param.winner.king.title} is an expert tactician capable of leading his armies to triumph!"
	
	triggers { kingdom war_won }
}

def WinBattleArmyOpinionRule : OpinionChangeRule // !!! not tested
{
	opinion = "ArmyOpinion"
	amount = 1
	reason = "battle_won"
	flavor = "Our recent victory in battle has improved the standing of our {kingdom.king.title} with the Army!" //!!! include reference to enemy kingdom!
	
	triggers = 40
	{
		character battle_won
		{
			condition = (!sender.is_crusader)
		}
	}
}

def LoseBattleArmyOpinionRule : OpinionChangeRule // !!! not tested
{
	opinion = "ArmyOpinion"
	amount = ((st_param.winner_kingdom.is_rebel && -3) || -1)
	reason = "battle_lost"
	flavor = "Our recent loss in battle has crippled the standing of our {kingdom.king.title} with the Army." //!!! include reference to enemy kingdom!
	
	triggers = 40
	{
		character battle_lost
		{
			condition = (!sender.is_crusader)
		}
	}
}

def MarshalKilledInBattleArmyOpinionRule : OpinionChangeRule
{
	opinion = "ArmyOpinion"
	var level = (st_sender.level)
	amount = (((level >= 13) && -5) || ((level >= 10) && -4) || ((level >= 7) && -3) || ((level >= 5) && -2) || ((level >= 3) && -1))
	reason = "marshal_killed_in_battle"
	flavor = "Our armies are mourning the death of {st_sender}."
	
	triggers
	{
		character killed_in_battle
		{
			condition = (amount < 0)
		}
	}
}

def MarshalCapturedInBattleArmyOpinionRule : OpinionChangeRule
{
	opinion = "ArmyOpinion"
	var level = (st_sender.level)
	amount = (((level >=10) && -3) || ((level >= 5) && -2) || ((level >= 3) && -1))
	reason = "marshal_captured_in_battle"
	flavor = "The imprisonment of {st_sender} has further demoralized our troops and worsened our standing with the Army!"
	
	triggers
	{
		character imprisoned_in_battle
		{
			condition = (amount < 0)
		}
	}
}


def UpgradeCompletedArmyOpinionRule : OpinionChangeRule
{
	opinion = "ArmyOpinion"
	amount = 1
	reason = "complete_army_upgrade"
	
	bool building_is_artillery = (st_param.id == "#Artillery")
	bool building_is_keeps = (st_param.id == "#LargeKeeps")
	bool building_is_gear = ((st_param.id == "#MasterArmorer") || (st_param.id == "#HeavyArmorsmith") || (st_param.id == "#MasterWeaponsmith"))
	bool building_is_stables = (st_param.id == "#WarStables")
	bool building_is_town_siege = (st_param.id == "#SiegeWorkshop")
	
	flavor = $["Our soldiers greatly appreciate our military advancements, that will save thousands of lives and make our enemies tremble!"
			   "[{building_is_artillery:if} We will blow to smithereens all who face our keeps and ships with this innovation in warfare, more destructive than anything seen before.]"
			   "[{building_is_keeps:if} Let them come and try to assault our keeps now!]"
			   "[{building_is_gear:if} Few other kingdoms have their soldiers equiped whith such a fine gear, as the one our masterful blacksmiths forge.]"
			   "[{building_is_stables:if} Our armies are ready to ride like the wind and fight proud from the backs of their mighty destriers!]"
			   "[{building_is_town_siege:if} Now if we can supply our marshals with siege equipment, no castle wall can stand in their way for long.]"
			  ]
	
	
	triggers
	{
		kingdom building_upgrade_unlocked
		{
			//condition = (param.stat_modifiers.rs_happiness > 0)
			condition = (param.id == "#Artillery" || param.id == "#LargeKeeps" || param.id == "#SiegeWorkshop" || param.id == "#WarStables" || param.id == "#MasterArmorer" || param.id == "#HeavyArmorsmith" || param.id == "#MasterWeaponsmith")
		}
	}
}

def TraditionAdoptedArmyOpinionRule : OpinionChangeRule
{
	opinion = "ArmyOpinion"
	amount = 2
	reason = "tradition_adopted_army"
	flavor = "Our military leaders appreciate the better preparation our soldiers will have with {st_param.name} accepted as one of our traditions."
	
	triggers
	{
		kingdom new_tradition
		{
			condition = (param.def.skill.def.class_gradient_key == "Marshal")
		}
	}
}

///////////////
///Merchants///
///////////////

def DeclareWarMerchantsOpinionRule : OpinionChangeRule // !!! no hash
{
	opinion = "MerchantsOpinion"
	amount = (-RndI(1, 3))
	reason = "war_declared"
	flavor = "Waging war against {st_param.tgt_kingdom} might have been an ill-advised move. Some of our merchants have rallied in protests and temporarily shut down their stores!"
	
	triggers = 50
	{
		kingdom sent_offer_accepted
		{
			condition = (param.name == "DeclareWar")
		}
	}
}

def BreakingTradeAgreementMerchantsOpinionRule : OpinionChangeRule
{
	opinion = "MerchantsOpinion"
	amount = -1
	reason = "breaking_trade_agreement"
	flavor = "Our merchants are unhappy and blame our diplomats and {king} for the broken trade agreement with {st_param}."
	
	triggers { kingdom break_trade }
}

def PillagedSettlemenMerchantsOpinionRule : OpinionChangeRule
{
	opinion = "MerchantsOpinion"
	amount = -1
	reason = "pillage_settlement"
	flavor = "Merchants are unhappy that hostile armies freely pillage our settlements and foreign traders refuse to pass through our lands. They claim they have suffered great losses and demand compensation."
	
	triggers = 5
	{
		settlement razed
		{
			condition = (param)
		}
	}
}

def RebelsOccupyProvinceMerchantsOpinionRule : OpinionChangeRule
{
	opinion = "MerchantsOpinion"
	amount = -3
	reason = "rebels_occupy_province"
	flavor = "Merchants reported that more and more traders refuse to deal with our kingdom, since rebels rule over our lands, distrupt production and threaten the honest men."
	
	triggers
	{
		realm controlling_obj_changed
		{
			condition = (sender.is_rebel_occupied)
		}
	}
}

def GetBankruptMerchantsOpinionRule : OpinionChangeRule
{
	opinion = "MerchantsOpinion"
	amount = -2
	reason = "getting_bankrupt"
	flavor = "Our financial crisis prevents us from paying for the goods some of our merchants provided and stops foreign traders to make any dealings in {st_sender}"
	
	triggers { kingdom getting_bankrupt }
}

//(TBD) We took a loan // !!! not implemented

//(TBD) We repayed a loan // !!! not implemented

def CommercialBuildingFinishedMerchantsOpinionRule : OpinionChangeRule
{
	opinion = "MerchantsOpinion"
	amount = 2
	reason = "commercial_building_finished"
	flavor = "The completion of our {st_param.name} in {st_param.realm} was greeted with standing ovation by our merchants. They are already calculating their new profits and planning how they can make use of it."
	
	triggers
	{
		kingdom build_finished
		{
			condition = (param.def.id == "#TradePort" || param.def.id == "#MerchantsGuild" || param.def.id == "#GrainMarket")
		}
	}
}

def DemolishCommercialBuildingMerchantsOpinionRule : OpinionChangeRule
{
	opinion = "MerchantsOpinion"
	
	amount = -2
	flavor = "The destruction of {st_param.name} in {st_param.realm}, made some merchants unhappy, since it was important hub for the regional trade. They complain their profits will surely decrease and demand compensation."
	
	triggers
	{
		kingdom building_destroyed
		{
			condition = (param.def.id == "#TradePort" || param.def.id == "#MerchantsGuild" || param.def.id == "#GrainMarket")
			
			// chance = (sender.king.GetStat("cs_merchant_opinion_penalty_on_destroyed_commercial_building_chance"))
			// condition = (trigger.param.commerce >= 3)
		}
	}
}


// def TradeFairCompletedMerchantsOpinionRule : OpinionChangeRule
// {
// 	opinion = "MerchantsOpinion"
// 	amount = 5
// 	reason = "trade_fair_completed"
// 	flavor = "The establishment of a {st_param.name} in {st_param.realm} was greeted with standing ovation by our merchants."

// 	triggers
// 	{ 
// 		kingdom build_finished
// 		{
// 			condition = (param.name == "TradeFair")
// 		}
// 	}
// }

def SignTradeAgreementMerchantsOpinionRule : OpinionChangeRule
{
	opinion = "MerchantsOpinion"
	amount = 1
	reason = "sign_trade"
	flavor = "The trading elite within our kingdom applauds the decision of their {st_sender.king.title} to sign a trade agreement with {st_param.tgt_kingdom}."
	triggers
	{
		kingdom sent_offer_accepted
		{
			condition = (param.name == "SignTrade")
		}
	}
}

def AcceptTradeAgreementMerchantsOpinionRule : OpinionChangeRule
{
	opinion = "MerchantsOpinion"
	amount = 1
	reason = "accept_trade"
	flavor = "The trading elite within our kingdom applauds the decision of their {st_sender.king.title} to sign a trade agreement with {st_param.src_kingdom}."
	triggers
	{
		kingdom recieved_offer_accepted
		{
			condition = (param.name == "SignTrade")
		}
	}
}

def UpgradeCompletedMerchantsOpinionRule : OpinionChangeRule
{
	opinion = "MerchantsOpinion"
	amount = 1
	reason = "complete_merchants_upgrade"
	flavor = "Our merchants highly appreciate the substantial improvements of our commercial capabilities! We can expect more gold from their activities from now on."
	
	triggers
	{
		kingdom building_upgrade_unlocked
		{
			//condition = (param.stat_modifiers.rs_happiness > 0)
			condition = (param.id == "#TradeFair" || param.id == "#Caravanserai" || param.id == "#TradeCompanies" || param.id == "#TradeColonies")
		}
	}
}

// As of 2022-02-09, this is a case of TradeSuccessMerchantsOpinionRule
// def TradeLevelIncreaseMerchantsOpinionRule : OpinionChangeRule
// {
// 	opinion = "MerchantsOpinion"
// 	amount = 1
// 	reason = "trade_success"

// 	flavor = "Our merchants as always appreciated the broadened opportunities for trade with {st_sender.mission_kingdom} and already started planning new deals and shipments of goods."

// 	triggers
// 	{
// 		character trade_level_changed
// 		{
// 			condition = (sender.trade_level > 1)
// 		}
// 	}
// }

def TradeExpeditionColonySuccessMerchantsOpinionRule : OpinionChangeRule
{
	opinion = "MerchantsOpinion"
	amount = 1
	reason = "trade_success"
	
	flavor = "Our merchants were thrilled by the news that {st_sender:s} expedition resulted in the foundation of a colony! They are already planning how we can further expand our trading network."
	
	
	triggers
	{
		character trade_expedition_suceeded_colony
		//character trade_expedition_suceeded_gold
	}
}



def TradeSuccessMerchantsOpinionRule : OpinionChangeRule
{
	opinion = "MerchantsOpinion"
	amount = 1
	reason = "trade_success"
	
	case merchant_is_in_kingdom = (st_sender.mission_kingdom != null)
	{
		flavor = "Our merchants as always appreciated the broadened opportunities for trade with {st_sender.mission_kingdom} and already started planning new deals and shipments of goods."
	}
	case merchant_founded_colony = (st_sender.mission_kingdom = null)
	{
		flavor = "Our merchants were thrilled by the news that {st_sender:s} expedition resulted in the foundation of a colony! They are already planning how we can further expand our trading network."
	}
	
	triggers
	{
		character trade_level_changed
		{
			condition = (sender.trade_level > 1)
		}
		character trade_expedition_suceeded
	}
}

def TraditionAdoptedMerchantsOpinionRule : OpinionChangeRule
{
	opinion = "MerchantsOpinion"
	amount = 2
	reason = "tradition_adopted_merchants"
	flavor = "Establishing {st_param.name} as one of our traditions is really appreciated by our merchants. More and more do they see {kingdom} as a kingdom where trading prospers."
	
	triggers
	{
		kingdom new_tradition
		{
			condition = (param.def.skill.def.class_gradient_key == "Merchant")
		}
	}
}

def SuccessfulTradeEndedMerchantsOpinionRule : OpinionChangeRule
{
	opinion = "MerchantsOpinion"
	amount = (-1 * st_param.trade_level)
	reason = "successful_trade_ended"
	flavor = "Our merchants are greatly disappointed the trade opportunities we had in {st_param.mission_kingdom} are now over. They blame {kingdom.king} for letting this happen."
	
	triggers
	{
		kingdom trade_stopped
		{
			condition = (!param.mission_kingdom.is_defeated)
		}
	}
}


////////////////////
///  Peasantry  ////
////////////////////

// def RaisingTaxesPeasantryOpinionRule : OpinionChangeRule
// {
// 	opinion = "PeasantryOpinion"
// 	amount = -3
// 	reason = "taxes_increased"
// 	flavor = "Increasing taxes has angered our population! While most of our tax collectors are returning with bags full of gold, many have also been spotted with broken noses and missing teeth."

// 	triggers
// 	{
// 		kingdom tax_rate_changed
// 		{
// 			condition = (param) //param == true -> increased
// 		}
// 	}
// }

// def LoweringTaxesPeasantryOpinionRule : OpinionChangeRule
// {
// 	opinion = "PeasantryOpinion"
// 	amount = 1
// 	reason = "taxes_decreased"
// 	flavor = "Decreasing taxes has brought some ease to our population. They now praise {king}!"

// 	triggers
// 	{
// 		kingdom tax_rate_changed
// 		{
// 			condition = (!param) //param == false -> decreased
// 		}
// 	}
// }

def PillagedSettlemenPeasantryOpinionRule : OpinionChangeRule
{
	opinion = "PeasantryOpinion"
	amount = -1
	reason = "pillage_settlement"
	flavor = "We should tend to our settlements more - people are living in fear due to recent pillages. They demand protection!"
	
	triggers = 5
	{
		settlement razed
		{
			condition = (param)
		}
	}
}

// def CompleteHappinessBuildingPeasantryOpinionRule : OpinionChangeRule
// {
// 	opinion = "PeasantryOpinion"
// 	amount = 1
// 	reason = "complete_happiness_building"
// 	flavor = "People appreciate that there are new structures in {kingdom}, that improve their everyday lives."

// 	triggers
// 	{ 
// 		kingdom build_finished
// 		{
// 			condition = (param.happiness > 0.0)
// 		}
// 		kingdom building_upgrade_unlocked
// 		{
// 			condition = (param.stat_modifiers.rs_happiness > 0)
// 		}
// 	}
// }

def UpgradeCompletedPeasantryOpinionRule : OpinionChangeRule
{
	opinion = "PeasantryOpinion"
	amount = 1
	reason = "complete_peasantry_upgrade"
	
	bool building_is_brothel = (st_param.id == "#Brothels")
	bool building_is_aqueduct = (st_param.id == "#Aqueduct")
	bool building_is_healthcare = ((st_param.id == "#Apothecary") || (st_param.id == "#Hospital"))
	bool building_is_school = (st_param.id == "#Schools")
	bool building_is_town_charter = (st_param.id == "#TownsCharter")
	
	flavor = $["People appreciate that there are great new establishments in {kingdom} that make their lives better."
			   "[{building_is_brothel:if} There are some rumours that the noblemen also enjoy our new {st_param.name}, but none of them has personally expressed his grattitude yet.]"
			   "[{building_is_aqueduct:if} The {st_param.name}, supplying clean water near their homes, will definitely improve their well-being and hygiene.]"
			   "[{building_is_healthcare:if} They are really thankful to {kingdom.king} for spending the resources for {st_param.name}, greatly improving our healthcare.]"
			   "[{building_is_school:if} Hopefully with our new {st_param.name} they will act at least a bit more productive.]"
			   "[{building_is_town_charter:if} With more {st_param.name} issued, their self esteem and loyalty to {kingdom.king} has risen to the sky.]"
			  ]
	
	triggers
	{
		kingdom building_upgrade_unlocked
		{
			//condition = (param.stat_modifiers.rs_happiness > 0)
			condition = (param.id == "#Brothels" || param.id == "#Aqueduct" || param.id == "#Schools" || param.id == "#Apothecary" || param.id == "#Hospital" || param.id == "#TownsCharter")
		}
	}
}

// def DestroyHappinessBuildingPeasantryOpinionRule : OpinionChangeRule
// {
// 	opinion = "PeasantryOpinion"
// 	amount = -2
// 	reason = "destroy_happiness_building"
// 	flavor = "People are unhappy that we are destroying structures, that used to make their lives a little happier. They urge {king} to make {kingdom} great again."

// 	triggers
// 	{ 
// 		kingdom building_destroyed
// 		{
// 			condition = (param.happiness > 0.0)
// 		}
// 	}
// }


def DeclareWarPeasantryOpinionRule : OpinionChangeRule // !!! no hash
{
	opinion = "PeasantryOpinion"
	amount = (-RndI(1, 3))
	reason = "war_declared"
	flavor = "Our war declaration against {st_param.tgt_kingdom} has stricken fear into the hearts of our people. Cruel war is what they fear most."
	
	triggers = 50
	{
		kingdom sent_offer_accepted
		{
			condition = (param.name == "DeclareWar")
		}
	}
}

def SackedTownPeasantryOpinionRule : OpinionChangeRule
{
	opinion = "PeasantryOpinion"
	amount = -5
	reason = "structures_sacked"
	flavor = "The recent sacking of {st_sender.realm} has left our population helpless, thinking their {kingdom.king.title} has abandoned them. Our towns need better protection and defense!"
	
	triggers { castle structures_sacked }
}

def HoldAFeastPeasantryOpinionRule : OpinionChangeRule
{
	opinion = "PeasantryOpinion"
	amount = 3
	reason = "hold_feast_peasantry"
	flavor = "Besides the glorious feast to which {kingdom.king} invited all prominent nobles, free food and some coin were given to the poor and ordinary people throughout the kingdom, which they greatly appreciated."
	
	triggers
	{
		kingdom hold_feast
	}
}

// def PlaceOfWorshipDestroyedPeasantryOpinionRule : OpinionChangeRule
// {
// 	opinion = "PeasantryOpinion"
// 	amount = -3
// 	reason = "place_of_worship_destroyed"
// 	flavor = "The commoners complain that we destroyed {st_param.name} in {st_param.realm}! They are mad with this blasphemy and disrespect to their beliefs."

// 	triggers
// 	{ 
// 		kingdom building_destroyed
// 		{
// 			var christian = (sender.is_christian && (param.name == "Church" || param.name == "Cathedral"))
// 			var muslim = (sender.is_muslim && (param.name == "Masjid" || param.name == "GreatMosque"))
// 			var pagan = (sender.is_pagan && param.name == "Temple")
// 			condition = (christian || muslim || pagan)
// 		}
// 	}
// }


def PassiveIncreaseOpinionRule : OpinionChangeRule
{
	opinion = (st_param.opinion_id)
	amount = (st_param.opinion_amount)
	reason = "passive_increase"
	
	triggers { kingdom dummy_trigger }
}

def PassiveIncreaseDiplomatNobilityOpinionRule : PassiveIncreaseOpinionRule // !!! not tested
{
	flavor = "{st_param.diplomat} managed to convince some of our most prominent noblemen, that our {king.title} is following the necessary policies for the triumph of {kingdom}."
	
	triggers
	{
		kingdom passive_increase_opinion_diplomat
		{
			condition = (param.opinion_id = "NobilityOpinion")
		}
	}
}

def PassiveIncreaseDiplomatArmyOpinionRule : PassiveIncreaseOpinionRule // !!! not tested
{
	flavor = "{st_param.diplomat} managed to convince some of our military leaders, that {king} is taking the proper steps for the defense of {kingdom} and better conditions for the army."
	
	triggers
	{
		kingdom passive_increase_opinion_diplomat
		{
			condition = (param.opinion_id = "ArmyOpinion")
		}
	}
}

def PassiveIncreaseDiplomatMerchantsOpinionRule : PassiveIncreaseOpinionRule // !!! not tested
{
	flavor = "{st_param.diplomat} managed to convince some of the richest merchants in {kingdom}, that we are on the path of economical growth."
	
	triggers
	{
		kingdom passive_increase_opinion_diplomat
		{
			condition = (param.opinion_id = "MerchantsOpinion")
		}
	}
}

def PassiveIncreaseDiplomatClergyOpinionRule : PassiveIncreaseOpinionRule // !!! not tested
{
	flavor = "{st_param.diplomat} managed to convince some of our religious leaders, that {king:s} deeds are godly and necessary."
	
	triggers
	{
		kingdom passive_increase_opinion_diplomat
		{
			condition = (param.opinion_id = "ClergyOpinion")
		}
	}
}

def PassiveIncreaseDiplomatPeasantryOpinionRule : PassiveIncreaseOpinionRule // !!! not tested
{
	flavor = "{st_param.diplomat} managed to convince many of the common people, that {king} cares for each man and is doing all we can to ensure peace and prosperity."
	
	triggers
	{
		kingdom passive_increase_opinion_diplomat
		{
			condition = (param.opinion_id = "PeasantryOpinion")
		}
	}
}


def PassiveIncreaseNobilityOpinionRule : PassiveIncreaseOpinionRule // !!! not tested
{
	flavor = "The nobility seems to like the latest decisions, that {king} made and is a bit less worried for the way the kingdom is ruled. They are yet not very optimistic, though."
	
	triggers
	{
		kingdom passive_increase_opinion
		{
			condition = (param.opinion_id = "NobilityOpinion")
		}
	}
}

def PassiveIncreaseArmyOpinionRule : PassiveIncreaseOpinionRule // !!! not tested
{
	flavor = "Out military leaders managed to calm their soldiers a bit and now they are less frustrated with {king:s} actions, though there is still some tension in the army."
	
	triggers
	{
		kingdom passive_increase_opinion
		{
			condition = (param.opinion_id = "ArmyOpinion")
		}
	}
}

def PassiveIncreaseMerchantsOpinionRule : PassiveIncreaseOpinionRule // !!! not tested
{
	flavor = "After a gathering of our richest merchants, they decided the rulership of {king} is not so unbearable, but there is still a long way to go to earn back their trust."
	
	triggers
	{
		kingdom passive_increase_opinion
		{
			condition = (param.opinion_id = "MerchantsOpinion")
		}
	}
}

def PassiveIncreaseClergyOpinionRule : PassiveIncreaseOpinionRule // !!! not tested
{
	flavor = "Our religious leaders decided, that they can forgive some of the ungodly deeds of the crown, but  they are still unsatisfied by the ignorance towards them."
	
	triggers
	{
		kingdom passive_increase_opinion
		{
			condition = (param.opinion_id = "ClergyOpinion")
		}
	}
}

def PassiveIncreasePeasantryOpinionRule : PassiveIncreaseOpinionRule // !!! not tested
{
	flavor = "The uproar of the crowds, caused by the negligence of {king} towards them, has died off a bit, but they are still unhappy with the way {kingdom} is ruled."
	
	triggers
	{
		kingdom passive_increase_opinion
		{
			condition = (param.opinion_id = "PeasantryOpinion")
		}
	}
}


def ReleaseNonCourtRebelPeasantryOpinionRule : OpinionChangeRule
{
	opinion = "PeasantryOpinion"
	amount = (round(map(st_param.class_level, 0, 15, 1, 3)))
	flavor = "The release of {st_param} has shown your people that you care for them, even when things get 'slightly' out of hand."
	
	triggers
	{
		kingdom free_non_court_rebel_prisoner_trigger
	}
}


def ReleaseNonCourtRebelClergyOpinionRule : OpinionChangeRule
{
	opinion = "ClergyOpinion"
	amount = 1
	flavor = "Showing mercy on {st_param} has received vast approval from our {kingdom.cleric_title:s}!"
	
	triggers = 50
	{
		kingdom free_non_court_rebel_prisoner_trigger
	}
}

def ReleaseNonCourtRebelNobilityOpinionRule : OpinionChangeRule
{
	opinion = "NobilityOpinion"
	amount = (round(-1 * map(st_param.class_level, 0, 15, 1, 3)))
	flavor = "Our nobility wasn't so happy about the release of {st_param}... Perhaps we should've used the rebel's services somewhere else instead."
	
	triggers = 50
	{
		kingdom free_non_court_rebel_prisoner_trigger
	}
}

def ForgiveCourtRebelNobilityOpinionRule : OpinionChangeRule
{
	opinion = "NobilityOpinion"
	amount = (round(map(st_param.class_level, 0, 15, 1, 3)))
	flavor = "The nobles in our kingdom deem the release of {st_param} a good move! Let's hope our newly returned knight is also content and doesn't rebel against us once more..."
	
	triggers
	{
		kingdom free_court_rebel_prisoner_trigger
	}
}

def ReleaseKnightNobilityOpinionRule : OpinionChangeRule
{
	opinion = "NobilityOpinion"
	amount = 1
	flavor = "Some might think the release of {st_param} was an ill-advised move, but our nobles applaud {kingdom.king:s} decision."
	
	triggers
	{
		kingdom free_prisoner_kingdom_trigger
		{
			condition = (!param.is_rebel && !sender.IsEnemy(param)) //!param.is_mercenary
		}
	}
}

def ReleasePatriarchClergyOpinionRule : OpinionChangeRule
{
	opinion = "ClergyOpinion"
	amount = 2
	flavor = "In the eyes of our {kingdom.cleric_title:s}, releasing {st_param} was the right move."
	
	triggers
	{
		kingdom free_prisoner_kingdom_trigger
		{
			condition = (param.is_patriarch && !param.is_ecumenical_patriarch)
		}
	}
}

def ReleaseEcumenicalPatriarchClergyOpinionRule : OpinionChangeRule
{
	opinion = "ClergyOpinion"
	amount = 5
	flavor = "Freeing a famed prisoner such as {st_param} has gained the unanimous approval of our {kingdom.cleric_title:s}!"
	
	triggers
	{
		kingdom free_prisoner_kingdom_trigger
		{
			condition = (param.is_ecumenical_patriarch)
		}
	}
}


def ExecuteNonCourtRebelPeasantryOpinionRule : OpinionChangeRule
{
	opinion = "PeasantryOpinion"
	amount = (round(-1 * map(st_param.class_level, 0, 15, 1, 3)))
	flavor = "Executing {st_param} has put fear into the hearts of our people! Perhaps a softer approach would be better next time..."
	
	triggers
	{
		kingdom execute_non_court_rebel_prisoner_trigger
	}
}


def ExecuteNonCourtRebelClergyOpinionRule : OpinionChangeRule
{
	opinion = "ClergyOpinion"
	amount = -1
	flavor = "Our {kingdom.cleric_title:s} are unhappy that you executed {st_param}, even if he was a filthy rebel."
	
	triggers = 50
	{
		kingdom execute_non_court_rebel_prisoner_trigger
	}
}

def ExecuteNonCourtRebelNobilityOpinionRule : OpinionChangeRule
{
	opinion = "NobilityOpinion"
	amount = (round(1 * map(st_param.class_level, 0, 15, 1, 3)))
	flavor = "Our nobility deemed the execution of {st_param} to be the right move, as masses gathered to witness the execution of the backstabbing rebel."
	
	triggers = 50
	{
		kingdom execute_non_court_rebel_prisoner_trigger
	}
}

def ExecuteCourtRebelNobilityOpinionRule : OpinionChangeRule
{
	opinion = "NobilityOpinion"
	amount = (round(-1 * map(st_param.class_level, 0, 15, 1, 3)))
	flavor = "Executing {st_param}, once a proud member of {kingdom:s} royal court, shook our noblemen. Now, they wonder if fate would have the same in store for them."
	
	triggers
	{
		kingdom execute_court_rebel_prisoner_trigger
	}
}

def ExecuteExileOpinionRule : OpinionChangeRule
{
	opinion = "NobilityOpinion"
	amount = -2
	flavor = "Some of our nobles are furious about the execution of {st_param}, who was once a royal knight in another kingdom. Perhaps they see themselves in him..."
	
	triggers
	{
		kingdom execute_exile_prisoner_trigger
		{
			condition = (param.is_exile)
		}
	}
}

def ExecuteMercenaryRule : OpinionChangeRule
{
	opinion = "NobilityOpinion"
	amount = -2
	flavor = "Our noblemen deem the execution of {st_param} unnecessary. Perhaps accepting the former mercenary into our court would have been a better decision."
	
	triggers
	{
		kingdom execute_mercenary_prisoner_trigger
		{
			condition = (param.is_mercenary)
		}
	}
}

def ExecutedKnightNobilityOpinionRule : OpinionChangeRule
{
	opinion = "NobilityOpinion"
	amount = (round(-1 * map(st_param.class_level, 0, 15, 1, 3)))
	flavor = "As news about the execution of our {st_param} has reached us, word has spread quickly amongst our nobles. They blame their {kingdom.king.title} for letting this happen!"
	
	triggers
	{
		kingdom execute_prisoner_their_kingdom_trigger
		{
			condition = (!param.is_rebel && !param.is_mercenary && !sender.IsEnemy(param))
		}
	}
}

def ExecutedPatriarchClergyOpinionRule : OpinionChangeRule
{
	opinion = "ClergyOpinion"
	amount = -3
	flavor = "Executing {st_param} has shaken our {kingdom.cleric_title:s}, who deem the decision of their {kingdom.king.title} to be irresponsible and sacreligious."
	
	triggers
	{
		kingdom execute_prisoner_our_kingdom_trigger
		{
			condition = (param.is_patriarch && !param.is_ecumenical_patriarch && sender.is_orthodox)
		}
	}
}

def ExecutedEcumenicalPatriarchClergyOpinionRule : OpinionChangeRule
{
	opinion = "ClergyOpinion"
	amount = -5
	flavor = "Our {kingdom.cleric_title:s} mourn the death of {st_param} and cannot fathom the decision of their {kingdom.king.title} to order the execution! The Orthodox church has suffered a devastating blow."
	
	triggers
	{
		kingdom execute_prisoner_our_kingdom_trigger
		{
			condition = (param.is_ecumenical_patriarch  && sender.is_orthodox)
		}
	}
}

def ChangeHeirNobilityOpinionRule : OpinionChangeRule
{
	opinion = "NobilityOpinion"
	amount = -1
	flavor = "Our nobility is unhappy that {st_param} will not be trusted to inherit the crown, once {plr_kingdom.king} passes away, although that was promised to him. They express doubt that {kingdom.heir} will be the better bearer of the crown."
	
	triggers
	{
		kingdom heir_changed
	}
}