def HyperText
{
	icon_size = 32,32 // default icon size
	
	separator_color = "grey"
	separator_height = 1 // 1-pixel high lines are sometimes not visible due to scaling
	
	circle_mask = "Assets/UI/Elements/Common/WindowElements/Element_Generic_CirlceMask_Solid.psd:Element_Generic_CirlceMask_Solid#1" //GUID:f4aea1f08aed8e44d872b8a063720aaf
	circle_frame = "Assets/UI/Elements/Common/WindowElements/Element_Generic_CircleBorder_Tintable_InnerGlow_Tick.psd:Element_Generic_CircleBorder_Tintable_InnerGlow_Tick#2" //GUID:c7f8e553accb43442964ac82541f39b5
	gold_circle_frame = "Assets/UI/Elements/Common/WindowElements/Element_Generic_CircleBorder_Gold.psd:Element_Generic_CircleBorder_Gold#2" //GUID:d08a22199a77c1f4599861f12448be2a
	silver_circle_frame = "Assets/UI/Elements/Common/WindowElements/Element_Generic_CircleBorder_Silver.psd:Element_Generic_CircleBorder_Silver#2" //GUID:a1494921da230e44daf2c8045a4e093d
	bronze_circle_frame = "Assets/UI/Elements/Common/WindowElements/Element_Generic_CircleBorder_Bronze.psd:Element_Generic_CircleBorder_Bronze#1" //GUID:50bd4737caf037a4ab4eb812de88a106
	
	circle_icon
	{
		color frame_color = "186,163,59"
		mask : circle_mask
		frame : circle_frame
		{
			color color = (frame_color)
		}
	}
	
	rounded_mask = "Assets/UI/Elements/Common/WindowElements/UI_Square_RoundedConrners_Solid.png:UI_Square_RoundedConrners_Solid#1" //GUID:fda72d8fe53880741af550bbe0dda9a1
	rounded_frame = "Assets/UI/Elements/Common/WindowElements/UI_Square_RoundedConrners_Border_Tin.png:UI_Square_RoundedConrners_Border_Tin#2" //GUID:0454081c98da66247a7bd30a59107152
	rounded_icon
	{
		color frame_color = "186,163,59"
		mask : rounded_mask
		frame : rounded_frame
		{
			color color = (frame_color)
		}
	}
	
	
	square_frame = "Assets/UI/Elements/Wiki/Element_Wiki_square_Border.psd:Element_Wiki_square_Border#2" //GUID:97244f5a1ca2d584eb6ca34049abbbe4
	square_icon
	{
		color frame_color = "186,163,59"
		frame : square_frame
		{
			color color = (frame_color)
		}
	}
	
	rect_frame = "Assets/UI/Elements/Wiki/Element_Wiki_square_Border74x47.psd:Element_Wiki_square_Border74x47#1" //GUID:46146a7a56ea50f4297704717712e526
	rect_icon
	{
		color frame_color = "grey"
		frame : rect_frame
		{
			color color = (frame_color)
		}
	}
	
	no_padding
	{
		left = 0
		right = 0
		top = 0
		bottom = 0
	}
}

template TooltipHyperText : HyperText
{
	text_styles
	{
		prefab default = "Assets/UI/Elements/Common/HyperText/UIP_HyperTextTooltipText.prefab" //GUID:0da7988a44befa4409cc703e6e112e61
		
		prefab caption = "Assets/UI/Elements/Common/HyperText/UIP_HyperTextCaption.prefab" //GUID:ca114668c0d23234697972151d4bcf8b
		prefab subcaption = "Assets/UI/Elements/Common/HyperText/UIP_HyperTextSubCaption.prefab" //GUID:dcfce72ed50418a429ed0b2e75d50f09
		
		prefab header : default
		{
			alignment = "left"
			color color = "210,177,90"
			//font_size = 14
		}
		
		prefab flavor_text : default
		{
			font_size = 16
			color color = "121,117,111" //79756FFF
		}
		
		prefab income_breakdown_text : default
		{
			font_size = 16
			color color = "C3B798"
		}
		
		prefab tradition_flavor_text = "Assets/UI/Elements/Common/HyperText/UIP_HyperTextTraditionFlavor.prefab" //GUID:501b8387660432849a0fbcad23ea0c8c
		{
			font_size = 16
			alignment = "left"
			color color = "200,198,187"
		}
	}
	
	padding
	{
		left = 15
		right = 15
		top = 16
		bottom = 12
	}
	
	row_padding
	{
		left = 15
		right = 15
	}
	
	spacing
	{
		horizontal = 8 // default spacing between elements in a row
		vertical = 8 // spacing between rows
	}
	
	color separator_color = "103,90,62, 128" //675A3EFF
}

template MessageHyperText : HyperText
{
	text_styles
	{
		prefab default = "Assets/UI/Elements/Common/HyperText/UIP_HyperTextMessageText.prefab" //GUID:0d1e20dd40394bd4a92459acb39f283f
		
		prefab caption = "Assets/UI/Elements/Common/HyperText/UIP_HyperTextCaption.prefab" //GUID:ca114668c0d23234697972151d4bcf8b
		prefab subcaption = "Assets/UI/Elements/Common/HyperText/UIP_HyperTextSubCaption.prefab" //GUID:dcfce72ed50418a429ed0b2e75d50f09
		
		prefab flavor_text : default
		{
			font_size = 16
			color color = "121,117,111" //79756FFF
		}
		
		prefab tradition_flavor_text = "Assets/UI/Elements/Common/HyperText/UIP_HyperTextTraditionFlavor.prefab" //GUID:501b8387660432849a0fbcad23ea0c8c
		{
			font_size = 16
			alignment = "left"
			color color = "200,198,187"
		}
	}
}

template WikiHypertext : HyperText
{
	cs_class = "Wiki"
	
	text_styles
	{
		prefab default = "Assets/UI/Elements/Common/HyperText/UIP_HyperTextWikiText.prefab" //GUID:fdcda820f5146244682f88636394850a
		
		caption : default = "Assets/UI/Elements/Common/HyperText/UIP_HyperTextWikiTextCaption.prefab" //GUID:742cb73080d0b2944bda14fefcb591cd
		
		subcaption : default = "Assets/UI/Elements/Common/HyperText/UIP_HyperTextWikiTextSubCaption.prefab" //GUID:9bb0d2593e674804f968c13bc29b5c96
		
		flavor_text : default = "Assets/UI/Elements/Common/HyperText/UIP_HyperTextWikiTextFlavorText.prefab" //GUID:1cb06bdd736a6d143924a0091cdb34f5
		{
			color color = "184,163,128" //B8A380FF
		}
		
		tradition_flavor_text : default = "Assets/UI/Elements/Common/HyperText/UIP_HyperTextWikiTextFlavorText.prefab" //GUID:1cb06bdd736a6d143924a0091cdb34f5
		{
			alignment = "left"
			color color = "200,198,187"
		}
	}
	
	spacing
	{
		horizontal = 20 // default spacing between elements in a row
		vertical = 5 // spacing between rows
	}
	
	color separator_color = "103,90,62, 128" //675A3EFF	 
}


template WikiTOCRow
{
	possess_first_link = true
	selected = (match_article || match_context)
	{
		match_article = (instance.article and instance.article == ui.wiki_wnd.article)
		match_context = (instance.def_id and instance.def_id == ui.wiki_wnd.context)
	}
	
	background = (selected and selection_color)
	{
		// if image
		// sprite image = (selected and selection_image)
		// sprite selection_image = "Assets/UI/Elements/Wiki/Element_Wiki_Background_Selected.psd:Element_Wiki_Background_Selected#2" //GUID:21eb31a8a9c51b545bdee9ebe8dfb585
		// if color
		color selection_color = "51, 51, 51, 255"
	}
}

template WikiIconTOCRow : WikiTOCRow
{
	padding
	{
		top = 5
		left = 5
		right = 5
		bottom = 5
	}
	spacing = 10
	alignment = "center"
}

def ActionTooltipHT : TooltipHyperText
{
	preview
	{
		action = ShunForeignMerchantAction
	}
	
	//separator top_separator
	
	row header
	{
		alignment = "center"
		
		sprite icon : rounded_icon = (action.icon)
		{
			size = 50,50
			//frame { color = "186,163,59" }
			optional = true
		}
		hypertext name_descr
		{
			text_field name
			{
				text text = "{action.name}"
				style = "caption"
			}
		}
		// space space // compensate for the icon ion the left so texts center properly
		// {
		// 	size = icon.size
		// 	validate = (!row.icon.empty)
		// }
	}
	
	separator header_separator
	
	text_field descr
	{
		text text = "[{action.tooltip}]"
		style = "flavor_text"
		width = 400
	}
	
	text requirements_text = "[{requirements_text}]"
	
	text_field success_factors_text
	{
		text text = "[{section_header}{SuccessChance:nolink}:{/section_header} {success_chance_clr}{success_chance_text:%}{/clr}[{p}{sf_factors_text}]]"
		width = 400
		tooltip = SuccessChanceTooltip
	}
	
	text_field reveal_chance_text
	{
		text text = "[{section_header}{RevealChance:nolink}:{/section_header} {fail_reveal_chance_clr}{fail_reveal_chance:%}{/clr}[ ({success_reveal_chance_clr}{success_reveal_chance:%}{/clr} on success)][{p}{reveal_factors_text}]]"
		width = 400
		tooltip = RevealChanceTooltip
	}
	
	text_field execute_text
	{
		text text = "{i}[{alt:if}{validate_key:#}|{validate_prompt_text}]{/i}"
		width = 400
	}
	
	separator footer_separator
	{
		validate = (cost || upkeep || false)
	}
	
	row footer
	{
		padding
		{
			bottom = 4
		}
		
		spacing = 0
		
		text_font_size = 15
		
		text_field cost_text
		{
			text text = "[Cost: {cost}][{alt:if} {prepare_duration} sec]"
		}
		
		// dont show intricue as per lates GD
		// hypertext intrigue_icon_ht
		// {
		// 	validate = (!alt && !!intrigue)
		// 	padding { top = 2 }
		// 	sprite intrigue_icon = "Assets/UI/Elements/Common/Icons/UI_Icon_Intrigue.png:UI_Icon_Intrigue#1" //GUID:e341da28d6256ec408f8c1299d659e7b
		// 	{
		// 		size = 15,15
		// 	}
		// }
		
		space space { flexible_width = 10000 }
		
		text_field upkeep_text
		{
			text text = "[Upkeep: {upkeep:upkeep}]"
			alignment = "right"
		}
	}
	
	//separator bottom_separator
}

def UnitTooltipHT : TooltipHyperText
{
	cs_class = "UIUnitSlot"
	setup = "SetupHTTooltip"
	
	preview
	{
		unit = Militia
		resources cost = "100g 1 workers 100 levy"
		resources upkeep = "1f"
	}
	
	row header
	{
		hypertext icon_ht
		{
			padding { top = 8 }
			flexible_width = 0
			sprite icon : circle_icon = (unit.icon)
			{
				size = 50,50
				frame { color = "103,90,62" }
				optional = true
			}
			// sprite icon = (unit.icon_tall)
			// {
			// 	size = 56,88
			// 	frame { color = "103,90,62" }
			// 	optional = true
			// }
		}
		hypertext name_descr
		{
			text_field name
			{
				text text = "{unit.name}"
				style = "caption"
				//alignment = "left"
			}
			text_field descr
			{
				text text = "{unit.militaryUnitType}"
				style = "flavor_text"
				width = 315
			}
		}
		// space space // compensate for the icon ion the left so texts center properly
		// {
		// 	size = icon.size
		// 	validate = (!row.icon.empty)
		// }
	}
	
	separator header_separator
	
	text_field descr
	{
		text text = "[{unit.description}]"
		style = "flavor_text"
		width = 430
	}
	
	text_field debug_info
	{
		validate = (alt || false)
		text text = $[
			"Unit: [{unit:#}|null]{p}"
			"Army: [{army:#}|null]{p}"
			"Castle: [{castle:#}|null]{p}"
			"Slot: [{slot:#}|null]{p}"
		]
	}
	
	//text atttributes = "{Unit.atttributes_text}{p}"
	hypertext atttributes
	{
		text_width = 400
		icon_size = 16,16
		spacing { horizontal = 4 }

		rows atttributes = Unit.attributes
		{		
			row_validate = (instance.validate or false)		
			sprite icon = (instance.icon)
			text text = "{instance.label}"
			tooltip = UnitAttributeTooltip
		}
	}
	
	text requires = "[{show_requirements:if}Requires: {requirements}{p}]"
	
	text state = "{Unit.state_text}"
	
	hypertext prompts
	{
		text_width = 400
		
		// selection
		text_field click_to_select
		{
			validate = (is_single_selectable || false)
			text text = "{i}Click to select this squad.{/i}"
		}
		text_field click_to_deselect
		{
			validate = (is_single_deselectable || false)
			text text = "{i}Click to de-select this squad.{/i}"
		}
		text_field click_to_multi_select
		{
			validate = (is_multi_selectable || false)
			text text = "{i}Shift + Click to add this squad to selection.{/i}"
		}
		text_field click_to_multi_deselect
		{
			validate = (is_multi_deselectable || false)
			text text = "{i}Shift + Click to remove this squad from selection.{/i}"
		}
		
		// drag and drop
		text_field drag_to_garrison
		{
			validate = (is_dragable_to_garrison || false)
			text text = "{i}Drag to garrison to move / swap squads.{/i}"
		}
		text_field drag_to_army
		{
			validate = (is_dragable_to_army || false)
			text text = "{i}Drag to [{other_army.leader:s} army|the army] to move / swap squads.{/i}"
		}
		text_field drag_to_merge_or_swap_army_unit
		{
			validate = (is_swapable_in_army || false)
			text text = "{i}Drag to another squad in the [{other_army:if}same ]army to [{is_mergeable_in_army:if}merge / ]swap squads.{/i}"
		}
		text_field drag_to_merge_garrison_unit
		{
			validate = (is_mergeable_in_garrison || false)
			text text = "{i}Drag to another garrison squad to merge squads.{/i}"
		}
		
		// move (transfer)
		text_field click_to_transfer_single
		{
			validate = (is_single_transferable || false)
			text text = "{i}Ctrl + Click to transfer this squad to {Unit.transfer_target}.{/i}"
		}
		text_field click_to_transfer_multi_selected
		{
			validate = (is_multi_transferable_selected || false)
			text text = "{i}Ctrl + Click to transfer selected squads to {Unit.transfer_target}.{/i}"
		}
		text_field click_to_transfer_multi_not_selected
		{
			validate = (is_multi_transferable_not_selected || false)
			text text = "{i}Ctrl + Click to transfer this squad and the selected squads to {Unit.transfer_target}.{/i}"
		}
		
		// swap
		text_field click_to_swap_single
		{
			validate = (is_single_swapable || false)
			text text = "{i}Ctrl + Click to swap this squad with the selected squads.{/i}"
		}
		text_field click_to_swap_multi_selected
		{
			validate = (is_multi_swapable_selected || false)
			text text = "{i}Ctrl + Click to swap selected squads.{/i}"
		}
		text_field click_to_swap_multi_not_selected
		{
			validate = (is_multi_swapable_not_selected || false)
			text text = "{i}Ctrl + Click to select this squad and then swap the selected squads.{/i}"
		}
		
		// hire
		text_field click_to_hire_merc
		{
			validate = (army.mercenary.buyer || false)
			text text = "[{buyer.has_free_slots:if}{i}Click to hire squad.{/i}|{clr:red}{i}This squad cannot be hired while all squad slots in the army are filled.{/i}{/clr}]"
		}
		text_field bring_army_to_hire_merc
		{
			validate = (is_merc && !army.mercenary.buyer || false)
			text text = "{i}Bring an army to hire squads.{/i}"
		}
		text_field click_to_hire_garrison
		{
			validate = (!unit_instance && castle && !castle.realm.is_disorder && !is_bayer_a_army || false)
			text text = "[{has_free_garrison_slots:if}{i}Click to hire garrison squad.{/i}|{clr:red}{i}This squad cannot be hired while all garrison slots in the town are filled.{/i}{/clr}]"
		}
		text_field cannnot_hire_garrison_disorder
		{
			validate = (!unit_instance && castle && castle.realm.is_disorder && !is_bayer_a_army || false)
			text text = "{clr:red}{i}Soldiers cannot be recruited in provinces in disorder.{/i}{/clr}"
		}
		text_field click_to_hire_army
		{
			validate = (!unit_instance && castle && !castle.realm.is_disorder && is_bayer_a_army && castle_army || false)
			text text = "[{has_free_army_slots:if}{i}Click to hire squad.{/i}|{clr:red}{i}This squad cannot be hired while all squad slots in the army are filled.{/i}{/clr}]"
		}
		text_field cannnot_hire_army_disorder
		{
			validate = (!unit_instance && castle && castle.realm.is_disorder && is_bayer_a_army && castle_army || false)
			text text = "{clr:red}{i}Soldiers cannot be recruited in provinces in disorder.{/i}{/clr}"
		}
		text_field cannot_hire_occupied
		{
			validate = ((!castle.is_in_battle && castle.realm.is_occupied) || false)
			text text = "{clr:red}{i}Cannot recruit squads while the town is occupied.{/i}{/clr}"
		}
	}
	
	separator footer_separator
	{
		validate = (show_cost && cost || show_upkeep && upkeep || false)
	}
	
	space bottom_space
	{
		optional = footer_separator.validate
	}
	
	row footer
	{
		//validate = (cost || upkeep || false)
		text_field cost_text
		{
			text text = "[{show_cost:if}Cost: {cost}]"
			font_size = 15
			padding
			{
				//top = 4
				bottom = 4
			}
		}
		text_field upkeep_text
		{
			validate = (show_upkeep || false)
			text text = "[{in_ungovernt_garrison:if} Upkeep: {upkeep_raw:plain} ({upkeep:plain:F1} while in ungoverned garrison) | Upkeep: {upkeep:plain}]"
			alignment = "right"
			font_size = 15
			padding
			{
				//top = 4
				bottom = 4
			}
			//color color = grey
		}
	}
}

def UnitAttributeTooltipHT : TooltipHyperText
{
	cs_class = "UIUnitSlot"
	setup = "SetupAttributeHTTooltip"

	text caption = "{row_text}"

	text_field descr
	{
		text text = "{attribute_def.description}"
		style = "flavor_text"
		width = 315
	}

	hypertext breakdown
	{
		rows factors
		{
			populate = "PopulateAttributeBreakdown"	
			text label = "[{source_type}: ]{source}: [{is_base:if}{value}|{value:bonus}][ ({perc_bonus:bonus:%})]"
		}
	}
}

def BVUnitTooltipHT : TooltipHyperText
{
	cs_class = "UIUnitSlot"
	setup = "SetupHTTooltip"
	
	preview
	{
		unit = Militia
		resources cost = "100g 1 workers 100 levy"
		resources upkeep = "1f"
	}
	
	row header
	{
		hypertext icon_ht
		{
			padding { top = 8 }
			flexible_width = 0
			sprite icon : circle_icon = (unit.icon)
			{
				size = 50,50
				frame { color = "103,90,62" }
				optional = true
			}
			// sprite icon = (unit.icon_tall)
			// {
			// 	size = 56,88
			// 	frame { color = "103,90,62" }
			// 	optional = true
			// }
		}
		hypertext name_descr
		{
			text_field name
			{
				text text = "{unit.name}"
				style = "caption"
				//alignment = "left"
			}
			text_field descr
			{
				text text = "{unit.militaryUnitType}"
				style = "flavor_text"
				width = 315
			}
		}
		// space space // compensate for the icon ion the left so texts center properly
		// {
		// 	size = icon.size
		// 	validate = (!row.icon.empty)
		// }
	}
	
	separator header_separator
	
	text_field descr
	{
		text text = "[{unit.description}]"
		style = "flavor_text"
		width = 430
	}
	
	text_field debug_info
	{
		validate = (alt || false)
		text text = $[
			"Unit: [{unit:#}|null]{p}"
			"Army: [{army:#}|null]{p}"
			"Castle: [{castle:#}|null]{p}"
			"Slot: [{slot:#}|null]{p}"
		]
	}
	
	text atttributes = "{Battle.squad_window_stats}{p}"
}

def BuildingTooltipHT : TooltipHyperText
{
	cs_class = "UIBuildingSlot"
	setup = "SetupHTTooltip"
	
	preview
	{
		building = Housings
		text production_tooltip_text = "{clr:green}+2{/clr}{workers_icon} in Town"
	}
	
	//separator top_separator
	
	row header
	{
		alignment = "left"
		
		hypertext icon_ht
		{
			padding { top = 8 }
			sprite icon = (building.icon)
			{
				size = 109,82
				frame { color = "103,90,62" }
				optional = true
			}
		}
		hypertext name_descr
		{
			text_field name
			{
				text text = "[{building.alt_tooltips:if}{availability_color}]{building.name}[{is_upgrade:if_not} in {castle}][{building.alt_tooltips:if}{/availability_color}][{alt:if} ({building.upgrade_of})|{alt:if}  ({building.district})][ ({num_instances} / {multi_instances})]"
				style = "caption"
				//alignment = "left"
			}
			text_field descr
			{
				text text = "[{building.flavor}]"
				style = "flavor_text"
				width = 315
			}
		}
		// space space // compensate for the icon ion the left so texts center properly
		// {
		// 	size = icon.size
		// 	validate = (!row.icon.empty)
		// }
	}
	
	separator header_separator
	
	hypertext upgrade_total_production
	{
		validate = (is_upgrade)
		text_alignment = "left"
		text text = "[{section_header}Total production in our kingdom: {/section_header}{total_kingdom_production}]"
	}
	
	separator upgrade_total_production_separator
	{
		validate = (!upgrade_total_production.empty)
	}
	
	hypertext totals
	{
		text_alignment = (is_upgrade and "left" or "center")
		text_field total_production
		{
			validate = (!is_upgrade)
			text text = "[{b}{total_production}{/b}]" //"[{section_header}Production:{/section_header} {total_production}]"
		}
		
		text_field upgrade_effects_label
		{
			validate = (is_upgrade && has_bonuses)
			text text = "{section_header}[{unbuildable:if}{clr:gray}]Effects of Upgrade:[{unbuildable:if}{/clr}]{/section_header}[ {clr:gray}(in {castle:nolink}){/clr}]"
		}
		
		text_field resource_production
		{
			validate = (is_upgrade)
			text text = "[{section_body}{production_tooltip_text}{/section_body}]"
		}
		
		text_field other_effects
		{
			text text = "[[{is_upgrade:if}{section_body}]{mods_tooltip_text}[{is_upgrade:if}{/section_body}]]"
		}
	}
	
	separator totals_separator
	{
		validate = (!totals.empty)
	}
	
	text_field resource_production
	{
		width = 420
		validate = (!is_upgrade)
		text text = "[{section_header}Production details:{/section_header}{p}{section_body}{production_tooltip_text}{/section_body}]"
	}
	
	text_field goods_produced
	{
		width = 420
		text text = "[{section_header}Goods produced:{/section_header}{p}{section_body}{produces_tooltip_text}{/section_body}]"
	}
	
	text_field goods_produced2
	{
		width = 420
		text text = "[{section_header}Goods produced in missing upgrades:{/section_header}{p}{section_body}{produces_tooltip_text2}{/section_body}]"
	}
	
	text_field upgrades
	{
		width = 420
		text text = $[
			"[{section_header}Upgrades ([{num_unlocked_upgrades} / ]{num_upgrades}):{/section_header}"
			"{p}{section_body}{upgrades_list}{/section_body}]"
		]
	}
	
	hypertext requirements
	{
		width = 420
		spacing { vertical = 8 }
		
		text prerequisites = $[
			"[{prerequisites_met:if_not}{section_header}Prerequisites:{/section_header}{p}{section_body}{prerequisites} and {prerequisites_or}{/section_body}|"
			 "{prerequisites_met:if_not}{section_header}Prerequisites:{/section_header}{p}{section_body}{prerequisites}{/section_body}|"
			 "{prerequisites_met:if_not}{section_header}Prerequisites:{/section_header}{p}{section_body}{prerequisites_or}{/section_body}]"
		]
		
		text requires = $[
			"[{requirements_met:if_not}{section_header}Requires:{/section_header}{p}{section_body}{requirements_or}, {requirements}{/section_body}|"
			"{requirements_met:if_not}{section_header}Requires:{/section_header}{p}{section_body}{requirements}{/section_body}|"
			"{requirements_met:if_not}{section_header}Requires:{/section_header}{p}{section_body}{requirements_or}{/section_body}]"
		]
	}
	
	text_field availability
	{
		validate = (!!building.alt_tooltips)
		width = 420
		spacing { vertical = 8 }
		text text = "[{availability_color}{availability_text}{/availability_color}]"
	}
	
	text_field upgrades_work_in_kingdom_hint
	{
		validate = (is_upgrade && !instance.is_built)
		width = 420
		text text = "{i}{q}{building}{q} effects will apply in every province with {q}{building.upgrade_of}{q} in our kingdom.{/i}"
	}
	
	text_field build_prompt
	{
		//validate = (!instance.is_built)
		width = 420
		text text = "[{i}{build_prompt}{/i}]"
	}
	
	text_field debug_info
	{
		validate = (alt)
		text text = $[
			"{align:left}"
			"{p}id: {building.id}{p}"
			"district: {building.districts}{p}"
			"[upgrade of: {building.upgrade_of}{p}]"
			"[upgrades: {building.upgrades.building_defs}{p}]"
			"[variant of: {building.variant_of}{p}]"
			"[variants: {building.variants}{p}]"
			"State: {state}{p}"
			"Castle: [{castle}|null][ -> {other_castle}]{p}"
			"Kingdom: [{kingdom}|null]{p}"
			"[Availability: {res_info}{p}]"
			"Level: {level}{p}"
			"Applied Level: {applied_level}{p}"
			"{p}{clr:gray}{i}Debug hotkeys:{p}"
			"Alt-click to force build{p}"
			"Ctrl-click to add to City Plan{p}"
			"{/align}"]
	}
	
	space bottom_space
	{
		optional = (!instance.is_built || upkeep || false)
	}
	
	separator footer_separator
	{
		validate = (!instance.is_built || upkeep || false)
	}
	
	row footer
	{
		validate = (!instance.is_built || upkeep || false)
		text_field cost_text
		{
			validate = (!instance.is_built)
			text text = "[Cost: {cost}]"
			font_size = 15
			padding
			{
				//top = 4
				bottom = 4
			}
		}
		text_field upkeep_text_built
		{
			validate = (!!instance.is_built)
			text text = "[Upkeep: {upkeep:plain}]"
			alignment = "right"
			font_size = 15
			padding
			{
				//top = 4
				bottom = 4
			}
			//color color = grey
		}
		text_field upkeep_text_not_built
		{
			validate = (!instance.is_built)
			text text = "[Upkeep: {upkeep:upkeep}]"
			alignment = "right"
			font_size = 15
			padding
			{
				//top = 4
				bottom = 4
			}
			//color color = grey
		}
	}
	
	//separator bottom_separator
}

def ResourceTooltipHT : TooltipHyperText
{
	cs_class = "UIResources"
	setup = "SetupHTTooltip"
	
	preview
	{
		resource = Salt
		text produced_in_text = "{SaltTrade}"
		text required_for_text = "{FishMarket}, {Bakery}, {DairyShop}, {SausageMaker}"
	}
	
	//separator top_separator
	
	row header
	{
		spacing { horizontal = 0 }
		
		hypertext icon_ht
		{
			padding { top = 6 }
			sprite icon = (resource.icon)
			{
				size = 60,60
				frame { color = "103,90,62" }
				optional = true
			}
		}
		hypertext name_descr
		{
			text_field name
			{
				text text = "[{building.alt_tooltips:if}{availability_color}]{resource.name}[{building.alt_tooltips:if}{/availability_color}]"
				style = "caption"
			}
			text_field descr
			{
				text text = "[{resource.tooltip}]"
				style = "flavor_text"
				width = 315
			}
		}
		// space space // compensate for the icon ion the left so texts center properly
		// {
		// 	size = icon.size
		// 	validate = (!row.icon.empty)
		// }
	}
	
	separator header_separator
	
	hypertext kingdom_effects
	{
		validate = (resource_have_mods || false)
		text label = "{section_header}Kingdom Effects:{/section_header}"
		rows effects = (vars.global_effects)
		{
			populate = "PopulateResourceKingdomEffects"
			text global_effect = "{section_body}{effect_text}{/section_body}"
			color text_color = "153,108,183"
		}
	}
	
	
	hypertext body
	{
		spacing { vertical = 8 }
		width = 400
		
		text produced_in = "[{section_header}Produced in:{/section_header}{p}{section_body}{produced_in_text}{/section_body}]"
		text availability = "[{availability_color}{availability_text}{/availability_color}]"
		text team_members = "[{section_header}Team members that produce this:{/section_header}{p}{section_body}{team_mate_kingdoms}{/section_body}]"
		text required_for = "[{section_header}Required for:{/section_header}{p}{section_body}{required_for_text}{/section_body}]"
		text importer = "[{importer} is currently importing {requirement_met_indirect}{resource.name}{/requirement_met_indirect} from {importer.mission_kingdom}.]"
		text province_feature = "[{section_header}Produced in provinces with:{/section_header}{p}{section_body}{province_features_text}{/section_body}]"
		text advantages = "[{section_header}Unlocks:{/section_header}{p}{section_body}{advantages_text}{/section_body}]"
	}
	
	//separator bottom_separator
}

def ProvinceFeatureTooltipHT : TooltipHyperText
{
	cs_class = "UIProvinceFeature"
	setup = "SetupHTTooltip"
	
	preview
	{
		province_feature = Cattle
	}
	
	//separator top_separator
	
	row header
	{
		hypertext icon_ht
		{
			padding { top = 6 }
			sprite icon = (province_feature.icon_big)
			{
				size = 60,60
				frame { color = "103,90,62" }
				optional = true
			}
		}
		hypertext name_descr
		{
			padding { left = 8 }
			text_field name
			{
				text text = "[{building.alt_tooltips:if}{availability_color}]{province_feature.name}[{building.alt_tooltips:if}{/availability_color}]"
				style = "caption"
			}
			text_field descr
			{
				text text = "[{province_feature.tooltip}]"
				style = "flavor_text"
				width = 420
			}
		}
		// space space // compensate for the icon ion the left so texts center properly
		// {
		// 	size = icon.size
		// 	validate = (!row.icon.empty)
		// }
	}
	
	separator header_separator
	
	hypertext body
	{
		width = 475
		padding { bottom = 6 }
		
		text availability = "{availability_color}{availability_text}{/availability_color}"
		//text required_for = "[{section_header}Required for:{/section_header}{p}{section_body}{required_for_text}{/section_body}]"
	}
	
	//separator bottom_separator
}

def SettlementTooltipHT : TooltipHyperText
{
	cs_class = "UISettelmentIcon"
	setup = "SetupHTTooltip"
	
	preview
	{
		obj = SheepFarm
	}
	
	//separator top_separator
	
	row header
	{
		hypertext icon_ht
		{
			padding { top = 6 }
			sprite icon = (icon)
			{
				size = 60,60
				frame { color = "103,90,62" }
				optional = true
			}
		}
		hypertext name_descr
		{
			padding { left = 8 }
			text_field name_text
			{
				text text = "[{settlement:if_not}{building.alt_tooltips:if}{availability_color}]{name}[{settlement:if_not}{building.alt_tooltips:if}{/availability_color}]"
				style = "caption"
			}
			text_field descr
			{
				text text = "[{description}]"
				style = "flavor_text"
				width = 420
			}
		}
		// space space // compensate for the icon ion the left so texts center properly
		// {
		// 	size = icon.size
		// 	validate = (!row.icon.empty)
		// }
	}
	
	separator header_separator
	
	hypertext instance_info
	{
		width = 475
		spacing = 8
		validate = (!!settlement)
		
		text_field province_is_in_disorder
		{
			validate = (!!realm.is_disorder)
			text text = "The town is currently in a state of disorder, with the majority of its population remaining loyal to {realm.majority_foreign_kingdom}."
		}
		
		text_field province_is_occupied
		{
			validate = (!!realm.is_rebel_occupied)
			text text = "The {settlement.def.name:lower} is currently occupied by rebels."
		}
		
		text info = $[
			"[{clr:gold}Province:{/clr} {realm:link}{realm.province_name}{/link}]"
			"[{garrison.levy_squads:if}{p}{p}{clr:gold}Defending squads:{/clr} {garrison.levy_squads}{levy_icon}]"
			"[{garrison.levy_defenders_manpower:if}{p}{blt} Base manpower: {garrison.levy_defenders_manpower}]"
			"[{garrison.levy_defenders_siege_defense_manpower:if}{p}{blt} Bonus from siege defense: {garrison.levy_defenders_siege_defense_manpower:bonus}]"
			"[{garrison.levy_defenders_siege_defense_temp_manpower:if}{p}{blt} Bonus from siege defense: {garrison.levy_defenders_siege_defense_temp_manpower:bonus}]"
			"[{garrison.levy_defenders_excess_levy_manpower:if}{p}{blt} Bonus from excess levies: {garrison.levy_defenders_excess_levy_manpower}]"
			"[{garrison.levy_defenders_excess_population_manpower:if}{p}{blt} Bonus from settlement population: {garrison.levy_defenders_excess_population_manpower}]"
			"[{garrison.levy_defenders_levies_manpower:if}{p}{blt} Bonus from province levies: {garrison.levy_defenders_levies_manpower:bonus}]"
			"[{realm_town_guards:if}{p}{p}{clr:gold}Town guards:{/clr} {realm_town_guards}{guard_icon}]"
			"[{garrison.town_guards_manpower:if}{p}{blt} Base manpower: {garrison.town_guards_manpower}]"
			"[{garrison.town_guards_siege_defense_manpower:if}{p}{blt} Bonus from siege defense: {garrison.town_guards_siege_defense_manpower:bonus}]"
			"[{garrison.town_guards_rs_garrison_manpower:if}{p}{blt} Bonus from realm: {garrison.town_guards_rs_garrison_manpower:bonus}]"
			"[{garrison.town_guards_siege_defense_temp_manpower:if}{p}{blt} Bonus from siege defense: {garrison.town_guards_siege_defense_temp_manpower:bonus}]"
			"[{garrison.town_guards_excess_guards_manpower:if}{p}{blt} Bonus from excess town guards: {garrison.town_guards_excess_guards_manpower:bonus}]"
			"[{garrison.town_guards_excess_population_manpower:if}{p}{blt} Bonus from excess province population: {garrison.town_guards_excess_population_manpower:bonus}]"
			"[{garrison.town_guards_levies_manpower:if}{p}{blt} Bonus from province levies: {garrison.town_guards_levies_manpower:bonus}]"
			"[{garrison.peasant_squads:if}{p}{p}{clr:gold}Peasant defending squads:{/clr} {garrison.peasant_squads}{workers_icon}]"
			"[{garrison.peasant_defenders_manpower:if}{p}{blt} Base manpower: {garrison.peasant_defenders_manpower}]"
			"[{garrison.peasant_siege_defense_manpower:if}{p}{blt} Bonus from siege defense: {garrison.peasant_siege_defense_manpower:bonus}]"
			"[{garrison.peasant_siege_defense_temp_manpower:if}{p}{blt} Bonus from siege defense: {garrison.peasant_siege_defense_temp_manpower:bonus}]"
			"[{garrison.peasant_excess_levy_manpower:if}{p}{blt} Bonus from excess levies: {garrison.peasant_excess_levy_manpower:bonus}]"
			"[{garrison.peasant_excess_population_manpower:if}{p}{blt} Bonus from excess settlement population: {garrison.peasant_excess_population_manpower:bonus}]"
			"[{garrison.peasant_levies_manpower:if}{p}{blt} Bonus from province levies: {garrison.peasant_levies_manpower:bonus}]"
		]
		
		
	}
	
	hypertext availability
	{
		validate = (!settlement)
		width = 475
		padding { bottom = 6 }
		
		text availability = "[{availability_color}{availability_text}{/availability_color}]"
		//text required_for = "[{section_header}Required for:{/section_header}{p}{section_body}{required_for_text}{/section_body}]"
	}
	
	//separator bottom_separator
}

def SettlementTypeTooltipHT : TooltipHyperText
{
	
	row header
	{
		hypertext icon_ht
		{
			padding { top = 6 }
			sprite icon = (icon)
			{
				size = 60,60
				frame { color = "103,90,62" }
				optional = true
			}
		}
		hypertext name_descr
		{
			padding { left = 8 }
			text_field name_text
			{
				text text = "[{name}]"
				style = "caption"
			}
			text_field descr
			{
				text text = "[{description}]"
				style = "flavor_text"
				width = 420
			}
		}
		
		padding { bottom = 12 }
	}
	
}

def GovernorTooltipHT : TooltipHyperText
{
	cs_class = "UISkill"
	
	preview
	{
		kingdom = "Bulgaria"
		{
			tax_rate = 5
			crown_authority = 1
		}
		realm = '<link="obj:123">Tutrakan</link>'
		governor = '<link="obj:321">Marshal Moritz</link>'
		no_governor_penalty = 10
		
		text mod_text = "{value} {stat}"
		
		sections
		{
			Default
			{
				effects = true
				{
					rs_governor_levy_per_settlement
					{
						effect_text = "1 levy per settlement"
					}
					rs_governor_levy_per_keep_from_CL_active
					{
						effect_text = "1 levy per keep per 5 levels"
					}
					rs_governor_town_defense_from_CL_active
					{
						effect_text = "5 defense per class level"
					}
				}
			}
			
			CharitySkill
			{
				text caption = "{CharitySkill.name} II"
				effects = true
				{
					cs_happiness_boost
					{
						effect_text = "+10 happiness"
					}
				}
			}
			
			CharityTradition
			{
				from_tradition = true
				text caption = "{CharityTradition.name}"
				inactive = true
				effects = true
				{
					cs_happiness_boost_neighbors
					{
						effect_text = "+5 happiness in neighbors"
					}
				}
			}
			
			King
			{
				sprite icon = "Assets/UI/Elements/Common/Icons/Icon_Crown_King.tga:Icon_Crown_King#1" //GUID:aa7934ae6be0ea14f801303401d2b553
				text caption = "King"
				inactive = (!governor.is_king)
				effects = true
				{
					rs_governor_king_gold_per_settlement
					{
						effect_text = "+1 gold per settlement"
					}
				}
			}
		}
	}
	
	//separator top_separator
	//{
	//	padding { bottom = 16 }
	//}
	
	//separator header_separator
	
	hypertext governed
	{
		validate = (governor || false)
		spacing
		{
			vertical = 8 // spacing between rows
		}
		
		row caption
		{
			alignment = "center"
			sprite icon : rounded_icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_Govern.tga:Icon_CharacterAction_Govern#2" //GUID:338137d863daedb42a04be7c2e790fa2
			{
				size = 50,50
				optional = true
			}
			space space { width = 10; optional = false }
			text_field caption
			{
				text text = "Governed by {governor}"
				style = "caption"
			}
		}
		
		row description
		{
			text_field descr
			{
				text text = "The province of {realm} is prospering under {governor:s} wise leadership."
				//width = 315
			}
		}
		
		hypertext body : GoverningTooltipHT.body
	}
	
	hypertext preparing_to_govern
	{
		validate = (prepairng_governor || false)
		spacing
		{
			vertical = 8 // spacing between rows
		}
		
		row caption
		{
			alignment = "center"
			sprite icon : rounded_icon = "Assets/UI/Elements/Statuses/Icon_CharacterStatus_NotGoverning.tga:Icon_CharacterStatus_NotGoverning#2" //GUID:c031536f5e7443a4580b8bbfa7cccbad
			{
				size = 50,50
				optional = true
			}
			space space { width = 10; optional = false }
			text_field caption
			{
				text text = "Preparing to govern"
				style = "caption"
			}
		}
		
		row description
		{
			text_field descr
			{
				text text = "The province of {castle} will prosper under {prepairng_governor:s} wise leadership."
				//width = 315
			}
		}
		
		hypertext body : GoverningTooltipHT.body
	}
	
	hypertext not_governed
	{
		validate = (!governor && !awaiting_governor && !in_disorder)
		spacing
		{
			vertical = 8 // spacing between rows
		}
		
		row caption
		{
			alignment = "center"
			sprite icon : rounded_icon = "Assets/UI/Elements/Statuses/Icon_CharacterStatus_NotGoverning.tga:Icon_CharacterStatus_NotGoverning#2" //GUID:c031536f5e7443a4580b8bbfa7cccbad
			{
				size = 50,50
				optional = true
			}
			space space { width = 10; optional = false }
			text_field caption
			{
				text text = "No governor"
				style = "caption"
			}
		}
		
		row description
		{
			text_field descr
			{
				text text = $[
					"{realm} is not governed and we barely benefit from it economically:"
					"{p}{blt} Gold income is equal to the kingdom's current tax rate[ ({kingdom.tax_rate}%)]"
					"[{p}{blt} Only {no_governor_penalty}% of the province's Books, Faith, Commerce and Food production is received]"
				]
			}
		}
	}
	
	hypertext disorder
	{
		validate = (in_disorder)
		spacing
		{
			vertical = 8 // spacing between rows
		}
		
		row caption
		{
			alignment = "center"
			sprite icon : rounded_icon = "Assets/UI/Elements/Statuses/Icon_CharacterStatus_NotGoverning_Disorder.tga:Icon_CharacterStatus_NotGoverning_Disorder#2" //GUID:de1007527b0f9b8499dc757d4e054e93
			{
				size = 50,50
				optional = true
			}
			space space { width = 10; optional = false }
			text_field caption
			{
				text text = "No governor"
				style = "caption"
			}
		}
		
		row description
		{
			text_field descr
			{
				text text = "{clr:red}The population of {realm} refuses to serve under any governor. We must first deal with its disorder.{/clr}"
			}
		}
	}
	
	// hypertext waiting_governor
	// {
	// 	validate = (awaiting_governor && !in_disorder)
	// 	padding { bottom = 8 }
	
	// 	row caption
	// 	{
	// 		alignment = "center"
	// 		sprite icon : rounded_icon = "Assets/UI/Elements/Statuses/Icon_CharacterStatus_NotGoverning.tga:Icon_CharacterStatus_NotGoverning#2" //GUID:c031536f5e7443a4580b8bbfa7cccbad
	// 		{
	// 			size = 50,50
	// 			optional = true
	// 		}
	// 		space space { width = 10; optional = false }
	// 		text_field caption
	// 		{
	// 			text text = "Preparing to govern"
	// 			style = "caption"
	// 		}
	// 	}
	
	// 	row description
	// 	{
	// 		text_field descr
	// 		{
	// 			text text = "{prepairng_governor} is preparing his government of {realm.castle} ({realm.province_name} province)."
	// 			//width = 315
	// 		}
	// 	}
	
	// 	hypertext body : GoverningTooltipHT.body
	// }
	//separator footer_separator
	
	// text_field negative_CA
	// {
	// 	validate = (kingdom.crown_authority < 0 && !awaiting_governor)
	// 	text text = "{clr:active_penalty}You cannot assign a governor while Crown authority is negative!{/clr}"
	// 	//width = 315
	// }
	
	text_field click_to_assign_governor //non_negative_CA
	{
		validate = (!awaiting_governor && !in_disorder) //removed !(kingdom.crown_authority < 0)
		text text = "{i}Click to [replace {governor} with another governor|assign a governor and convert these lands to royal.{p}You will then have access to the province's full production].{/i}"
	}
	
	//separator bottom_separator
	//{
	//	padding { top = 16 }
	//}
}

def GoverningTooltipHT : TooltipHyperText
{
	cs_class = "UISkill"
	
	preview : GovernorTooltipHT.preview
	{
		governed_castle = '<link="obj:123">Tutrakan</link>'
	}
	
	//separator top_separator
	//{
	//	padding { bottom = 16 }
	//}
	
	text_field caption
	{
		text text = "Governing {governed_castle}"
		style = "caption"
	}
	
	text_field descr
	{
		text text = "The province of {realm} is prospering under {governor:s} wise leadership."
		//width = 315
	}
	
	hypertext body
	{
		spacing : TooltipHyperText.spacing
		
		hypertext totals
		{
			validate = (alt || false)
			
			spacing : TooltipHyperText.spacing
			separator_color = TooltipHyperText.separator_color
			
			separator totals_top_separator
			
			text_field total_production
			{
				text text = "{castle.governor_bonuses:bonus}"
				alignment = "center"
			}
			
			separator totals_bottom_separator
		}
		
		hypertext detailed
		{
			//validate = (!alt)
			
			spacing : TooltipHyperText.spacing
			
			//show_section_icons = true
			//hide_empty_sections = true
			rows sections : SkillTooltipHT.sections
			{
				
				populate = "PopulateGovernorTooltipHT"
			}
		}
	}
	
	text prompt = "{i}Click to stop or reassign governing.{/i}"
	
	//separator bottom_separator
}

def NotGoverningTooltipHT : TooltipHyperText
{
	cs_class = "UISkill"
	
	preview : GovernorTooltipHT.preview
	{
		governed_castle = '<link="obj:123">Tutrakan</link>'
	}
	
	//separator top_separator
	//{
	//	padding { bottom = 16 }
	//}
	
	text_field caption
	{
		text text = "[Preparing to govern {castle}|Not governing a town]"
		style = "caption"
	}
	
	text_field preparing_descr
	{
		validate = (!!castle)
		text text = "{governor} is on his way to govern {castle}.{p}{p}The province of {realm} will prosper under {governor:s} wise leadership."
		//width = 315
	}
	
	text_field not_governing_descr
	{
		validate = (!castle)
		text text = "{governor} is currently not governing a town.{p}{p}Governing will not interrupt or forbid other character actions and greatly boosts the production of a province."
	}
	
	hypertext body
	{
		spacing : TooltipHyperText.spacing
		
		hypertext totals
		{
			validate = (alt || false)
			
			spacing : TooltipHyperText.spacing
			separator_color = TooltipHyperText.separator_color
			
			separator totals_top_separator
			
			text_field total_production
			{
				text text = "{castle.governor_bonuses:bonus}"
				alignment = "center"
			}
			
			separator totals_bottom_separator
		}
		
		hypertext detailed
		{
			//validate = (!alt)
			
			spacing : TooltipHyperText.spacing
			
			//show_section_icons = true
			//hide_empty_sections = true
			rows sections : SkillTooltipHT.sections
			{
				
				populate = "PopulateGovernorTooltipHT"
			}
		}
	}
	
	text_field prompt
	{
		validate = (!castle)
		text text = "{i}Click to assign as a governor.{/i}"
	}
	
	//separator bottom_separator
}


def ChooseCastleToGovernHT : TooltipHyperText
{
	cs_class = "UISkill"
	
	preview : GovernorTooltipHT.preview
	{
		castle = '<link="obj:123">Tutrakan</link>'
		governor = '<link="obj:321">Marshal Moritz</link>'
	}
	
	//separator top_separator
	//{
	//	padding { bottom = 16 }
	//}
	
	text_field caption
	{
		text text = "Govern {castle}"
		style = "caption"
	}
	
	text_field descr
	{
		text text = "The province of {castle} will prosper under {governor:s} wise leadership."
		//width = 315
	}
	
	hypertext body : GoverningTooltipHT.body
	
	text prompt = "{i}Click to select {governor} as a governor of {castle}.{/i}"
	
	//separator bottom_separator
}

def ChooseGovernorHT : TooltipHyperText
{
	cs_class = "UISkill"
	
	preview : GovernorTooltipHT.preview
	{
		castle = '<link="obj:123">Tutrakan</link>'
		governor = '<link="obj:321">Marshal Moritz</link>'
	}
	
	//separator top_separator
	// {
	// 	padding { bottom = 16 }
	// }
	
	text_field caption
	{
		text text = "Govern by {governor}"
		style = "caption"
	}
	
	text_field descr : ChooseCastleToGovernHT.descr
	
	hypertext body : GoverningTooltipHT.body
	
	text prompt = "{i}Click to select {governor} as a governor of {castle}.{/i}"
	
	//separator bottom_separator
}

def SkillTooltipHT : TooltipHyperText
{
	cs_class = "UISkill"
	
	preview
	{
		skill = IronFistSkill
		rank = 2
		text rank_text = "III"
		text class_name = "Marshal"
		text skill_descr = "{class_name} Primary Skill"
		
		learned = true
		is_king = true
		is_governing = false
		is_tradition = true
		at_max_rank = (rank = 3)
		can_learn = (rank = 0)
		can_increase_rank = (rank > 0 && !at_max_rank)
		
		text mod_text = "{value} {stat}"
		
		sections
		{
			Default
			{
				effects
				{
					cs_rebel_morale
					{
						text effect_text = "{mod_text}"
						text value = "-1/-3/-5"
						text stat = "morale of rebels in battles"
					}
					
					//Marshal
					cs_pillage_gold_perc
					{
						text effect_text = "{mod_text}"
						text value = "{clr:green}20/{clr:yellow}50{/clr}/100{/clr}"
						text stat = "gold from pillaging"
					}
					cs_gold_from_rebellions_perc
					{
						text effect_text = "{mod_text}"
						text value = "20/50/100"
						text stat = "gold from defeated rebellions"
					}
					tactic1
					{
						text effect_text = "{SkillTooltip.tactic_text}"
						text name = "Some Tactic"
					}
					opportunity1
					{
						text effect_text = "{SkillTooltip.opportunity_text}"
						text name = "Some Opportunity"
					}
					action1
					{
						text effect_text = "{SkillTooltip.action_text}"
						text name = "Some Action"
					}
					
					//Diplomat
					// ThreatenAction
					// {
					// 	inactive = (!is_tradition)
					// 	text prefix_symbols = "{tradition_icon}{skill_action_icon}"
					// 	text stat = "Threaten"
					// }					
				}
			}
			
			IronFistTradition
			{
				from_tradition = true
				text caption = "{IronFistTradition.name}[{show_max_rank_text:if} ({clr:gray}activated at level 3{/clr})]"
				show_max_rank_text = (is_tradition && learned and !at_max_rank)
				inactive = (!is_tradition)
				effects
				{
					//Marshal
					cs_infantry_CTH_perc
					{
						inactive = (!is_tradition)
						//text prefix_symbols = "{tradition_icon}"
						text effect_text = "{mod_text}"
						text value = "5/10/15"
						text stat = "melee units damage"
					}
					
					//Govern
					rs_governor_stability_realm
					{
						inactive = (!(is_tradition && is_governing))
						//text prefix_symbols = "{tradition_icon}"
						text effect_text = "{mod_text}"
						text value = "2/3/5"
						text stat = "stability in governed province"
					}
					tactic1
					{
						text effect_text = "{SkillTooltip.tactic_text}"
						text name = "Some Tactic"
					}
					opportunity1
					{
						text effect_text = "{SkillTooltip.opportunity_text}"
						text name = "Some Opportunity"
					}
					action1
					{
						text effect_text = "{SkillTooltip.action_text}"
						text name = "Some Action"
					}
				}
			}
			
			King
			{
				sprite icon = "Assets/UI/Elements/Common/Icons/Icon_Crown_King.tga:Icon_Crown_King#1" //GUID:aa7934ae6be0ea14f801303401d2b553
				text caption = "King"
				inactive = (!is_king)
				effects
				{
					ks_corruption
					{
						inactive = (!(is_tradition && is_king))
						text effect_text = "{mod_text}"
						text value = "-20"
						text stat = "corruption"
					}
				}
			}
		}
	}
	
	//separator top_separator
	
	// padding
	// {
	// 	top = 8
	// }
	
	row header
	{
		background
		{
			sprite image = "Assets/UI/Elements/Common/vertical_gradient.psd:vertical_gradient#1" //GUID:be2d2c795bd2c4b42942e5042aaadba6
			color color = (CharacterTooltip.class_gradient_colors[skill.class_gradient_key || class_name] || no_gradient)
			color no_gradient = "0,0,0,0"
			
			padding
			{
				left = -15
				right = -15
				top = -16
				bottom = -8
			}
		}
		padding
		{
			// top = 8
			bottom = 8
		}
		alignment = "center"
		
		sprite icon : circle_icon = (skill.icon[max(rank - 1, 0) or 0])
		{
			size = 50,50
			//frame = (SkillIcon.tier_border[max(rank - 1, 0) or 0])
			// { 
			// 	color = "103,90,62" 
			// }
			optional = true
		}
		hypertext name_descr
		{
			padding { top = -8 }
			text_field name
			{
				text text = "{skill.name}[ {rank_text}]"
				style = "caption"
			}
			text_field descr
			{
				setup = "SetupSkillDescr"
				text text = "[{skill_descr}|Skill]"
				style = "subcaption"
			}
		}
		// space space // compensate for the icon ion the left so texts center properly
		// {
		// 	size = icon.size
		// 	validate = (!row.icon.empty)
		// }
	}
	
	separator header_separator
	
	text_field descr
	{
		text text = "[{skill.tooltip}]"
		style = "flavor_text"
		width = 450
	}
	
	rows sections = (vars.sections)
	{
		populate = "PopulateTooltipHT"
		// sprite icon = (instance.icon)
		// {
		// 	validate = (show_section_icons || false)
		// 	optional = true
		// 	size = 30,30
		// }
		//padding { top = 16 }
		// spacing = 16
		hypertext text
		{
			validate = (!hide_empty_sections || instance.effects || false)
			//text_font_size = 14
			//spacing { vertical = 3 }
			text_field caption
			{
				text text = "[{section_header}{instance.caption}{/section_header}:]"
				color = (inactive and SkillTooltip.clr_inactive_header or SkillTooltip.clr_active_header)
			}
			rows effects = (instance.effects)
			{
				text_field text
				{
					text text = "{section_body}[{from_tradition:if}{clr:tradition_bonus}]{effect_text}[ {nobr}(at rank {min_rank}){/nobr}][{from_tradition:if}{/clr}]{/section_body}"
					color = (inactive and SkillTooltip.clr_inactive or SkillTooltip.clr_active)
					//width = 300
				}
			}
		}
	}
	
	space bottom_space
	{
		optional = (can_learn || can_increase_rank)
	}
	
	text_field learn_text
	{
		validate = (can_learn || false)
		text text = "{i}Click to learn {skill}{/i}"
	}
	
	text_field rank_text
	{
		validate = (can_increase_rank || false)
		text text = "{i}Click to increase rank{/i}"
	}
	
	separator footer_separator
	{
		validate = (learn_cost && (can_learn || can_increase_rank) || false)
	}
	
	text_field learn_cost_text
	{
		validate = (can_learn || false)
		text text = "[Cost: {learn_cost}]"
		font_size = 15
		padding { bottom = 4 }
	}
	
	text_field rank_cost_text
	{
		validate = (can_increase_rank || false)
		text text = "Cost: {rank_cost}"
		font_size = 15
		padding { bottom = 4 }
	}
	
	//separator bottom_separator
}

def TraditionTooltipHT : TooltipHyperText
{
	cs_class = "UIDynastyTradition"
	setup = "SetupHTTooltip"
	
	//preview : TraditionInfoHT.preview
	
	section_labels
	{
		text King = "King"
	}
	
	//separator top_separator
	
	row header
	{
		padding
		{
			top = -8
			bottom = -8
		}
		alignment = "center"
		
		sprite icon : circle_icon = (tradition.icon)
		{
			size = 50,50
			frame { color = "103,90,62" }
			optional = true
		}
		hypertext name_descr
		{
			padding { top = -8 }
			text_field name
			{
				text text = "{tradition.name}" //[ {rank_text}]"
				style = "caption"
			}
			text_field descr
			{
				text text = "Kingdom Tradition"
				//alignment = "center"
			}
		}
		// space space // compensate for the icon ion the left so texts center properly
		// {
		// 	size = icon.size
		// 	validate = (!row.icon.empty)
		// }
	}
	
	separator header_separator
	{
		padding { top = 4 }
	}
	
	text_field descr
	{
		text text = "[{tradition.tooltip}]"
		width = 400
		style = "flavor_text"
	}
	
	template CellHT
	{
		text label = "[{section_header}{section_label}:{/section_header}]"
		hypertext bonuses
		{
			//padding { left = 16 }
			rows effects = (instance.effects)
			{
				text_field text
				{
					text text = "{section_body}{clr:tradition_bonus}{effect_text}[ {nobr}(at rank {min_rank}){/nobr}]{/clr}{/section_body}"
					color = (inactive and SkillTooltip.clr_inactive or SkillTooltip.clr_active)
				}
			}
		}
	}
	
	hypertext effects
	{
		spacing
		{
			horizontal = 8 // default spacing between elements in a row
			vertical = 8 // spacing between rows
		}
		
		hypertext kingdom_effects
		{
			text label = "{section_header}Kingdom Effects:{/section_header}"
			rows effects = (vars.global_effects)
			{
				populate = "PopulateTraditionKingdomEffects"
				text global_effect = "{section_body}{effect_text}{/section_body}"
				color text_color = "153,108,183"
			}
		}
		
		// hypertext skill_effects
		// {
		// 	validate = (has_govern_bonuses || has_non_govern_bonuses || false)
		// 	text label = "{section_header}Effects on the {tradition.skill} skill:{/section_header}"
		// 	rows default
		// 	{
		// 		populate = "PopulateTraditionSkillBonuses" { default = true }
		// 		hypertext section : CellHT
		// 	}
		// 	rows not_default
		// 	{
		// 		populate = "PopulateTraditionSkillBonuses" { default = false }
		// 		padding { left = 16 }
		// 		hypertext section : CellHT
		// 	}
		// }
		
		hypertext skill_effects_non_govern
		{
			validate = (has_non_govern_bonuses || false)
			
			text label = "{section_header}Effects on the {tradition.skill} skill:{/section_header}"
			rows default
			{
				populate = "PopulateTraditionSkillBonuses" { govern = false; default = true }
				hypertext section : CellHT
			}
			rows not_default
			{
				populate = "PopulateTraditionSkillBonuses" { govern = false; default = false }
				padding { left = 16 }
				hypertext section : CellHT
			}
		}
		
		hypertext skill_effects_govern
		{
			validate = (has_govern_bonuses || false)
			
			text label = "{section_header}Effects on the {tradition.skill} skill (governing):{/section_header}"
			rows default
			{
				populate = "PopulateTraditionSkillBonuses" { govern = true; default = true }
				hypertext section : CellHT
			}
			rows not_default
			{
				populate = "PopulateTraditionSkillBonuses" { govern = true; default = false }
				padding { left = 16 }
				hypertext section : CellHT
			}
		}
	}
	
	
	
	space bottom_space
	{
		optional = true //(adopted || true)
	}
	
	separator footer_separator
	{
		validate = (!adopted)
	}
	
	text_field adopt_prompt
	{
		validate = (!adopted || false)
		width = 420
		text text = "{i}{adopt_prompt}{/i}"
	}
	// cost
	text_field cost_text
	{
		validate = (!adopted || false)
		text text = "Cost: {cost}"
	}
	//separator bottom_separator
}

def CharacterOpportunitiesTooltipHT : TooltipHyperText
{
	//separator top_separator
	
	row header
	{
		sprite icon = (class_def.opportunities_button.icon)
		{
			size = 50,50
			frame { color = "103,90,62" }
			optional = true
		}
		space space { width = 20; optional = false }
		hypertext name_descr
		{
			//alignment = "center"
			spacing { vertical = 4 }
			
			text_field name
			{
				text text = "{class_def.opportunities_button.tooltip_title}"
				style = "caption"
				//alignment = "left"
				
			}
			text_field descr
			{
				text text = "{class_def.opportunities_button.tooltip_body}"
				style = "subcaption"
				alignment = "left"
			}
		}
		
	}
	
	separator header_separator
	
	row description
	{
		validate = (is_spy)
		// padding
		// {
		// 	top = 16
		// 	bottom = 16
		// 	left = 50
		// 	right = 8
		// }
		// alignment = "left"
		// text_field infulance_total
		// {
		// 	text text = "Intrigue: {clr:green}{intrigue:F0}{/clr}"
		// }
	}
	//separator bottom_separator
}

def IncomeTooltipHT : TooltipHyperText
{
	cs_class = "UIIncomePanel"
	setup = "SetupIncomeTooltip"
	
	padding
	{
		top = 8
		bottom = 16
		left = 8
		right = 8
	}
	
	row caption
	{
		text_field caption
		{
			text text = "{caption}: {amount:F1}"
			style = "caption"
			//alignment = "left"
		}
	}
	
	row description
	{
		validate = (show_description || false)
		
		text_field test
		{
			text text = "{description}"
			width = 450
		}
	}
	
	rows details = (vars.sections)
	{
		populate = "PopulateIncomeTooltipHT"
		
		padding
		{
			top = -4
			bottom = -5
		}
		
		width = 300
		
		text_field label
		{
			text text = "{label}:"
			style = "income_breakdown_text"
			width = 380
			alignment = "left"
			case show_tooltip = (show_subtotal_tooltips)
			{
				tooltip = IncomeDescriptionTooltip
			}
		}
		text_field value
		{
			text text = "{value}"
			style = "income_breakdown_text"
			width = 50
			alignment = "right"
		}
	}
}

def IncomeDescriptionTooltipHT : TooltipHyperText
{
	cs_class = "UIIncomePanel"
	setup = "SetupIncomeTooltip"
	
	padding
	{
		top = 8
		bottom = 12
		left = 8
		right = 8
	}
	
	row caption
	{
		text_field caption
		{
			text text = "{caption}: {amount}"
			style = "caption"
			//alignment = "left"
		}
	}
	
	row description
	{
		text_field desc
		{
			text text = "{description}"
			style = "income_breakdown_text"
			alignment = "left"
			width = 400
		}
	}
}

def KingdomGoldTooltipHT : TooltipHyperText
{
	text_field caption
	{
		text text = "Royal treasury"
		style = "caption"
	}
	
	text_field descr
	{
		text text = $[
			"The most fundamental currency of all is gold, directly or indirectly needed for almost all of a kingdom's actions - constructions, hiring units, knights' actions and many others.{p}"
			"Stockpiling a lot of gold results in inflation."
		]
		style = "flavor_text"
		width = 400
	}
	
	text income_and_expenses = $[
		"{section_header}Income:{/section_header} {kingdom_gold_income:bonus_no_sign:F0}{gold_icon}{p}"
		"{section_header}Expenses:{/section_header} {kingdom_gold_expenses:penalty_no_sign:F0}{gold_icon}"
	]
	
	//separator totals_separator
	
	text balance = "{section_header}Balance:{/section_header} {kingdom_gold_balance:bonus:F0}{gold_icon}"
	
	text prompt = "{i}Click to see more details.{/i}"
}

def KingdomBooksTooltipHT : TooltipHyperText
{
	text_field caption
	{
		text text = "Books"
		style = "caption"
	}
	
	text_field descr
	{
		text text = "Acquiring and improving our knights' skills, as well as adopting traditions, requires books."
		style = "flavor_text"
		width = 400
	}
	
	text income_and_expenses = $[
		"{section_header}Income:{/section_header} {kingdom_books_income:bonus}{books_icon}{p}"
		"[{section_header}Expenses:{/section_header} {kingdom_books_expenses:nonzero:penalty_no_sign}{books_icon}]"
	]
	
	text balance = "[{kingdom_books_expenses:nonzero:if}{section_header}Balance:{/section_header} {kingdom_books_balance:bonus:F0}{books_icon}]"
	
	text capacity = "{section_header}Capacity:{/section_header} {max_books}{books_icon}"
	
	text_field gold_from_excess_books
	{
		text text = "[We even make a small profit ({kingdom.gold_from_excess_books:nonzero:bonus}{gold_icon}) from our scholars and scribes, teaching foreigners and selling books.]"
		//style = "flavor_text"
		width = 400
	}
	
	text prompt = "{i}Click to see more details.{/i}"
}


def KingdomPietyTooltipHT : TooltipHyperText
{
	text_field caption
	{
		text text = "Religion"
		style = "caption"
	}
	
	text_field descr
	{
		text text = "Religious power enables the {kingdom.cleric_title:s} of our kingdom to perform their actions in support of the crown."
		style = "flavor_text"
		width = 400
	}
	
	text religion_type = "{section_header}Kingdom Religion:{/section_header} {religion.full_name}"
	
	text income_and_expenses = $[
		"{section_header}{religion.piety} income:{/section_header} {kingdom_piety_income:bonus}{piety_icon}{p}"
		"[{section_header}{religion.piety} expenses:{/section_header} {kingdom_piety_expenses:nonzero:penalty_no_sign}{piety_icon}]"
	]
	
	text balance = "[{kingdom_piety_expenses:nonzero:if}{section_header}Balance:{/section_header} {kingdom_piety_balance:bonus:F0}{piety_icon}]"
	
	text capacity = "{section_header}Capacity:{/section_header} {max_piety}{piety_icon}"
	
	text_field gold_from_excess_piety
	{
		text text = "[We even make a small profit ({kingdom.gold_from_excess_piety:nonzero:bonus}{gold_icon}) from our exuberant {religion.piety} and culture, attracting pilgrims and travelers.]"
		//style = "flavor_text"
		width = 400
	}
	
	text prompt = "{i}Click to see more details.{/i}"
}

def KingdomTradeTooltipHT : TooltipHyperText
{
	text_field caption
	{
		text text = "Commerce"
		style = "caption"
	}
	
	text_field descr
	{
		text text = "Used for maintaining trade activities with other kingdoms and colonies."
		style = "flavor_text"
		width = 400
	}
	
	text sources = $[
		"{section_header}Sources:{/section_header} {max_commerce:bonus}{p}{section_body}"
		"{blt} Base: {ks_base_commerce:bonus}{trade_icon}{p}"
		"{blt} Royal lands: {incomes.trade.ROYAL_LANDS:bonus}{trade_icon}{p}"
		"{blt} Ungoverned provinces: {incomes.trade.NON_ROYAL_LANDS:bonus}{trade_icon}{p}"
		"{blt} Religion: {ks_commerce_religion:bonus}{trade_icon}{p}"
		"{blt} Goods: {ks_commerce_goods:bonus}{trade_icon}{p}"
		//"{blt} Mission In Rome: {incomes.trade.Kingdom.CalcMissionInRomeTradeIncome:bonus}{trade_icon}{p}"
		//"{blt} Mission In Constantinople: {incomes.trade.Kingdom.CalcMissionInConstantinopleTradeIncome:bonus}{trade_icon}{p}"
		"{/section_body}"
	]
	
	text upkeep = $[
		"{section_header}Upkeep:{/section_header} {allocated_commerce:penalty_no_sign}{p}{section_body}"
		"{blt} Trade with kingdoms: {allocatedCommerceForTraders:penalty_no_sign}{trade_icon}{p}"
		"{blt} Goods import: {allocatedCommerceForImportGoods:penalty_no_sign}{trade_icon}{p}"
		"{blt} Food export: {allocatedCommerceForExportFood:penalty_no_sign}{trade_icon}{p}"
		"{blt} Food import: {allocatedCommerceForImportFood:penalty_no_sign}{trade_icon}{p}"
		"{blt} Expeditions: {allocatedCommerceForExpeditions:penalty_no_sign}{trade_icon}{p}"
		"{/section_body}"
	]
	
	text agreements_and_merchants = $[
		"{section_header}Trade agreements signed:{/section_header} {trade_agreements_signed}{p}"
		"{section_header}Own merchants trading:{/section_header} {trading_merchants_count} / {merchants_count}"
	]
}

def KingdomFoodTooltipHT : TooltipHyperText
{
	text_field caption
	{
		text text = "Food income"
		style = "caption"
	}
	
	text_field descr
	{
		text text = "Lack of food results in revolt risk, slower population growth and slower filling of towns' reserves."
		style = "flavor_text"
		width = 400
	}
	
	text income_and_expenses = $[
		"{section_header}Food production:{/section_header} {food_produced:bonus:F1}{food_icon}{p}"
		"{section_header}Import food:{/section_header} {food_import_amount:bonus:F1}{food_icon}{p}"
		"{section_header}Export food:{/section_header} {food_export_amount:penalty_no_sign:F1}{food_icon}{p}"
		"{section_header}Armies upkeep:{/section_header} {armies_upkeep_food:penalty_no_sign:F1}{food_icon}{p}"
		"{section_header}Garrison upkeep:{/section_header} {garrison_upkeep_food:penalty_no_sign:F1}{food_icon}{p}"
	]
	
	//text balance = "{section_header}Kingdom food:{/section_header} {food:bonus}{food_icon}"
	
	text sufficiency = "Sufficiency: {sufficent_food:F0}%"
}

def KingdomLevyTooltipHT : TooltipHyperText
{
	text_field caption
	{
		text text = "Kingdom levies"
		style = "caption"
	}
	
	text_field descr
	{
		text text = "Kingdom's men, who have received military training and are ready to be mobilized as soldiers when such need arises. These are required and spent for recruiting non-militia squads and army equipment."
		style = "flavor_text"
		width = 400
	}
	
	text income_and_expenses = $[
		"{section_header}Base income:{/section_header} {kingdom.ks_base_levy_income:bonus:F1}{levy_icon}{p}"
		"{section_header}Royal Lands:{/section_header} {kingdom.incomes.levy.ROYAL_LANDS:bonus:F1}{levy_icon}{p}"
		"{section_header}Provinces:{/section_header} {kingdom.incomes.levy.NON_ROYAL_LANDS:bonus:F1}{levy_icon}{p}"
	]
	
	text capacity = "{section_header}Capacity:{/section_header} {max_levy}{levy_icon}"
	
	text_field gold_from_excess_levy
	{
		text text = "[We even make a small profit ({kingdom.gold_from_excess_levy:nonzero:bonus}{gold_icon}) from our capability to train and equip more soldiers than we need - mercenaries and soldiers come to trade and buy arms in our cities.]"
		//style = "flavor_text"
		width = 400
	}
}

def PaganBeliefBonusesHT : TooltipHyperText
{
	cs_class = "Religions"
	setup = "SetupHTBeliefBonuses"
	
	padding
	{
		top = 0
		bottom = 0
		left = 0
	}
	
	row bonuses_text
	{
		padding
		{
			left = 0
		}
		hypertext bonuses_text
		{
			text_field caption
			{
				spacing = 10
				text text = "{p}Bonuses:"
				//style = "flavor_text"
				alignment = "left"
			}
		}
	}
	
	row bonuses
	{
		hypertext bonuses
		{
			//text_font_size = 16
			spacing { vertical = 8 }
			
			text_field text
			{
				text text = "{clr:tradition_bonus}{bonuses_text}{/clr}"
				color = (SkillTooltip.clr_active)
			}
		}
		
	}
}

def PaganBeliefTooltipHT : TooltipHyperText
{
	row caption
	{
		alignment = "center"
		sprite icon : rounded_icon = (Pagan[obj].icon)
		{
			size = 50,50
			optional = true
		}
		text_field caption
		{
			validate = (obj != null)
			text text = "{belief}"
			style = "caption"
			//alignment = "left"
		}
	}
	
	separator header_separator
	{
		validate = (obj != null)
	}
	
	text_field descr
	{
		validate = (obj == null)
		text text = "Select one of your shamans in the royal court to adopt a belief."
		style = "flavor_text"
	}
	
	hypertext section : PaganBeliefBonusesHT
	{
		validate = (obj != null)
	}
	
	// separator footer_separator
	
	// row footer
	// {
	// 	padding
	// 	{
	// 		bottom = 4
	// 	}
	
	// 	spacing = 0
	
	// 	text_font_size = 15
	
	// 	text_field cost_text
	// 	{
	// 		text text = "Cost: {belief.cost}[{alt:if} {prepare_duration} sec]"
	// 	}
	
	// 	space space { flexible_width = 10000 }
	
	// 	text_field upkeep_text
	// 	{
	// 		text text = "[Upkeep: {belief.upkeep:upkeep}]"
	// 		alignment = "right"
	// 	}
	// }
}


def PaganBeliefStatusTooltipHT : TooltipHyperText
{
	padding
	{
		top = 18
		bottom = 12
		left = 8
		right = 8
	}
	
	row caption
	{
		alignment = "center"
		sprite icon : rounded_icon = (Pagan[beliefKey].icon)
		{
			size = 50,50
			//frame { color = "186,163,59" }
			optional = true
		}
		text_field caption
		{
			text text = "Promoting {belief}"
			style = "caption"
			//alignment = "left"
		}
	}
	
	separator header_separator
	
	row description
	{
		spacing = 10
		text_field desc
		{
			text text = "{own_character} is promoting {belief} to the people of {kingdom}."
			style = "flavor_text"
			alignment = "left"
			width = 400
		}
	}
	
	hypertext section : PaganBeliefBonusesHT
	
	row change
	{
		spacing = 10
		text_field desc
		{
			//text text = "{p}{i}Upkeep: {current_upkeep}{gold_icon}[{p}{p}{can_promote:if}Click to change or abandon that belief.|{p}{p}{clr:red}{owner} cannot change or abandon a belief while he is busy with other tasks or leads an army.{/clr}]{/i}"
			text text = "{p}{p}[{can_promote:if}{i}Click to change or abandon that belief.|{clr:red}{owner}{i} cannot change or abandon a belief while he is busy with other tasks.{/i}{/clr}]{/i}"
			style = "flavor_text"
			alignment = "left"
			width = 400
		}
	}
	
	separator footer_separator
	{
		validate = (current_upkeep || false)
	}
	
	row footer
	{
		// padding
		// {
		// 	bottom = 4
		// }
		
		spacing = 0
		
		text_font_size = 15
		
		space space { flexible_width = 10000 }
		
		text_field upkeep_text
		{
			text text = "[Upkeep for promoted beliefs: {current_upkeep}{gold_icon}]"
			alignment = "right"
		}
	}
	
	// row cost //there is no cost here, as there are two possible actions with different cost
	// {
	// 	spacing = 10
	// 	text_field desc
	// 	{
	// 		text text = "Cost: {cost}"
	// 		style = "flavor_text"
	// 		alignment = "right"
	// 		width = 400
	// 	}
	// }
}

def KingdomAdvantageTooltipHT : TooltipHyperText
{
	cs_class = "UIKingdomAdvantage"
	setup = "SetupHTAdvantage"
	
	text_field caption
	{
		text text = "{name}"
		style = "caption"
	}
	
	row description
	{
		text_field desc
		{
			text text = "{description}"
			style = "flavor_text"
			width = 400
		}
	}
	
	text bonuses = "{section_header}Bonuses:{/section_header}{p}{section_body}{clr:tradition_bonus}{bonuses_text}{/clr}{/section_body}"
	
	text requires = "[{section_header}Goods required:{/section_header}{p}{section_body}{soft_requirements}{/section_body}]"
	text requires_religion = "[{section_header}Religion required:{/section_header}{p}{section_body}{hard_requirements}{/section_body}]"
	text requires_or = "[{section_header}Requires at least one of the following:{/section_header}{p}{section_body}{hard_requirements_or}{/section_body}]"
}

def ViewModeLegendTooltipHT : TooltipHyperText
{
	legend_icon_frame = "Assets/UI/Elements/Minimap/Legend/Element_Minimap_Legend_Background.psd:Element_Minimap_Legend_Background#2" //GUID:ee621bb039a3e294d9b7fbef169c1d88
	{
		color color = "white"
	}
	
	padding
	{
		top = 18
		bottom = 18
		left = 18
		right = 18
	}
	
	row caption
	{
		text_field caption
		{
			text text = "{name} legend"
			style = "caption"
			//alignment = "left"
		}
	}
	
	row description
	{
		spacing = 10
		{
			horizontal = 8
		}
		
		text_field desc
		{
			text text = "{description}"
			style = "flavor_text"
			alignment = "left"
			width = 400
		}
	}
	
	rows effects = (legend)
	{
		alignment = "center"
		spacing = 4
		
		sprite icon = (icon)
		{
			size = 28,28
			color = (icon_color_primary)
			frame : legend_icon_frame
		}
		
		text_field effect_text
		{
			text text = "{text}"
			font_size = 15
			width = (text_width || 315)
			color color = "#e1c69b"
		}
		
		sprite second_effect_icon = (second_icon)
		{
			validate = (second_icon || false)
			size = 28,28
			color = (second_icon_color_primary)
			frame : legend_icon_frame
		}
		
		text_field second_effect_text
		{
			validate = (second_text || false)
			text text = "{second_text}"
			font_size = 15
			width = (second_text_width || 150)
			color color = "#e1c69b"
		}
		
		
	}
}

def ObjectiveScoreTooltipHT : TooltipHyperText
{
	cs_class = "UIInGameObjectivesAndRules"
	setup = "SetupHTObjectiveScores"
	
	padding
	{
		top = 18
		bottom = 12
		left = 8
		right = 8
	}
	
	row caption
	{
		text_field caption
		{
			text text = "{rule_name}"
			style = "caption"
		}
	}
	
	rows sections = (vars.score_types)
	{
		text_field description
		{
			text text = $[
				"{instance.name}: {instance.description}"
				"{p}{p}"
				"{b}{blt} Your {instance.name}:{/b} {instance.player_score}"
				"[{p}{player_has_team:if}{b}{blt} Team {name}:{/b} {instance.team_score}]"
			]
			width = 400
		}
	}
	
	
	separator footer_separator
	{
		validate = (player_has_team || false)
	}
	
	row footer
	{
		spacing = 0
		text_font_size = 15
		validate = (player_has_team || false)
		text_field team_totals
		{
			text text = $[
				"{b}Your total score:{/b} {total_score_player}"
				"{p}{b}Team total score:{/b} {total_score_team}"
			]
		}
	}
}