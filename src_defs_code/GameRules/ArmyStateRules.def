// --- RULE DESCRIPTION ---
// Army enters disorganized state upon various navigational events in world-view movement. Applies various temporary debuffs (if re-applied, resets timeout)
def ArmyDisorganizedRule : GameRule
{
	//log = 1
	target { character c }

	start_triggers
	{
		character army_river_or_island_crossing
		character army_moved_embark_disembark 
	}

	stop_triggers
	{
		character battle_won
		character battle_lost
		character battle_retreat
		character finishing
		character ArmyDisorganizedRule.AttemptRemoveDisorganizedState
	}

	condition start = (c.is_valid && c.kingdom.ks_disorganized_state_disable = 0 && AreEnemies(c, c.army.realm_in))  //AreNeutral, AreAllies, AreAlliesOrOwn, AreOwn
	condition stop = true

	mod cs_army_stamina_perc = -10
	{
		text mod_name = "Disorganized"
	}
	mod cs_defense_flat = -10
	{
		text mod_name = "Disorganized"
	}
	mod cs_army_speed_world_perc = -20
	{
		text mod_name = "Disorganized"
	}

	outcomes
	{
		main disorganize_target_army
	}

	stop_outcomes
	{
		main undisorganize_target_army
	}

	timer AttemptRemoveDisorganizedStateTimer = 30
	{
	}

	rule AttemptRemoveDisorganizedState
	{
		triggers
		{
			character ArmyDisorganizedRule_AttemptRemoveDisorganizedStateTimer
			{
				condition = (sender = c)
			}
		}
		condition execute = (c.army.battle = null)
	}
}

def ArmySuppliesLowRule : GameRule
{
	//log = 1
	target { character c }

	triggers 
	{
		character player_army_update
	}

	log army_supples = (c.army.supplies)
	condition active = (c.is_valid && army_supples < 30 && !c.army.is_mercenary && !c.army.is_crusader && !c.army.is_rebel && c.army.supplies_rate < 0)

	outcomes
	{
		main no_money //system outcome that has no effect - TEMPORARY!!! Replace with somethig better (or even better - no outcome)
		{
			message
			{
				case src_kingdom
				{
					def = ArmyHungerWarningMessage
					goto_target = (c.army)
				}
			}
		}
	}
}

def ArmyStarvingRule : GameRule
{
	target { character c }

	//log = 1
	triggers
	{
		character army_is_starving
	}

	stop_triggers
	{
		character exiled
		character dying
		character imprisoned
		character finishing
		character army_is_starving
	}

	condition active = (trigger.param && !c.is_rebel && c.army != null && c.is_valid)

	//mod cs_army_morale = -3 { text mod_name = "Hunger" } // stats handle this // do they though?
	mod cs_army_stamina_perc = -20
	{
		text mod_name = "Starving"
	}

	outcomes
	{
		main starve_target_army = 100
		{
			message
			{
				case src_kingdom
				{
					def = ArmyStarvingMessage
					goto_target = (c.army)
				}
			}
		}
	}

	stop_outcomes
	{
		main unstarve_target_army = 100
	}

	timer ArmyRevoltTimer = 360/600
	{
		// think about adding some initial down-time, so this doesn't trigger immediately?
		//then interval might be shorter
		outcomes
		{
			main turn_target_into_rebel = (20 - c.kingdom.stability) * (!c.army.battle)
		}
	}
}