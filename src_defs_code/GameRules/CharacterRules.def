
def TheirKnightStoppedGoverningRumorRule: RumorRule
{
	target 
	{ 
		character c
	}
	triggers { character stoped_governing }

	var previously_governed_realm = (start_trigger.param)

	condition execute = true
}

def RebelReleasedRule: RumorRule
{
	target 
	{ 
		character c
	}
	triggers 
	{ 
		character free_prisoner_prisoner_trigger 
		{
			condition = (sender.is_rebel && !IsInCourt(param, sender))
		}
	}

	var rebel_chance = (MapCA(start_trigger.param, 50, 10, 0)) //save the chance before the CA change in the outcomes
	var kingdom = (start_trigger.param)

	condition start = true
	condition stop = true

	stop_triggers
	{
		character dying
		character finishing
	}

	outcomes
	{
		also crown_authority = "release_non_court_rebel"
		{
			src_kingdom = (start_trigger.param)
		}
		trigger free_non_court_rebel_prisoner_trigger
		{
			target = (start_trigger.param)
			param = (start_trigger.sender)
		}
	}

	timer Timer = 180/300
	{ 
		max_ticks = 1
		stop_parent = true
		outcomes
		{		
			main turn_target_into_rebel = (rebel_chance)
			{
				target = (start_trigger.sender)
				realm = (kingdom.random_weighted_rebellious_realm)
				message
				{
					case kingdom = (start_trigger.param == player)
					{
						def = FormerReleasedRebelBetrayal
						goto_target = (c.army)
					}
				}
			}
			option destroy_target
		}
		
	}
}


def RebelForgiveRule: RumorRule
{
	target 
	{ 
		character c
	}
	triggers 
	{ 
		character free_prisoner_prisoner_trigger 
		{
			condition = (sender.is_rebel && (IsInCourt(param, sender) || IsRoyalRelative(param, sender)))
		}
	}
	condition execute = true
	outcomes
	{
		also join_rebel
		{
			target = (start_trigger.sender)
			kingdom = (start_trigger.param)
		}
		also crown_authority = "forgive_court_rebel"
		{
			src_kingdom = (start_trigger.param)
			rebel = (start_trigger.sender)
		}
		trigger free_court_rebel_prisoner_trigger
		{
			target = (start_trigger.param)
			param = (start_trigger.sender)
		}
	}
}


def RebelExecutedRule: RumorRule
{
	target 
	{ 
		character c
	}

	triggers 
	{ 
		character execute_prisoner_prisoner_trigger 
		{
			condition = (sender.is_rebel && !IsInCourt(param, sender))
		}
	}

	condition execute = true

	outcomes
	{
		also crown_authority = "execute_rebel"
		{
			src_kingdom = (start_trigger.param)
		}
		also give_gold = (map(c.class_level, 0, 15, 100, 1000))
		{
			kingdom = (start_trigger.param)
		}
		trigger execute_non_court_rebel_prisoner_trigger
		{
			target = (start_trigger.param)
			param = (start_trigger.sender)
		}
	}
}

def ExecuteCourtRebelRule: RumorRule
{
	target 
	{ 
		character c
	}
	triggers 
	{ 
		character execute_prisoner_prisoner_trigger 
		{
			condition = (sender.is_rebel && IsInCourt(param, sender))
		}
	}

	condition execute = true

	outcomes
	{
		also crown_authority = "execute_rebel"
		{
			src_kingdom = (start_trigger.param)
			rebel = (start_trigger.sender)
		}
		also give_gold = (map(c.class_level, 0, 15, 200, 2000))
		{
			kingdom = (start_trigger.param)
		}
		trigger execute_court_rebel_prisoner_trigger
		{
			target = (start_trigger.param)
			param = (start_trigger.sender)
		}
	}
}


def ExecuteExileOrMercenaryRule: RumorRule
{
	target 
	{ 
		character c
	}
	triggers 
	{ 
		character execute_prisoner_prisoner_trigger 
		{
			condition = (sender.is_exiled || sender.is_mercenary)
		}
	}

	condition execute = true

	outcomes
	{
		also give_gold = (map(c.class_level, 0, 15, 200, 2000))
		{
			kingdom = (start_trigger.param)
		}
		trigger execute_exile_prisoner_trigger
		{
			target = (start_trigger.param)
			param = (start_trigger.sender)
		}
		trigger execute_mercenary_prisoner_trigger
		{
			target = (start_trigger.param)
			param = (start_trigger.sender)
		}
	}
}


