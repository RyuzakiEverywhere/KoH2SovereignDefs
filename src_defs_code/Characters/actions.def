def CharacterAction : Action
{
	owner_type = "Character"
	voice_from_character = true
	prepare_voice_line = "confirm_action"
	prefab progress_window = "Assets/UI/Character/UIP_ActionProgressInfo_CancelOnly.prefab" //GUID:7ea183db33876d740a2e4bab8420553f
	bool update_message_text = false
}

def ArmyAction : CharacterAction
{
	while_leading_army = true
	expense_category = "Military"
}

// ---------- GENERAL (all classes) ------------

def HireAction : CharacterAction
{
	name = "Hire"
	tooltip = "Hire {owner}"
	target = "own_town"
	secondary = true
	
	voice_from_character = true
	prepare_voice_line = "hire_voice_line"
}

def ExileMessage : Message
{
	caption = "Exile?"
	body = "Are you sure you want to exile {owner}?{p}{tab}{blt} The opinion of some groups will be lowered.{p}{tab}{blt} {owner} will be lost forever."
	buttons
	{
		text ok = "&Yes"
		text cancel = "&Nevermind"
	}
}

def RenounceMessage : Message
{
	caption = "Renounce?"
	body = "Are you sure you want to renounce {owner}? He will no longer be considered as a knight of your kingdom and the opinion of some groups will be lowered."
	buttons
	{
		text ok = "&Yes"
		text cancel = "&Nevermind"
	}
}

def ExileAction : CharacterAction
{
	name = "Exile"
	tooltip = "Exile {owner}"
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_Exile.tga:Icon_CharacterAction_Exile#2" //GUID:0a4a6a451a600da4294fae7aca57048d
	show_in_action_bar = false
	show_in_character_widnow = true
	confirmation_message = ExileMessage
	
	voice_from_character = true
	case is_crusader = (owner.is_crusader)
	{
		prepare_voice_line = "exile_crusader"
	}
	case default
	{
		prepare_voice_line = "Exile"
	}
}

def ConfirmForgetKnight : Message
{
	caption = "Forget knight"
	body = "Are you sure you wish to forget {obj}? You will no longer be able to assign a replacement leader for his army."
	buttons
	{
		text ok = "&Confirm"
		text cancel = "&Cancel"
	}
}

def ForgetCharacterAction : CharacterAction
{
	name = "Forget"
	tooltip = "Forget {owner} and vacate his place in the royal court."
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_Forget.tga:Icon_CharacterAction_Forget#2" //GUID:89854fea66d516144a0b91e95e0b353a
	show_in_action_bar = true
	show_in_character_widnow = true
	confirmation_message = ConfirmForgetKnight
	prepare_voice_line = ""
	
	ai_validate = (!owner.reveal_kingdom)
}

def RecallAction : CharacterAction
{
	name = "Recall"
	tooltip = $["Order {owner} to return to court."
				"[{is_trading:if}{p}{p}If we ever send a merchant in {owner.mission_kingdom} again, he will have to start over building up our trade relations. ]"
				"[{is_importing_food:if}{p}That will also interrupt our food import.]"
				"[{is_exporting_food:if}{p}We will no longer export food there as well.]"
				"[{is_importing_goods:if}{p}As this will stop the import of certain goods, it might stall the work in some of our buildings and upgrades.]"
				
				"[{is_on_spy_mission:if}{p}{p}He will lose all of his current opportunities and will no longer be able to continue his dealings in {owner.mission_kingdom}.]"
				"[{is_having_puppets:if} His control over all of his puppets will also be lost.]"
                
				"[{is_improving_relations:if}{p}{p}He will cease improving our relations with {owner.mission_kingdom}, but everything he has achieved so far will not be lost.]"
        	   ]
	
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_Recall.tga:Icon_CharacterAction_Recall#2" //GUID:1a3a6eb9e4802de4b856d5617ec01615
	prepare_duration = 15
	prepare_status_text = "{owner} is returning to the royal court"
	voice_from_character = true
	prepare_voice_line = "Recall"
	can_be_canceled = false
	ui_order = -1
}

def RecallToThroneRoomAction : RecallAction
{
	name = "Back to throne room"
	bool character_is_on_a_mission = (owner.mission_kingdom != null)
	tooltip = "Return {owner} to the throne room[ {character_is_on_a_mission:if}and end his mission in {owner.mission_kingdom}]."
	prepare_status_text = "{owner} is returning to the throne room"
	prepare_duration = 15
	prepare_voice_line = "RecallThroneRoom"
	//prepare_status_text = ""
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_BackToThroneRoom.tga:Icon_CharacterAction_BackToThroneRoom#2" //GUID:ca400a7b0783955488385a7362fec636
	ui_order = -1
}

def ReplaceGovernorMessage : Message
{
	caption = "Replace governor?"
	body = "{target} is already governed by {target.governor}. Are you sure you want to replace him?"
	buttons
	{
		text ok = "&Replace him"
		text cancel = "&Nevermind"
	}
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_AssignNewGovernCity.png:Icon_CharacterAction_AssignNewGovernCity#2" //GUID:87dbf14312643a744b2dbc563c6363e2
}

def GovernCityAction : CharacterAction
{
	name = "Govern [{target}|City]"
	//negative_authority = (kingdom.crown_authority < 0)
	//tooltip = "[{negative_authority:if}{clr:active_penalty}The action is unavailable while Crown authority is negative{/clr}|Assign {owner} to govern one of your cities]"
	tooltip = "Assign {owner} to govern [{target}|one of your towns]"
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_Govern.tga:Icon_CharacterAction_Govern#2" //GUID:338137d863daedb42a04be7c2e790fa2
	
	// cost // !!! removed since it is not visualized
	// {
	// 	gold = ((50 + (own_character.class_level * 100)) * (1 + min(3,own_kingdom.num_wars)) * !own_character.is_king_or_prince)
	// }
	// int min_crown_authority = 0 // obsolete !!!
	
	target_vars
	{
		tooltip_def = "ChooseCastleToGovernTooltip"
	}
	
	prepare_duration = 60
	prepare_status_text = "{owner} is preparing his government of {target} ({target.realm.province_name} province)."
	
	voice_from_character = true
	prepare_voice_line = "Govern"
	decline_voice_line = "Decline"
	cancelled_voice_line = "GovernPrepInterrupted"
	//target_select_table = GovernActionTargetTable
	target = "own_realm"
	secondary = true
	show_in_action_bar = false
	show_in_character_widnow = true
	show_in_status = NotGoverningStatus
	target_confirmation_message = ReplaceGovernorMessage
	
	//ai_validate = (!govern_target)
	//ai_eval_target = (!target.target_governor and target.realm.income_gold)
	
	cancel_events
	{
		target_realm disorder_state_changed
		target_realm kingdom_changed
		target_realm governed
		target_realm battle_started
		owner dying
		owner imprisoned
	}
	
	cancelled_message_caption = "Govern preparations interrupted"
	cancelled_message_texts
	{
		text disorder_state_changed = "{owner} had to abandon his governing attempts, following the sudden onset of disorder in {target}."
		text kingdom_changed = "As we lost contol over {target}, {owner} had to abandon his preparations to govern the province. He is back in our royal court."
		text governed = "{owner} may no longer govern {target}, as {target.castle.governor} now oversees the province instead."
		text battle_started = "{owner} was forced to put a hasty end to his governing preparations in {target}, as the town is besieged by {target.castle.battle.attacker.kingdom:ian} troops!"
	}
	
	validate_prompts
	{
		text _no_possible_targets = "{clr:red_bright}All our provinces are occupied.{/clr}"
		text imprisoned = "{clr:red_bright}[{owner} is] imprisoned!{/clr}"
	}
}

def ReassignGovernCityAction : CharacterAction
{
	name = "Reassign Governing[ to {target}]"
	//negative_authority = (kingdom.crown_authority < 0)
	//tooltip = "[{negative_authority:if}{clr:active_penalty}The action is unavailable while Crown authority is negative{/clr}|Reassign {owner} to another city]"
	tooltip = "Reassign {owner} to [{target}|another city]"
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_ReassignGovernCity.tga:Icon_CharacterAction_ReassignGovernCity#2" //GUID:8ffb7ee89b69f10468a1470ade334789
	target = "own_realm"
	// cost // !!! removed since it is not visualized
	// {
	// 	gold = ((50 + (own_character.class_level * 100)) * (1 + min(3,own_kingdom.num_wars)) * !own_character.is_king_or_prince)
	// }
	
	target_vars
	{
		tooltip_def = "ChooseCastleToGovernTooltip"
	}
	
	int min_crown_authority = 0
	prepare_duration = 60
	prepare_voice_line = "Govern"
	decline_voice_line = "Decline"
	cancelled_voice_line = "GovernPrepInterrupted"
	secondary = true
	show_in_action_bar = false
	show_in_character_widnow = true
	show_in_status = GoverningStatus
	target_confirmation_message = ReplaceGovernorMessage
	
	cancel_events
	{
		target_realm disorder_state_changed
		target_realm kingdom_changed
		target_realm governed
		target_realm battle_started
		owner dying
		owner imprisoned
	}
	
	cancelled_message_caption = "Govern preparations interrupted"
	cancelled_message_texts
	{
		text disorder_state_changed = "{owner} had to abandon his governing attempts, following the sudden onset of disorder in {target}."
		text kingdom_changed = "As we lost contol over {target}, {owner} had to abandon his preparations to govern the province. He is back in our royal court."
		text governed = "{owner} may no longer govern {target}, as {target.governor} now oversees the province instead."
		text battle_started = "{owner} was forced to put a hasty end to his governing preparations in {target}, as the town is besieged by {target.castle.battle.attacker.kingdom:ian} troops!"
	}
	
	validate_prompts
	{
		text _no_possible_targets = "{clr:red_bright}This is the only province we control.{/clr}"
		text imprisoned = "{clr:red_bright}[{owner} is] imprisoned!{/clr}"
	}
}

def AssignNewGovernCityAction : CharacterAction
{
	name = "Assign New Governing"
	//negative_authority = (kingdom.crown_authority < 0)
	//tooltip = "[{negative_authority:if}{clr:active_penalty}The action is unavailable while Crown authority is negative{/clr}|Assign {owner} to govern another city]"
	tooltip = "Assign {owner} to govern another city"
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_AssignNewGovernCity.png:Icon_CharacterAction_AssignNewGovernCity#2" //GUID:87dbf14312643a744b2dbc563c6363e2
	target = "own_realm"
	// cost // !!! removed since it is not visualized
	// {
	// 	gold = ((50 + (own_character.class_level * 100)) * (1 + min(3,own_kingdom.num_wars)) * !own_character.is_king_or_prince)
	// }
	int min_crown_authority = 0
	prepare_duration = 60
	prepare_voice_line = "Govern"
	decline_voice_line = "Decline"
	cancelled_voice_line = "GovernPrepInterrupted"
	secondary = true
	show_in_action_bar = false
	show_in_character_widnow = true
	show_in_status = BanishedGovernorStatus
	target_confirmation_message = ReplaceGovernorMessage
	
	cancel_events
	{
		target_realm disorder_state_changed
		target_realm kingdom_changed
		target_realm governed
		target_realm battle_started
		owner dying
		owner imprisoned
	}
	
	cancelled_message_caption = "Govern preparations interrupted"
	cancelled_message_texts
	{
		text disorder_state_changed = "{owner} had to abandon his governing attempts, following the sudden onset of disorder in {target}."
		text kingdom_changed = "As we lost contol over {target}, {owner} had to abandon his preparations to govern the province. He is back in our royal court."
		text governed = "{owner} may no longer govern {target}, as {target.governor} now oversees the province instead."
		text battle_started = "{owner} was forced to put a hasty end to his governing preparations in {target}, as the town is besieged by {target.castle.battle.attacker.kingdom:ian} troops!"
	}
}


def StopGoverningMessage : Message
{
	caption = "Stop governing?"
	body = "Are you sure you want to stop {owner} from governing {owner.governed_castle}?"
	buttons
	{
		text ok = "&Yes"
		text cancel = "&Nevermind"
	}
}

def StopGoverningAction : CharacterAction
{
	name = "Stop Governing"
	tooltip = "Stop {owner} from governing {owner.governed_castle}"
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_StopAction.tga:Icon_CharacterAction_StopAction#1" //GUID:9fc339caa7b06dc41bdd4d2c34bd58f5
	secondary = true
	show_in_action_bar = false
	show_in_character_widnow = true
	show_in_status = GoverningStatus
	confirmation_message = StopGoverningMessage
	decline_voice_line = "Decline"
	prepare_voice_line = "StopGoverning"
}

// def IncreaseRankAction : CharacterAction
// {
// 	name = "Educate"
// 	tooltip = "Educate {owner}[ to {next_rank_name}]"
// 	icon = "Assets/UI/Elements/Common/WindowElements/UI_Icon_Star.png:UI_Icon_Star#2" //GUID:d8e90208f71240741a6700de020437d2
// 	prepare_sound_effect = ""

// 	cost
// 	{
// 		stars = 1
// 	}

// 	secondary = true
// 	show_in_action_bar = false
// 	prepare_duration = 0
// }

def LearnNewSkillAction : CharacterAction
{
	name = "Learn skill"
	tooltip = "Have {owner} learn a new skill"
	icon = "Assets/UI/Elements/Common/Icons/Icon_Acttion_Educate.png:Icon_Acttion_Educate#2" //GUID:d7c9bcdcbc02f3641a626c0d1e245bd7
	
	switch_value = (owner.is_prince)
	case 1
	{
		prepare_sound_effect = "event:/sound_effects/interaction/learn_skill"
	}
	case default
	{
		prepare_sound_effect = "event:/sound_effects/interaction/learn_skill"
	}
	
	prepare_voice_line = "learn_skill_voice_line"
	decline_voice_line = "Decline"
	
	args = ["skill"]
	
	voice_from_character = true
	//done_voice_line = "Educate"
	
	cost = (learn_cost)
	
	
	secondary = true
	show_in_action_bar = false
	show_in_character_widnow = true
	prepare_duration = 0
	prepare_status_text = "{owner} is learing"
	
	text picker_text = "{name}"
	text learn_cost_text = "{learn_cost}"
	// n1 = 10
	// n2 = -20
	
	// _outcomes
	// {
	// 	main success = 100
	// 	{
	// 		text message = "{owner} studied hard, and educated successfully, blah, blah, blah"
	// 		text bullet = "skill points: {n1:bonus} or {n2:bonus:%}"
	
	// 		option crit = 50
	// 		{
	// 			text bullet = "{owner} gained an extra skill point"
	// 		}
	// 	}
	// 	option fail
	// 	{
	// 		message : OutcomeMessageParams
	// 		{
	// 			caption = "Educate failed"
	// 			text = "It appears {owner} is too dumb and failed his education"
	// 		}
	
	// 		option owner_killed = 25
	// 		option owner_imprisoned = 25
	// 		option owner_escaped = 25
	
	// 		also rel_change = "rel_declare_war"
	// 	}
	// }
}
def IncreaseSkillRankAction : CharacterAction
{
	name = "Increase rank"
	tooltip = "Strengthen your practices in {tradition.name} [Cost: {upgarde_cost}]"
	icon = "Assets/UI/Elements/Common/Icons/Icon_Acttion_Educate.png:Icon_Acttion_Educate#2" //GUID:d7c9bcdcbc02f3641a626c0d1e245bd7
	args = ["skill"]
	picker_text = "{name} Cost: {cost}"
	text upgarde_cost_text = "{learn_cost}"
	cost = (upgarde_cost)
	secondary = true
	show_in_action_bar = false
	show_in_character_widnow = true
	prepare_sound_effect = "event:/sound_effects/interaction/learn_skill"
	prepare_voice_line = "skill_level_up_voice_line"
	decline_voice_line = "Decline"
}

def ReadBookAction : CharacterAction
{
	name = "Read a book"
	tooltip = "Have {owner} read a book"
	icon = "Assets/UI/Elements/Common/Icons/Icon_Books.png:Icon_Books#2" //GUID:1995d5c2a4c84c349ab40f4d42ff7a7c
	target = "book"
	secondary = true
	show_in_action_bar = false
	show_in_character_widnow = false
	prepare_duration = 5
}

def DiplomacyBuyABookAction : DiplomatAction
{
	name = "Buy a book"
	tooltip = "{owner} will buy a book from {owner.mission_kingdom}"
	icon = "Assets/UI/Elements/Common/Icons/Icon_Action_Diplomat_Buy_Book.png:Icon_Action_Diplomat_Buy_Book#2" //GUID:979def1ddc54f964ba9e9b313526a45c
	target = "book_mission"
	prepare_status_text = "{owner} is buying a book from {owner.mission_kingdom}."
}

def RemoveRebelFromCourtMessage : Message
{
	caption = "Banish rebel from court"
	body = "Are you sure you want to remove {obj} from the royal court?"
	buttons
	{
		text ok = "&Confirm"
		text cancel = "&Cancel"
	}
}

def RemoveRebelFromCourtAction : CharacterAction
{
	name = "Banish rebel from court"
	tooltip = "Remove {owner} from the royal court"
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_RemoveRebelFromCourt.tga:Icon_CharacterAction_RemoveRebelFromCourt#2" //GUID:21709df515f2bc846b066be6422472dc
	show_in_action_bar = true
	show_in_character_widnow = true
	confirmation_message = RemoveRebelFromCourtMessage
	prepare_voice_line = "RemoveCourtRebel"
}

// ----------------------------------------------------------//
// -----------------------  MARSHAL -------------------------//
// ----------------------------------------------------------//

def GatherArmyAction : CharacterAction
{
	name = "Call To Arms"
	tooltip = "Gather an army for {owner} at one of your cities"
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_CallToArms.tga:Icon_CharacterAction_CallToArms#2" //GUID:4021825c1208b2141a4196298c68cc4a
	target = "own_town_army"
	//prepare_duration = 15
	prepare_status_text = "{owner} is gathering an army in the city of {action.target}"
	
	cost
	{
		gold = (50 + SSum(owner.kingdom, 0.1))
	}
	expense_category = "Military"

	
	validate_prompts
	{
		//text ok = "{clr:green_bright}{HireNobleTooltip.hire_marshal_needs_town}{/clr}"
		text _no_possible_targets = "{clr:red_bright}To gather an army, you need at least one town, which is not attacked or controlled by enemy forces.{/clr}"
	}
	voice_from_character = true
	prepare_voice_line = "Call_To_Arms"
}



def WillDisbandArmyMessage : Message
{
	caption = "Disband army?"
	body = "{owner} is currently leading an army. Are you sure you want to disband it?"
	buttons
	{
		text ok = "&Disband army"
		text cancel = "&Nevermind"
	}
}

def DisbandArmyAction : RecallAction
{
	name = "Disband Army"
	tooltip = "Order {owner} to disband his army and return to court"
	prepare_duration = 15
	prepare_status_text = "{owner} is disbanding his army and returning to the court"
	confirmation_message = WillDisbandArmyMessage
	
	voice_from_character = true
	prepare_voice_line = "Disband_Army"
	
}

def DisbandRoyalMarshalArmyAction : DisbandArmyAction
{
	name = "Back to court"
	tooltip = "Order {owner} to disband his army and return to royal court"
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_Recall.tga:Icon_CharacterAction_Recall#2" //GUID:1a3a6eb9e4802de4b856d5617ec01615
	prepare_status_text = "{owner} is disbanding his army and returning to the royal court"
}

def CampArmyAction : ArmyAction
{
	//ai_validate = true
	cost = (damage_cost)
	name = "Refill army"
	tooltip = "[{is_disorder:if}{owner} can not replenish his army while the city is in disorder.|Order {owner} to recruit new troops for his army.]"
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_RefillArmy.png:Icon_CharacterAction_RefillArmy#2" //GUID:fac21775b7854ee42af7c3e25b157b27
	//prepare_duration = (60 * (0.3 + 0.7 * damage))
	//prepare_status_text = "{owner} is recruiting new troops[ in {owner.army.realm_in}]"
	prepare_sound_effect = "event:/sound_effects/interaction/army/refill"
	prepare_voice_line = "RefillArmy"
	decline_voice_line = "Decline"
	cancel_message = CancelTroopsHealMessage
	
	validate_prompts
	{
		text no_damage = "{clr:red_bright}All troops in this army are in good health and it is at full strength.{/clr}"
	}
}

def HealArmyUnitAction : ArmyAction
{
	//ai_validate = true
	cost = (damage_cost)
	show_in_action_bar = false
	show_in_character_widnow = false
	args = ["int"] // unit slot index 
	name = "Heal unit"
	tooltip = "[{is_disorder:if}{owner} can not recruit troops for this unit while the city is in disorder.|Order {owner} to recruit new troops for this unit.]"
	icon = "Assets/UI/Elements/Common/Icons/Icon_Action_Camp.png:Icon_Action_Camp#2" //GUID:5c58e187e33af194cadf2cad6216c61f
}

// ----------------------------------------------------------//
// ----------------------- MERCHANT -------------------------//
// ----------------------------------------------------------//
def TradeWithKingdomAction : CharacterAction
{
	name = "Trade with [{target}|kingdom]"
	tooltip = "Establish a trade route with [{target}|a kingdom] to profit [{profit:bonus}{gold_icon} ]from commerce."
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_TradeWithKingdom.tga:Icon_CharacterAction_TradeWithKingdom#2" //GUID:dd8072f3bfdda1349be53134a1c8ccfd
	prepare_voice_line = "send_abroad"
	cancel_voice_line = "cancel_action"
	cancelled_voice_line = "action_cancelled"
	success_voice_line = "arrived_abroad"
	fail_voice_line = "action_failed"
	decline_voice_line = "Decline"
	
	target = "trade_route_kingdom"
	prepare_status_text = "{owner} is establishing a trade route with {action.target}."
	
	ai_validate = true
	ai_expense_priority = "Urgent"
	
	text picker_text = "Cost {cost} -> {profit:bonus}{gold_icon}" //"({chance_to_succeed}%) {cost} -> +{profit}{gold_icon}"
	
	float dist_mod = (sqrt(clamp(distance, 1, 100)))
	float rel_mod = (2 ^ (relationship / 1000))
	float chance_to_succeed = 100 //(clamp(round((70 + owner.class_level + owner.is_prince*5 + owner.is_king*10) * rel_mod ),1,100))
	
	cost
	{
		gold = (ceil(50 * dist_mod))
		trade = (commerce)
	}
	
	validate_prompts
	{
		text _no_possible_targets = "{clr:red_bright}We need to sign a trade agreement with another kingdom first.{/clr}"
	}
	
	prepare_duration = (60 * dist_mod / rel_mod)
	
	cancel_events
	{
		target_kingdom kingdom_destroyed
		src_kingdom trade_broken
		{
			cancel_condition = (param == target_kingdom)
		}
	}
	
	cancelled_message_caption = "Trade establishing stopped"
	cancelled_message_texts
	{
		text kingdom_destroyed = "As {target} no longer exists, {owner} was forced to return to our royal court. He is ready to open a trade route with a new kingdom."
		text trade_broken = "As we are no longer trading with {target}, {owner} had to abandon his mission and return to our royal court."
	}
	
	outcomes
	{
		main success = (chance_to_succeed)
		{
			
			// also opinion_change //!!! temporary, for testing
			// {
			// 	opinion = "MerchantsOpinion"
			// 	amount = 1
			// 	reason = "new_trade"
			// }
			
			message
			{
				sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_Merchant_Success.png:UI_Illustration_Merchant_Success#2" //GUID:910cc70f0a089de41bda54f18ff4b3da
				case src_kingdom
				{
					text caption = "Trade with {target} established"
					text text = ["{owner} successfully established a trade route with {target}. Part of his profit is already coming in our treasury.",
								 "The trade between us and {target} has already started under {owner:s} supervision. He will look for even more opportunities for deals while he is there.",
								 "{owner} swiftly arranged all matters, regarding the trade between us and {target}. He believes that he will make even better deals there soon.",
								 "{owner} made sure there will be no obstacles for the flow of goods between us and {target} and is now looking forward for more opportunities there."]
					string sound_effect = "event:/sound_effects/notification/character/merchant_success"
					text bullet = "While our merchant is there, he will look for beneficial opportunities that may arise"
				}
				case target_kingdom
				{
					def = ActionOutcomeMessage
					//sprite icon = "Assets/UI/Elements/msg_icons/Icon_Message_GenericEvent_Neutral.png:Icon_Message_GenericEvent_Neutral#2" //GUID:d1b257a397cd3e2409cb96b95cb01190
					sprite icon = "Assets/UI/Elements/msg_icons/Icon_Message_Opportunity_Merchant_Positive.png:Icon_Message_Opportunity_Merchant_Positive#2" //GUID:c0a0c78658d768948b7c24f18dbf09d1
					text caption = "Foreign merchants have arrived"
					text text = ["We accepted the merchants from {owner.kingdom} and made sure there will be no obstacles to our trade with them.",
								 "With our blessing, merchants from {owner.kingdom} have now set up their shops in our kingdom and are already exploring the trade prospects of our kingdoms."]
				}
			}
		}
		option fail
		{
			message
			{
				case src_kingdom
				{
					text text = ["There were complications and {owner} failed to establish a trade with {target}. He is now back in the royal court, awaiting new orders.",
						   "{owner} and the royal merchant of {target} couldn't agree on some of the details and terms of our trade. We might try to reason with them or just look for other potential partners.",
						   "{owner} couldn't come to an agreement with {target} how to split the expenses for our trade route and for now the whole process is put to a stop.",
						   "It seems that the merchants of {target} were too busy at the moment to deal with {owner} and the trading between our kingdoms couldn't be organized at this point."]
				}
				sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_Merchant_Fail.png:UI_Illustration_Merchant_Fail#2" //GUID:24dbd87b2c2b6f44f84d3fb99e64b96b
			}
		}
		
	}
}

def TradeOpportunity : CharacterAction
{
	mission = "OnMission"
	
	opportunity
	{
		chance_to_add_on_tick = 20
		chance_to_del_on_tick = 20
		activate_message = NewTradeOpportunityMessage
		deactivate_message = null //TradeOpportunityLostMessage //no message
	}
	
	float success_base_chance = 5
	float validation_min_chance = 35 // invalid if chance is not at least this much
	
	success_fail
	{
		sf_base = (success_base_chance)
		{
			text name = "Base chance"
			show_always = false
		}
		sf_class_level = (own_character.class_level * 2)
		{
			text name = "Merchant level (x2)"
		}
		sf_king = (own_character.is_king * 10)
		{
			text name = "Merchant is King"
		}
		sf_relationship = (map(GetRelationship(own_character.kingdom, own_character.mission_kingdom),-1000,1000,-10,10))
		{
			text name = "Our relations"
		}
	}
	
	src_messages
	{
		text new_opportunity = "{tooltip}"
		//text opportunity_lost = "{owner} lost an opportunity: {tooltip}"
		text success = "{owner} suceeded in his task: {name}"
		text fail = "{owner} failed his task: {name}"
	}
	
	outcomes
	{
		main success
		{
			message
			{
				case src_kingdom
				{
					text text = "{src_messages.success}"
					sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_Merchant_Success.png:UI_Illustration_Merchant_Success#2" //GUID:910cc70f0a089de41bda54f18ff4b3da
					string sound_effect = "event:/sound_effects/notification/character/merchant_success"
				}
			}
		}
		option fail
		{
			message
			{
				case src_kingdom
				{
					text text = "{src_messages.fail}"
					sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_Merchant_Fail.png:UI_Illustration_Merchant_Fail#2" //GUID:24dbd87b2c2b6f44f84d3fb99e64b96b
				}
			}
		}
	}
}

def NewTradeOpportunityMessage : Message
{
	icon = "Assets/UI/Elements/msg_icons/Icon_Message_Opportunity_Merchant_Positive.png:Icon_Message_Opportunity_Merchant_Positive#2" //GUID:c0a0c78658d768948b7c24f18dbf09d1
	illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_Merchant_Success.png:UI_Illustration_Merchant_Success#2" //GUID:910cc70f0a089de41bda54f18ff4b3da
	caption = "Trade opportunity: {name}"
	body = "{src_messages.new_opportunity}"
	buttons
	{
		action activate = (action)
		// {
		// 	text text = "&Take it!"
		// }
		
		cancel_opportunity cancel_op
		{
			text text = "&Forget opportunity"
		}
		
		text ok = "&Let me think"
	}
	// ui_prefab = "Assets/UI/Messages/UIP_NewPlotAvailableMessage.prefab" //GUID:1fe9b0b7d73ffe948983be83cb6265ae
	sound_effect = "event:/sound_effects/notification/message/opportunity_default"
}

def TradeOpportunityLostMessage : Message
{
	icon = "Assets/UI/Elements/msg_icons/Icon_Message_Opportunity_Merchant_Negative.png:Icon_Message_Opportunity_Merchant_Negative#2" //GUID:14ceb63c8a78b4d40bcfd924fd8d7135
	caption = "Opportunity lost: {name}"
	body = "{src_messages.opportunity_lost}"
	//sound_effect = "event:/sound_effects/notification/message/opportunity_lost" //sound effect not ready 
}

// def TestTradeOpportunity : TradeOpportunity
// {
// 	name = "Test opportunity"
// 	tooltip = "An opportunity with arguments[ {arg}, {arg1}]"
// 	icon = "Assets/UI/Elements/Common/Icons/Icon_Action_Trade.png:Icon_Action_Trade#2" //GUID:ece3ebf22f6d16a438700ade61500f57
// 	prepare_status_text = "{owner} is testing with {arg}, {arg1}."

// 	args = [ "own_town", "other_kingdom" ]

// 	opportunity
// 	{
// 		chance_to_add_on_tick = 100
// 		chance_to_del_on_tick = 10
// 	}

// 	prepare_duration = 10

// 	src_messages
// 	{
// 		//new_opportunity = "{tooltip}"
// 		opportunity_lost = "{owner} lost the opportunity to test arguments"
// 		success = "{owner} successfully tested with {arg}, {arg1}"
// 		fail = "{owner} failed while testing with {arg}, {arg1}"
// 	}
// }


def ProfitableDealAction : TradeOpportunity
{
	name = "Profitable deal"
	tooltip = "Have {owner} try reselling goods to gain {profit}{gold_icon}"
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_ProfitableDeal.tga:Icon_CharacterAction_ProfitableDeal#2" //GUID:0c9649d21ab73204da1a8298a15b48b2
	prepare_status_text = "{owner} is trying to resell goods to gain {profit}{gold_icon}"
	
	decline_voice_line = "Decline"
	prepare_voice_line = "confirm_action"
	cancel_voice_line = "cancel_action"
	fail_voice_line = "action_failed"
	success_voice_line = "action_succeeded"
	
	int random_income_modifier = [3,7]
	float random_difficulty_modifier = [2, 3]
	float profit = (round(arg * arg1))
	
	
	opportunity
	{
		chance_to_add_on_tick = 10 //often gain, quickly lose
		chance_to_del_on_tick = 50
		cooldown = 300
	}
	
	validation_min_chance = 30 //temporary reduced, since now beneficial factors (0 to 40 are added) - was 40
	
	success_base_chance = 10 //temporary reduced by 40 to avoid buggy behavior
	success_fail
	{
		sf_trading_skill_level = (5 * GetSkillRank(own_character, "Trading"))
		{
			text name = "{own_character:s} trading skill level"
		}
		sf_risk_factor = (20 * (3.5 - arg1)) //temporary increased +40 (it is 0 to 40 now, was -40 to 0) to avoid buggy behavior
		{
			text name = "Beneficial factors" //temporary renamed - was "Risk factor"
		}
	}
	
	args = ["float", "float"]
	
	cost
	{
		gold = (round(arg))
	}
	
	prepare_duration = 120
	
	src_messages
	{
		new_opportunity = "Sire, our {owner} in {mission_kingdom} can try to resell some goods for a fair profit. Shall we pursue this opportunity?"
		//opportunity_lost = "{owner} lost the opportunity to arrange the profitable reselling of goods."
		text success = ["{owner} managed to resell some goods and returned {profit}{gold_icon} to our treasury! Not only that we are much richer, but his name is worth many bags of gold now.",
						"No one knows what {owner} did exactly, but after a long series of buying and selling goods and even some land, he made a huge profit. The gold is already in our treasury.",
						"When asked how did he make so much gold so quickly, our wise {owner} simply said 'You buy goods when prices are low, sell them when prices are high'."]
		text fail = ["{owner} failed to resell any goods quickly enough and since they went bad quickly, it turns out he lost our investment.",
					 "It seems that {owner} got tricked and what seemed as a profitable deal turned out to be a hoax. All our gold is gone.",
					 "News for such a profitable deal like the {owner} tried to make spread out fast. Our poor merchant got beaten and robbed, and his guards - killed.",
					 "No one knows how {owner} managed to lose all the gold we gave to him, but we heard, that once he lost part of it, he made some really risky deals in order to compensate and that paved the road to failure."]
	}
}


def ExpandTradeAction : TradeOpportunity
{
	name = "Expand trade"
	tooltip = "Try to expand our trade relations with {mission_kingdom} to {next_level}"
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_ExpandTrade.tga:Icon_CharacterAction_ExpandTrade#2" //GUID:330166177945b39458ca353a2479b13a
	prepare_status_text = "{owner} is trying to improve our trade standing in {mission_kingdom} and arrange {next_level}"
	ai_validate = true
	ai_expense_priority = "Urgent"
	base_chance = 40
	
	decline_voice_line = "Decline"
	prepare_voice_line = "confirm_action"
	cancel_voice_line = "cancel_action"
	success_voice_line = "action_succeeded"
	
	opportunity
	{
		chance_to_add_on_tick = (base_chance + own_character.class_level * 2 - ((own_kingdom.commerce - own_kingdom.allocated_commerce) < 0.75 * commerce_cost) * 50 ) //was 40
		chance_to_del_on_tick = 20
		cooldown = 120
	}
	
	// success_base_chance = 100
	success_fail : null
	outcomes
	{
		success = 100
	}
	
	//success_base_chance = 30
	// success_fail
	// {
	// 	sf_trading_skill_level = (5 * GetSkillRank(own_character, "Trading"))
	// 	{
	// 		text name = "{own_character:s} trading skill level"
	// 	}
	// 	sf_king_marriage = (15 * HaveMarriage(own_character.kingdom, own_character.mission_kingdom,1,1))
	// 	{
	// 		text name = "Our king is married for their princess"
	// 	}
	// 	sf_prince_marriage = (10 * HaveMarriage(own_character.kingdom, own_character.mission_kingdom,1,2))
	// 	{
	// 		text name = "Our prince is married for their princess"
	// 	}
	// 	sf_princess_marriage_king = (15 * HaveMarriage(own_character.kingdom, own_character.mission_kingdom,2,1))
	// 	{
	// 		text name = "Our princess is married for their king"
	// 	}
	// 	sf_princess_marriage_prince = (10 * HaveMarriage(own_character.kingdom, own_character.mission_kingdom,2,2))
	// 	{
	// 		text name = "Our princess is married for their prince"
	// 	}
	// 	sf_they_are_our_vassal = (15 * (own_character.mission_kingdom.vassal_of == own_character.kingdom))
	// 	{
	// 		text name = "They are our vassal"
	// 	}
	// 	sf_they_are_our_sovereign = (10 * (own_character.kingdom.vassal_of == own_character.kingdom.mission_kingdom))
	// 	{
	// 		text name = "They are our sovereign"
	// 	}
	// 	sf_we_have_alliance = (5 * (AreAllies(own_character.kingdom, own_character.mission_kingdom) && (own_character.kingdom.vassal_of != own_character.kingdom.mission_kingdom) && (own_character.mission_kingdom.vassal_of != own_character.kingdom)))
	// 	{
	// 		text name = "We have an alliance"
	// 	}
	// 	sf_crowdedness = (-20 * own_character.kingdom.crowdedness)
	// 	{
	// 		text name = "Crowdedness"
	// 	}
	// 	sf_stable_trade = (min(floor(own_character.trade_level_passed_time/60.0), 30))
	// 	{
	// 		text name = "Stable trade on this level"
	// 	}
	// 	sf_next_level_complications = (base_chance)
	// 	{
	// 		text name = "Next level complications"
	// 	}
	// }
	
	cost
	{
		gold = (upgrade_gold_cost)
		trade = (commerce_cost)
	}
	
	prepare_duration = (time_needed)
	
	src_messages
	{
		new_opportunity = "We have an opportunity to expand our trade relations with {mission_kingdom}, thanks to {owner}. Shall we proceed, sire?"
		//opportunity_lost = "{owner} lost the opportunity to improve our trade standing in {mission_kingdom}."
		text success = "{owner} managed to improve our trade standing in {mission_kingdom} and arranged {next_level}."
		text fail = "{owner} failed to improve our trade standing in {mission_kingdom}."
	}
}

def SupplyArmyAction : TradeOpportunity
{
	name = "Supply army"
	tooltip = "Try to supply the army of {target}"
	icon = "Assets/UI/Elements/Actions/Icon_Opportunity_SupplyArmy.tga:Icon_Opportunity_SupplyArmy#2" //GUID:c6d444ef13995b843bea3aebb0970c0e
	prepare_status_text = "{owner} is trying to supply the army of {target}"
	
	decline_voice_line = "Decline"
	prepare_voice_line = "import_food"
	cancel_voice_line = "cancel_action"
	cancelled_voice_line = "action_cancelled"
	success_voice_line = "supply_army_success"
	
	opportunity
	{
		chance_to_add_on_tick = (floor( 100 * target.army.missing_supplies / target.army.supplies_max) ) //80 //happens often if valid, short window (will be invalidated soon anyways)
		chance_to_del_on_tick = 50
	}
	
	float food_treshold = 60
	
	//missing_food = (floor(target.army.food_max - target.army.food))
	
	success_fail : null
	outcomes
	{
		success = 100
	}
	
	// success_base_chance = 30
	
	// success_fail
	// {
	// 	sf_trading_skill_level = (5 * GetSkillRank(own_character, "Logistics"))
	// 	{
	// 		text name = "{own_character:s} logistics skill level"
	// 	}
	// 	sf_missing_food = (-floor(target.army.food_max - target.army.food) * 0.1)
	// 	{
	// 		text name = "Missing food"
	// 	}
	// }
	
	cost
	{
		gold = (100 + target.army.missing_supplies * 10)
	}
	
	prepare_duration = 30
	
	src_messages
	{
		new_opportunity = "Our armies led by {target} are running low on supplies. Perhaps {owner} can try to arrange a shipment of provisions?"
		//opportunity_lost = "{owner} lost the opportunity to supply the army of {target} with food."
		text success = "{owner} managed to supply the army of {target}."
		text fail = "{owner} failed to supply the army of {target}."
	}
	
	cancel_events
	{
		target turned_into_rebel
		target dying
	}
	
	cancelled_message_caption = "Supply army no longer possible"
	cancelled_message_texts
	{
		text turned_into_rebel = "Our once trusted {target} has gone rogue! {owner} recalled the shipments of supplies that were sent his way."
		text died = "Alas, {target} is dead. Our {owner} has recalled all shipments of supplies that were supposed to reach his army."
	}
}


def ImportFoodAction : TradeOpportunity
{
	name = "Import food"
	tooltip = "Arrange the import of {food_amount}{food_icon} from {mission_kingdom}, in exchange for {gold_upkeep}{gold_icon}."
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_ImportFood.tga:Icon_CharacterAction_ImportFood#2" //GUID:3c5114547c37f274e8a253a01d2929e4
	prepare_status_text = "{owner} is arranging the import of {food_amount}{food_icon} from {mission_kingdom}."
	
	decline_voice_line = "Decline"
	prepare_voice_line = "import_food"
	success_voice_line = "import_good_success"
	
	opportunity
	{
		chance_to_add_on_tick = (base_add_on_tick_chance - ((own_kingdom.commerce - own_kingdom.allocated_commerce) < (0.75 * commerce_upkeep)) * 50)
		chance_to_del_on_tick = 25
	}
	
	success_fail : null
	outcomes
	{
		success = 100
	}
	
	// success_base_chance = 50
	// success_fail
	// {
	// 	sf_trading_skill_level = (5 * GetSkillRank(own_character, "Logistics"))
	// 	{
	// 		text name = "{own_character:s} logistics skill level"
	// 	}
	// }
	
	float food_amount = 80
	float max_food = (food_amount / 4)
	float min_food_usage = (food_amount * 2)
	float gold_upkeep = (food_amount * 2.5)
	float commerce_upkeep = (food_amount * 0.75)
	float base_add_on_tick_chance = 5
	
	cost
	{
		gold = ( food_amount * 15 )
		//trade = (commerce_upkeep)
	}
	
	prepare_duration = 60
	
	src_messages
	{
		new_opportunity = "{owner} reports that traders in {mission_kingdom} might be willing to begin exporting {food_amount}{food_icon} to our lands, if we offer them regular payments of {gold_upkeep}{gold_icon}. Should we proceed? This will cost us an upkeep of {commerce_upkeep}{trade_icon}."
		//opportunity_lost = "{owner} lost the opportunity to import food from {mission_kingdom}."
		text success = "{owner} managed to make the contract for importing food from {mission_kingdom}."
		text fail = "{owner} failed to make the contract for importing food from {mission_kingdom}."
	}
}

def ImportFoodActionV2 : ImportFoodAction
{
	//success_base_chance = 55
	food_amount = 40
	base_add_on_tick_chance = 15
	
	opportunity
	{
		//chance_to_add_on_tick = 15
		chance_to_del_on_tick = 25
	}
}

def ImportFoodActionV3 : ImportFoodAction
{
	//success_base_chance = 60
	food_amount = 20
	base_add_on_tick_chance = 15
	
	opportunity
	{
		//chance_to_add_on_tick = 15
		chance_to_del_on_tick = 25
	}
}

def ImportFoodActionV4 : ImportFoodAction
{
	//success_base_chance = 65
	food_amount = 10
	commerce_upkeep = 10
	base_add_on_tick_chance = 10
	
	opportunity
	{
		chance_to_add_on_tick = 10 //trumps the formula, just to show such action exists
		chance_to_del_on_tick = 25
	}
}

def ExportFoodAction : TradeOpportunity
{
	name = "Export food"
	tooltip = "Export {food_amount}{food_icon} to {mission_kingdom}, from which we will gain {gold_gain_modded}{gold_icon}."
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_ExportFood.tga:Icon_CharacterAction_ExportFood#2" //GUID:a8c5ce6585d3279409b9ca5e247d49f7
	prepare_status_text = "{owner} is arranging the export of {food_amount}{food_icon} to {mission_kingdom}."
	
	decline_voice_line = "Decline"
	prepare_voice_line = "export_food"
	success_voice_line = "action_succeeded"
	
	ai_validate = false
	
	opportunity
	{
		chance_to_add_on_tick = (base_add_on_tick_chance - ((own_kingdom.commerce - own_kingdom.allocated_commerce) < (0.75 * commerce_upkeep)) * 50)
		chance_to_del_on_tick = 25
	}
	
	float min_food = 90
	float food_amount = 80
	float gold_gain = (food_amount * 2)
	float gold_gain_modded = (gold_gain * ( 1 + own_character.cs_export_food_gold_increase_perc / 100))
	float commerce_upkeep = (ceil(food_amount * 0.75))
	float base_add_on_tick_chance = 3
	
	success_fail : null
	outcomes
	{
		success = 100
	}
	
	// success_base_chance = 50
	// success_fail
	// {
	// 	sf_trading_skill_level = (5 * GetSkillRank(own_character, "Logistics"))
	// 	{
	// 		text name = "{own_character:s} logistics skill level"
	// 	}
	// }
	
	
	cost
	{
		gold = (food_amount*10)
		//food = (food_amount)
		//trade = (commerce_upkeep)
	}
	
	upkeep
	{
		food = (food_amount)
		trade = (commerce_upkeep)
	}
	
	prepare_duration = 60
	
	src_messages
	{
		new_opportunity = "Traders in {mission_kingdom} have shown interest in opening a steady supply of {gold_gain_modded}{gold_icon} towards our lands, if we export {food_amount}{food_icon}. Should {owner} attempt to secure this deal? This will cost us an upkeep of {commerce_upkeep}{trade_icon}."
		//opportunity_lost = "{owner} lost the opportunity to export food to {mission_kingdom}."
		text success = "{owner} managed to make the contract for food export to {mission_kingdom}."
		text fail = "{owner} failed to make the contract for food export to {mission_kingdom}."
	}
}


def ExportFoodActionV2 : ExportFoodAction
{
	food_amount = 40
	min_food = 45
	//success_base_chance = 55
	base_add_on_tick_chance = 8
	
	
	opportunity
	{
		//chance_to_add_on_tick = 8
		chance_to_del_on_tick = 25
	}
}

def ExportFoodActionV3 : ExportFoodAction
{
	food_amount = 20
	min_food = 23
	//success_base_chance = 60
	base_add_on_tick_chance = 8
	
	opportunity
	{
		//chance_to_add_on_tick = 8
		chance_to_del_on_tick = 25
	}
}

def ExportFoodActionV4 : ExportFoodAction
{
	food_amount = 10
	min_food = 11
	commerce_upkeep = 10
	//success_base_chance = 65
	base_add_on_tick_chance = 5
	
	
	opportunity
	{
		chance_to_add_on_tick = 5 //trumps the formula, just to show such action exists
		chance_to_del_on_tick = 25
	}
}

def CancelFoodImportAction : CharacterAction
{
	name = "Stop food import"
	tooltip = "Order {owner} to stop importing food from {owner.mission_kingdom}"
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_StopAction.tga:Icon_CharacterAction_StopAction#1" //GUID:9fc339caa7b06dc41bdd4d2c34bd58f5
	mission = "OnMission"
	secondary = true
	show_in_action_bar = false
	show_in_character_widnow = false
	show_in_status = ImportingFoodStatus
	confirmation_message = CancelFoodImportMessage
	
	prepare_voice_line = "cancel_action"
}

def CancelFoodImportMessage : Message
{
	caption = "Stop food import?"
	body = "Are you sure you want to stop importing food?"
	buttons
	{
		text ok = "&Stop import"
		text cancel = "&Nevermind"
	}
}

def CancelFoodExportAction : CharacterAction
{
	name = "Stop food export"
	tooltip = "Order {owner} to stop exporting food to {owner.mission_kingdom}"
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_StopAction.tga:Icon_CharacterAction_StopAction#1" //GUID:9fc339caa7b06dc41bdd4d2c34bd58f5
	mission = "OnMission"
	secondary = true
	show_in_action_bar = false
	show_in_character_widnow = false
	show_in_status = ExportingFoodStatus
	confirmation_message = CancelFoodExportMessage
	
	prepare_voice_line = "cancel_action"
}

def CancelFoodExportMessage : Message
{
	caption = "Stop food export?"
	body = "Are you sure you want to stop exporting food?"
	buttons
	{
		text ok = "&Stop export"
		text cancel = "&Nevermind"
	}
}

def TradeExpeditionAction : TradeOpportunity
{
	name = "Expedition"
	tooltip = "Have {owner} lead a trade expedition in search of unexplored lands. If all goes to plan and a suitable place is found, he may establish and maintain a profitable trade colony for an upkeep of {TradeExpeditionStatus.upkeep.trade}{trade_icon}. Alternatively, he may return to our {kingdom.KingdomType} and bring some gold from his journey."
	icon = "Assets/UI/Elements/Actions/Icon_Opportunity_Expedition.tga:Icon_Opportunity_Expedition#2" //GUID:313ff33da353f6540ba9f947bfb97a5c
	prepare_status_text = "{owner} is leading a trade expedition to distant lands"
	
	decline_voice_line = "Decline"
	prepare_voice_line = "trade_expedition"
	cancel_voice_line = "cancel_action"
	fail_voice_line = "action_failed"
	
	mission = "Ignore"
	
	int max_expeditions = 3
	
	cost //!!! placeholder
	{
		gold = (ceil((1000 + SSum(own_kingdom, 0.5,50)),100))
	}
	
	// int random_income_modifier = [3,7]
	// float random_difficulty_modifier = [2, 3]
	// float profit = (round(arg * arg1))
	
	opportunity
	{
		chance_to_add_on_tick = 10 //rare
		chance_to_del_on_tick = 20 //rare
		cooldown = 900
	}
	
	validation_min_chance = 40 //temporary reduced, since now beneficial factors (0 to 40 are added) - was 40
	prepare_duration = (RndI(600,900) * (1 - 0.5 * HasResource(own_kingdom, "Compasses")))
	
	src_messages
	{
		new_opportunity = "Sire, we can sent {owner} to explore distand lands over the seas, that may hide vast riches and opportunities for trade."
		opportunity_lost = "Another kingdom already colonized the distant lands that {owner} planned to explore."
	}
	
	success_base_chance = 0
	
	success_fail
	{
		sf_base = (success_base_chance)
		{
			text name = "Base chance"
			show_always = false
		}
		sf_class_level = (own_character.class_level * 2)
		{
			text name = "Merchant level (x2)"
		}
		sf_navigation_skill_level = (5 * GetSkillRank(own_character, "Navigation"))
		{
			text name = "{own_character:s} navigation skill level"
		}
		sf_risk_factor = (20 * (arg1 - 2))
		{
			text name = "Risk factor"
		}
		sf_king = (own_character.is_king * 10)
		{
			text name = "Merchant is King"
		}
		sf_has_tradeport = ((own_character.kingdom.HasTradePort()) * 10)
		{
			text name = "We have a Trade port"
		}
		sf_expedition_hubs = (own_character.kingdom.ks_chance_for_expedition_perc)
		{
			text name = "Goods and upgrades"
		}
		//ks_chance_for_expedition_perc
	}
	
	outcomes
	{
		main success = (chance_to_succeed)
		{
			main establish_trade_colony = (owner.kingdom.ks_chance_to_establish_colony) // is given by the "TradeColonies" upgrade, on top of a base value
			{
				float profit = (2000 + ceil(RndF(0.8,1.2) * SSum(own_kingdom, 2) / 2 ,100))
				message
				{
					case src_kingdom
					{
						text caption = "Colony established"
						text text = "We've received word from {owner} - his expedition came to a resounding success as he found some uncharted lands! Our merchant now maintains a trade colony there, bringing part of his profit to our treasury. We've received an initial shipment of {profit}{gold_icon}."
						string sound_effect = "event:/sound_effects/notification/character/merchant_success"
						sprite illustration = [
						"Assets/UI/Messages/Illustrations/UI_Illustration_ExpeditionLocation_01.png:UI_Illustration_ExpeditionLocation_01#2", //GUID:ed49683a1daac484b81d6ac14ab64f45
						"Assets/UI/Messages/Illustrations/UI_Illustration_ExpeditionLocation_02.png:UI_Illustration_ExpeditionLocation_02#2", //GUID:ef88e2cd17f6ef24faf61938c13c359e
						"Assets/UI/Messages/Illustrations/UI_Illustration_ExpeditionLocation_03.png:UI_Illustration_ExpeditionLocation_03#2", //GUID:8bba3ecec28848e4eb9afb4c5516d105
						"Assets/UI/Messages/Illustrations/UI_Illustration_ExpeditionLocation_04.png:UI_Illustration_ExpeditionLocation_04#2", //GUID:dbc8c1fb860763c4c85876d4ee364fe8
						"Assets/UI/Messages/Illustrations/UI_Illustration_ExpeditionLocation_05.png:UI_Illustration_ExpeditionLocation_05#2" //GUID:eb1743165eb1e66458fb4e16a19896bc
						]
						string voice_line = "colony_established"
					}
				}
			}
			option bring_a_lot_of_gold
			{
				float profit = (2000 + ceil(RndF(0.8,1.2) * SSum(own_kingdom, 2),100))
				message
				{
					case src_kingdom
					{
						text caption = "Expedition was successful"
						text text = "My lord, {owner} returned from his voyage in one piece! He couldn't find any new lands, but managed to collect {profit}{gold_icon} along the way."
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_Merchant_Success.png:UI_Illustration_Merchant_Success#2" //GUID:910cc70f0a089de41bda54f18ff4b3da
						string sound_effect = "event:/sound_effects/notification/character/merchant_success"
						string voice_line = "trade_expedition_success"
					}
				}
			}
		}
		option fail
		{
			main owner_killed = (20 - (5 * GetSkillRank(own_character, "Negotiations")))
			{
				reason = "killed_in_trade_expedition"
				message
				{
					case src_kingdom
					{
						voice_line = null
						text caption = "Merchant died in expedition"
						text text = "Alas, {owner} has died during his expedition. The causes surrounding his death are shrouded in mystery, as we continue to search for what might have caused his untimely demise."
					}
				}
				
			}
			option default
			{
				message
				{
					case src_kingdom
					{
						text caption = "Expedition ended"
						text text = "{owner} has returned from his expedition and is now back in our royal court. As his voyage was rather uneventful, we've gained no profits."
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_Merchant_Fail.png:UI_Illustration_Merchant_Fail#2" //GUID:24dbd87b2c2b6f44f84d3fb99e64b96b
					}
				}
			}
		}
	}
}

def CancelTradeColony : Message
{
	caption = "Abandon the colony?"
	body = "Are you sure you want {owner} to abandon his colony? His outpost will be deserted and we will no longer receive any gold from its operations."
	
	prepare_status_text = "{owner} is abandoning his colony"
	prepare_duration = 90
	
	buttons
	{
		text ok = "&Abandon colony"
		text cancel = "&Nevermind"
	}
}


def RecallFromTradeExpeditionAction : CharacterAction //!!! isn't this obsolete?
{
	name = "Abandon trade colony"
	tooltip = "Order {owner} to stop maintaining his colony and return to court"
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_Recall.tga:Icon_CharacterAction_Recall#2" //GUID:1a3a6eb9e4802de4b856d5617ec01615
	prepare_duration = 90
	show_in_status = TradeExpeditionStatus
	show_in_action_bar = false
	prepare_status_text = "{owner} is returning to the royal court"
	voice_from_character = true
	prepare_voice_line = "Recall"
	confirmation_message = CancelTradeColony
}

def LucrativeImportAction : TradeOpportunity
{
	name = "Lucrative import"
	tooltip = "Have {owner} import {arg} from {owner.mission_kingdom} at -{discount:%} discount"
	icon = "Assets/UI/Elements/Actions/Icon_Opportunity_LucrativeImport.tga:Icon_Opportunity_LucrativeImport#2" //GUID:66dc4a652cbc3434684d9a1a6dfe42e6
	prepare_status_text = "{owner} is trying establish the import of {arg} at a discount"
	
	decline_voice_line = "Decline"
	prepare_voice_line = "import_good"
	cancel_voice_line = "cancel_action"
	cancelled_voice_line = "narrator_voice:we_stopped_importing_good"
	success_voice_line = "import_good_success"
	fail_voice_line = "action_failed"
	
	good_def = (GetImportGoodDef(owner, arg)) //{goodDef.name} can be used in texts, if needed (but is now replaced with {arg}, since it returns a tooltip properly)
	
	opportunity
	{
		chance_to_add_on_tick = (30 - ((own_kingdom.commerce - own_kingdom.allocated_commerce) < (0.75 * commerce_upkeep)) * 50) //short option
		chance_to_del_on_tick = 75
	}
	
	float discount = 20
	args = ["importable_good"]
	
	success_base_chance = 15
	success_fail
	{
		sf_bargain_skill_level = (5 * GetSkillRank(own_character, "Bargain"))
		{
			text name = "{own_character:s} bargain skill level"
		}
		sf_trade_level = (5 * own_character.trade_level)
		{
			text name = "{own_character:s} trading level"
		}
	}
	
	commerce_upkeep = (round(GetImportCommerceUpkeep(owner, arg)))
	gold_upkeep = (round(GetImportGoldUpkeep(owner, arg) * ( 1 - discount / 100)))
	
	cost
	{
		gold = (round(GetImportCommerceUpkeep(owner, arg) * 10 + GetImportGoldUpkeep(owner, arg) * 10))
	}
	
	prepare_duration = 60
	
	src_messages
	{
		new_opportunity = "Sire, {owner} has discovered a reliable seller of {arg} in {mission_kingdom} and claims he can negotiate an import deal at a {discount:%} lower price. He awaits our word."
		//opportunity_lost = "{owner} lost the opportunity to establish the import of {goodDef.name} at a discount."
		text success = "{owner} managed to establish the import of {arg} at a fine discount."
		text fail = "{owner} failed to establish the import of {arg} at a discount."
	}
	
	cancel_events
	{
		target_kingdom refresh_tags = (!(target_kingdom.goods_produced[goodDef.def_id]))
	}
	
	cancelled_message_caption = "Lucrative import stopped"
	cancelled_message_texts
	{
		text refresh_tags = "As the {mission_kingdom:ians} no longer produce {arg}, {owner} has stopped any attempts to import it at a lower price."
	}
}


def ImportGoodAction : CharacterAction
{
	name = "Import good"
	tooltip = "Have {owner} import a good from {owner.mission_kingdom}"
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_ImportGoods.png:Icon_CharacterAction_ImportGoods#2" //GUID:785dd27c475769549898b338c6dadc41
	
	decline_voice_line = "Decline"
	prepare_voice_line = "import_good"
	cancelled_voice_line = "narrator_voice:we_stopped_importing_good"
	
	args = ["importable_good", "int"]
	cost = (import_cost)
	
	mission = "OnMission"
	secondary = true
	show_in_action_bar = false
	show_in_character_widnow = false
	prepare_duration = 0
	prepare_status_text = "{owner} is arranging the import"
	
	text picker_text = "{name}"
	text upkeep_text = "{import_cost}"
	
	validate_prompts
	{
		text _no_possible_args = "{clr:gray}The {owner.mission_kingdom:ians} do not produce any goods that we don't have.{/clr}"
	}
}

def CancelImportGoodAction : CharacterAction
{
	name = "Cancel import good"
	tooltip = "Cancel import good"
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_StopAction.tga:Icon_CharacterAction_StopAction#1" //GUID:9fc339caa7b06dc41bdd4d2c34bd58f5
	show_in_action_bar = false
	confirmation_message = CancelImportGoodMessage
	
	prepare_voice_line = "cancel_action"
}

def CancelImportGoodMessage : Message
{
	caption = "Stop import?"
	body = "Are you sure you wish to stop importing this good?"
	buttons
	{
		text ok = "&Stop import"
		text cancel = "&Nevermind"
	}
}


def ShunForeignMerchantAction : TradeOpportunity
{
	name = "Shun foreign merchant"
	tooltip = "Try convincing the {mission_kingdom:ians} to shun a {target.kingdom:ian} {target.class}"
	icon = "Assets/UI/Elements/Actions/Icon_Opportunity_ShunForeignMerchant.tga:Icon_Opportunity_ShunForeignMerchant#2" //GUID:a859e94e8153dbd4e958680dc782a0b9
	prepare_status_text = "{owner} is trying to convince the {mission_kingdom:ians} to shun {target} of {target.kingdom}"
	
	decline_voice_line = "Decline"
	prepare_voice_line = "shun_foreign_merchant"
	cancel_voice_line = "cancel_shun_foreign_merchant"
	cancelled_voice_line = "shun_foreign_merchant_cancelled"
	success_voice_line = "action_succeeded"
	fail_voice_line = "shun_foreign_merchant_failed"
	
	opportunity
	{
		chance_to_add_on_tick = 10 //rare event
		chance_to_del_on_tick = 50
	}
	
	success_base_chance = 40
	success_fail
	{
		sf_trading_skill_level = (5 * GetSkillRank(own_character, "Negotiation"))
		{
			text name = "{own_character:s} negotiation skill level"
		}
		sf_our_relationship = (map(GetRelationship(own_character.kingdom, own_character.mission_kingdom),-1000,1000,-10,10)) //already added in the base, this overwrites for heavier effect
		{
			text name = "Our relations with {own_character.mission_kingdom}"
		}
		sf_thier_relationship = (map(GetRelationship(target.kingdom, own_character.mission_kingdom),-1000,1000,10,-10))
		{
			text name = "The relations between {own_character.mission_kingdom} and {target.kingdom}"
		}
		sf_trade_level = (5*(own_character.trade_level - target.trade_level))
		{
			text name = "Difference between {own_character:s} and {target:s} scale of trade "
		}
	}
	
	cost
	{
		gold = (target.trade_commerce * 20)
	}
	
	prepare_duration = 30
	
	src_messages
	{
		new_opportunity = "Sire, word has spread that someone in {mission_kingdom} has been secretly diverting shipments of gold unbeknownst to the local authorities! Our {owner} can take advantage of this scandal and direct the blame to {target} from {target.kingdom}."
		//opportunity_lost = "{owner} lost the opportunity to convince the {mission_kingdom:ians} to shun {target.kingdom:ian} {target.class}."
		text success = "{owner} managed to convince the {mission_kingdom:ians} that {target} has been stealing gold from their treasury. For that, the {target.kingdom:ian} merchant was shunned and his {target.kingdom.KingdomType} was banned from trading with {mission_kingdom}."
		text fail = "{owner} failed to find a way of convincing the {mission_kingdom:ians} to shun {target}. Evidently, the {target.kingdom:ian} {target.class} has secured his position well..."
	}
	
	cancel_events
	{
		target mission_kingdom_changed
	}
	
	cancelled_message_caption = "Shun foreign merchant stopped"
	cancelled_message_texts
	{
		text mission_kingdom_changed = "{owner} may no longer shun a {target.kingdom:ian} merchant, as {target.kingdom} no longer has any merchants in {mission_kingdom}."
	}
	
	outcomes
	{
		main success = (chance_to_succeed)
		{
			text message = "{src_messages.success}"
			also opinion_change
			{
				opinion = "MerchantsOpinion"
				amount = 1
				reason = "breaking_trade_agreement"
			}
		}
		option fail
		{
			text message = "{src_messages.fail}"
		}
	}
	
	validate_prompts
	{
		text _no_possible_targets = "{clr:red_bright}That merchant's trading has already ceased.{/clr}"
	}
}

def SecureMercenariesAction : TradeOpportunity
{
	name = "Hire mercenaries"
	tooltip = "Try to hire the {target.army} and call them to our lands"
	icon = "Assets/UI/Elements/Actions/Icon_Opportunity_HireMercenaries.tga:Icon_Opportunity_HireMercenaries#2" //GUID:33e5dca832c185f4d90d430c6a294529
	prepare_status_text = "{owner} is trying to convince the mercenaries in {target.realm_in} to join us"
	prepare_voice_line = null
	
	opportunity
	{
		chance_to_add_on_tick = 0 //opportunity temporarily removed
		//chance_to_add_on_tick = (10 + (10 * own_kingdom.num_wars) + (10 * own_kingdom.num_rebellions)) //rarely so useful, don't spam with this too much
		chance_to_del_on_tick = 50
	}
	
	success_base_chance = 50
	success_fail
	{
		sf_trading_skill_level = (5 * GetSkillRank(own_character, "Negotiation"))
		{
			text name = "{own_character:s} negotiation skill level"
		}
	}
	
	cost
	{
		gold = (round(GetMercenaryUnitGoldSum(target.mercenary) * 0.1 + own_kingdom.S1 * 0.1)) //add S1
	}
	
	prepare_duration = 60
	
	src_messages
	{
		new_opportunity = "{owner}, has reported that {target} have appeared! For the right amount of gold, they might be willing to travel to our lands and join our ranks."
		//opportunity_lost = "{owner} lost the opportunity to hire {target}."
		text success = "{owner} managed to hire {target}. They are already on their way to our kingdom!"
		text fail = "{owner} failed to hire {target}."
	}
	
	cancel_events
	{
		target became_regular
		target destroying
	}
	
	bool mercenary_is_ours = (target.army.kingdom == owner.kingdom)
	
	cancelled_message_caption = "Mercenary hiring stopped"
	cancelled_message_texts
	{
		text became_regular = "{owner} may no longer secure the support of {target.leader}, [{mercenary_is_ours:if}as he was just hired by us|as he was hired by {target.army.kingdom}]."
		text destroying = "{owner} may no longer secure the support of {target.leader}, as his camp has gone missing."
	}
}

def ExquisiteRansomOfferAction : TradeOpportunity
{
	name = "Ransom our prisoner"
	tooltip = "Try to ransom our prisoner from {target.prison_kingdom}"
	icon = "Assets/UI/Elements/Actions/Icon_Opportunity_ExquisiteRansomOffer.tga:Icon_Opportunity_ExquisiteRansomOffer#2" //GUID:86b66a108978cd84f8d2c1b1535a91cd
	prepare_status_text = "{owner} is to ransom {target} off {target.prison_kingdom}"
	
	decline_voice_line = "Decline"
	prepare_voice_line = "exquisite_ransom_action"
	cancel_voice_line = "action_failed"
	cancelled_voice_line = "action_failed"
	fail_voice_line = "action_failed"
	success_voice_line = "" //using successfull_ransom_prisoner from sounds.def instead
	
	opportunity
	{
		chance_to_add_on_tick = 80 //rarely conditions are met, we need high chance here
		chance_to_del_on_tick = 20 //stay valid long time
	}
	
	success_base_chance = 50
	success_fail
	{
		sf_trading_skill_level = (5 * GetSkillRank(own_character, "Negotiation"))
		{
			text name = "{own_character:s} Negotiation skill level"
		}
	}
	
	cost
	{
		gold = (round(target.ransom_price_gold * 1.2))
	}
	
	prepare_duration = 60
	
	src_messages
	{
		new_opportunity = "Sire, {owner} claims he can try to arrange the release of our prisoner from {target.prison_kingdom:s} clutches! Should he begin preparing a ransom offer?"
		//opportunity_lost = "{owner} lost the opportunity to ransom {target} off {target.prison_kingdom}."
		text success = "{owner} managed to make a ransom offer that the {target.prison_kingdom:ians} could not refuse. {target} is now free!"
		text fail = "{owner} failed to ransom {target} off {target.prison_kingdom}."
	}
	
	cancel_events
	{
		target dying
		target prisoner_kingdom_changed
	}
	
	cancelled_message_caption = "Equisite ransoming stopped"
	cancelled_message_texts
	{
		text prisoner_kingdom_changed = "{owner} may no longer offer a ransom for {target}, as he was transferred to another kingdom's dungeon."
	}
}

//FROM HERE ON PROBABLY ALL TRADER ACTIONS ARE MORE OR LESS OBSOLETE

// def GoToTradeCenterAction : CharacterAction //this is now obsolete, for now
// {
// 	name = "Send to Trade Center"
// 	tooltip = "While {owner} is in a trade center, our Kingdom will profit from the deals he arranges."
// 	icon = "Assets/UI/Elements/Common/Icons/Icon_Action_Trade.png:Icon_Action_Trade#2" //GUID:ece3ebf22f6d16a438700ade61500f57
// 	prepare_voice_line = ""
// 	target = "available_trade_center"

// 	//cost
// 	//{
// 	//	gold = (distance*100)
// 	//} 
// 	prepare_duration = (30 * distance / (2 ^ (relationship/1000)))

// 	text picker_text = "{market_value}{gold_icon}"
// 	prepare_status_text = "{owner} is preparing to go trading in {action.target}"
// 	//show_while_executing = true

// 	ai_validate = true
// 	ai_eval_target = (profit)

// 	outcomes
// 	{
// 		main fail = ((40 - merchant_class_level) * (1 - 0.5 * has_marriage) * (1 - 0.5 * is_exclusive) / (2 ^ (relationship/1000)))
// 		{
// 			text message = ["There were complications and {owner} failed to establish a trade in {target}. He is now back in the royal court, awaiting new orders.",
// 							"{owner} could not get a certificate for our trade in {target}.",
// 							"{owner} failed to establish a suitable trading post for our kingdom in {target}.",
// 							"Though {owner} visited {target}, he failed to establish any meaningful deals and returned demoralized, at least to reduce our expenses."]
// 		}
// 		option success
// 		{
// 			message
// 			{
// 				text caption = "Merchant arrived in Trade Center"
// 				text text = ["{owner} successfully arrived in {target} and started trading. Part of his profit is already coming into our treasury.",
// 							 "{owner} established a trading post for our kingdom in {target} and already made some profitable deals.",
// 							 "Immediately after his arrival in {target}, our merchant felt in his own waters and started arranging favorable trade terms."]
// 				string sound_effect = "event:/sound_effects/notification/character/merchant_success"
// 			}
// 		}
// 	}

// }

def EstablishTradeRouteAction : CharacterAction //also obsolete
{
	name = "Open Trade Route"
	tooltip = "Establish a trade route with a Kingdom to profit from your commerce"
	icon = "Assets/UI/Elements/Common/Icons/Icon_Action_EstablishTradeRoute.png:Icon_Action_EstablishTradeRoute#2" //GUID:79096d2ed2908a540b1632434f4ff238
	prepare_voice_line = "trade"
	target = "trade_route_kingdom"
	prepare_status_text = "{owner} is establishing a trade route with {action.target}."
	//ai_validate = true
	
	text picker_text = "{profit}{gold_icon}"
	cost
	{
		gold = ( (10 + traderoute_capacity * 2) * square_distance * (1 - (0.25 * is_exclusive)) * knight_trade_modifiers)
	}
	prepare_duration = (30 * square_distance / (2 ^ (relationship / 1000)))
	outcomes
	{
		main fail = 0 //((40 - merchant_class_level ) * (1 - (0.5 * have_marriage)) * (1 - (0.5 * is_exclusive)) / (2 ^ (relationship / 1000)))
		{
			text message = ["There were complications and {owner} failed to establish a trade route to {target}. He is now back in the royal court, awaiting new orders.",
							"{owner} and the royal merchant of {target} couldn't agree on some of the details and terms of our trade and the route was not yet established.",
							"{owner} couldn't come to an agreement with {target} how to split the expenses for our trade route and for now the whole process is put to a stop.",
							"It seems that the merchants of {target} were too busy at the moment to deal with {owner} and there was no progress on the trade route matter."]
		}
		option success = 100
		{
			message
			{
				case src_kingdom
				{
					text caption = "Trade route established"
					text text = ["{owner} successfully established a trade route with {target}. Part of his profit is already coming in our treasury.",
								 "The trade route between us and {target} is now functional and since all details are discussed, {owner} is ready for new assignment.",
								 "{owner} swiftly arranged all matters, regarding the trade between us and {target} and he is now ready to undertake new tasks.",
								 "{owner} made sure there will be no obstacles for the flow of goods between us and {target} and is now looking forward other dealings we need handled."]
					string sound_effect = "event:/sound_effects/notification/character/merchant_success"
				}
				case target_kingdom
				{
					def = ActionOutcomeMessage
					text caption = "Trade route established"
					text text = ["Merchants from {owner.kingdom} have established a trade route with our kingdom!",
								 "We accepted the merchants from {owner.kingdom} and made sure our there will be no obsticles to our trade with them.",
								 "With our blessing, merchants from {owner.kingdom} have now set up their shops in our kingdom and are already exploring the trade prospects of our kingdoms."]
				}
			}
		}
	}
}

def MoveTradeCenterAction : CharacterAction
{
	target = "realm"
	args = ["Realm"]
	name = "Move Trade Center"
	tooltip = "{owner} can try to move a trade center to new location."
	icon = "Assets/UI/Elements/Common/Icons/Icon_Action_Move_Trade_Centre.png:Icon_Action_Move_Trade_Centre#2" //GUID:cc503281be4c8ef4085bc4780ae530ec
	cost
	{
		gold = (200 + distance * 10)
	}
	prepare_duration = (600  + (800 - owner.class_level * 40))
	prepare_status_text = "{owner} is attempting to move a trade center from {action.target} to {action.arg0}."
}

// ----------------------------------------------------------//
// ----------------------- DIPLOMAT -------------------------//
// ----------------------------------------------------------//

template DiplomatAction : CharacterAction
{
	mission = "OnMission"
	cost = "1000 gold" // placeholder
	
	outcomes
	{
		main success
		{
			message
			{
				case src_kingdom
				{
					sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_Diplomat_Success.tga:UI_Illustration_Diplomat_Success#2" //GUID:435edf274a0708549af14bbc28f3c6ca
				}
			}
		}
	}
}

def ImproveRelationsAction : CharacterAction
{
	name = "Improve Relations[ with {target}]"
	tooltip = "Send {owner} to improve our relations with [{target}|another kingdom] over time."
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_ImproveRelations.tga:Icon_CharacterAction_ImproveRelations#2" //GUID:a13b69ab4ac4b1b47b59869b1f2321c1
	target = "diplomatic_kingdom"
	prepare_duration = 30
	prepare_status_text = "{owner} is traveling to {action.target} to improve our relations."
	
	decline_voice_line = "Decline"
	success_voice_line = "arrived_abroad"
	prepare_voice_line = "send_abroad"
	cancel_voice_line = "Recall"
	cancelled_voice_line = "improve_relations_cancelled"
	
	gold_upkeep = ImprovingRelationsStatus.upkeep.gold
	ai_validate = (gold_upkeep < kingdom.kingdom_gold_balance / 5)
	ai_eval_target = (target_relationship <= 0 and target_is_neighbor_kingdom * (target.army_strength / own_kingdom.army_strength - 1.5))
	
	cancel_events
	{
		target_kingdom kingdom_destroyed
		target_kingdom war_started = (!target_valid)
		target_kingdom joined_war = (!target_valid)
	}
	
	cancelled_message_caption = "Relations are no longer improved"
	cancelled_message_texts
	{
		text kingdom_destroyed = "{owner:s} mission to improve our relations with {target} is no longer possible, following the destruction of our diplomat's mission kingdom."
		text war_started = "Sire, we had to recall {owner} back to our royal court, now that we are at war with {target}."
		text joined_war = "Sire, we had to recall {owner} back to our royal court, now that we are at war with {target}."
		
	}
	
	outcomes
	{
		main success = 100
		{
			message
			{
				case src_kingdom
				{
					sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_Diplomat_Success.tga:UI_Illustration_Diplomat_Success#2" //GUID:435edf274a0708549af14bbc28f3c6ca
					text caption = "Our diplomat arrived in {target_kingdom}"
					text text = ["Our {owner} is now in {target_kingdom}. Their reception was a bit reserved, but still, there were no real troubles and some important discussion took place already.",
					             "{target_kingdom.king} from {target_kingdom} welcomes the arrival of {owner} and says he is looking forward to working with him to the best interests of our kingdoms.",
					             "The {target_kingdom:ians} accommodated {owner} in their capitol. They didn't pay much attention to his arrival, but still he managed to appoint a few meetings for discussing the most important matters, concerning both of our kingdoms.",
					             "{owner} arrived in {target_kingdom} and is now ready to negotiate the matters at hand."]
					text bullet = "[{target_kingdom.is_papacy:if}{owner.kingdom.is_christian:if}Diplomats are not very effective in {papacy}. Sending a cleric would be of more use.]"
				}
				case target_kingdom
				{
					def = ActionOutcomeMessage
					sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_Diplomat_Success.tga:UI_Illustration_Diplomat_Success#2" //GUID:435edf274a0708549af14bbc28f3c6ca
					sprite icon = "Assets/UI/Elements/msg_icons/Icon_Message_GenericEvent_Neutral.png:Icon_Message_GenericEvent_Neutral#2" //GUID:d1b257a397cd3e2409cb96b95cb01190
					text caption = "New diplomat arrived"
					text text = ["{owner} from {src_kingdom} arrived. Hopefully he will work towards improving our relations.",
								 "{src_kingdom} sent {owner} in our capitol. He claims he is in {target_kingdom} to work towards the friendship and cooperation of our kingdoms.",
								 "{owner} from {src_kingdom} is now in our kingdom, claiming he is here to see how our kingdoms can help each other.",
								 "{owner} arrived in our capitol, claiming that the improvement of the relations between {src_kingdom} and {target_kingdom} are his prior mission."]
				}
				// case default
				// {
				// 	def = ActionOutcomeMessage
				// 	text caption = "Foreign diplomacy"
				// 	text text = "{owner} from {src_kingdom} went to {target_kingdom}"	
				// }
			}
			
			//also rel_change = "rel_sign_peace" //alex - no, thus you only send and recall, super exploit
		}
	}
}


def DiplomacyPeaceTalksPreparationAction : CharacterAction
{
	name = "Negotiate Peace"
	tooltip = "Have {owner} start to negotiate peace terms with one of our enemies."
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_NegotiatePeace.tga:Icon_CharacterAction_NegotiatePeace#2" //GUID:19659c5a71cafc245931782717f3ec6a
	prepare_status_text = "{owner} is preparing to negotiate peace with {target}."
	target = "war_kingdom"
	prepare_duration = 30
	
	decline_voice_line = "Decline"
	prepare_voice_line = "negotiate_peace"
	cancel_voice_line = "cancel_peace_negotiations"
	cancelled_voice_line = "peace_negotiations_cancelled"
	success_voice_line = "peace_negotiations_started"
	
	upkeep : PeaceTalksStatus.upkeep
	
	validate_prompts
	{
		text _no_possible_targets = "{clr:red_bright}There are no wars we can negotiate peace for.{/clr}"
	}
	
	cancel_events
	{
		target_kingdom kingdom_destroyed
		target_kingdom war_ended = (!target_valid)
		target_kingdom left_war = (!target_valid)
	}
	
	cancelled_message_caption = "Peace negotiations stopped"
	cancelled_message_texts
	{
		text kingdom_destroyed = "{target} was destroyed! {owner} has returned to our royal court."
		text war_ended = "Our war against {target} has come to an end, putting an end to {owner:s} attempts to negotiate peace."
		text left_war = "Our war against {target} has come to an end, putting an end to {owner:s} attempts to negotiate peace."
	}
	
	outcomes
	{
		main success = 100
		{
			message
			{
				case src_kingdom
				{
					sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_Diplomat_Success.tga:UI_Illustration_Diplomat_Success#2" //GUID:435edf274a0708549af14bbc28f3c6ca
					text caption = "Peace negotiations with {target_kingdom} started"
					text text = "{owner} has started to exchange letters with {target_kingdom}, hoping to convince its diplomats to put some sense into {target_kingdom.king} and sign peace."
				}
			}
		}
	}
	
	
}

def DiplomacyPeaceTalksAction : CharacterAction
{
	show_in_action_bar = false
	show_in_character_widnow = false
	name = "Negotiating peace"
	tooltip = "{owner} is trying to convince our enemies to sign peace with us."
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_NegotiatePeace.tga:Icon_CharacterAction_NegotiatePeace#2" //GUID:19659c5a71cafc245931782717f3ec6a
	prepare_status_text = "{owner} is trying to increase the likelyhood of us signing peace with {target}."
	target = "war_kingdom"
	prepare_duration = -1
	
	upkeep : PeaceTalksStatus.upkeep
}

def CreateDefensivePactAction : CharacterAction
{
	name = "Create Defensive Pact[ against {target}]"
	tooltip = "Create a defensive pact against [{target}|a neighboring kingdom you are not at war with]. {owner} will then search for supporters, which can also be added through diplomacy."
	//icon = DefensivePact.icon
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_CreateDefensivePact.tga:Icon_CharacterAction_CreateDefensivePact#2" //GUID:4c05409701f810745880aa5d900ec69b
	target = "other_kingdom"
	//prepare_status_text = "{owner} is creating a Defense Pact against {target}."
	
	decline_voice_line = "Decline"
	prepare_voice_line = "create_pact"
	
	validate_prompts
	{
		text _no_possible_targets = "{clr:red_bright}There are no neighboring kingdoms we are at peace and can make defensive pacts against.{/clr}"
	}
	
	cost
	{
		gold = (ceil(SSum(owner.kingdom, 0.2, 50) * (100 - own_character.cs_diplomat_actions_upkeep_reduction_perc - own_character.cs_defpact_invplan_cost_and_upkeep_reduction_perc)  / 100 , 50))
	}
	
	gold_upkeep = HoldingADefensivePactStatus.upkeep.gold
	ai_validate = (gold_upkeep < kingdom.kingdom_gold_balance / 5)
	ai_eval_target = (target.army_strength)
}

def DissolveDefensivePactAction : CharacterAction
{
	name = "Dissolve pact"
	tooltip = "Order {owner} to end his {pact}."
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_StopAction.tga:Icon_CharacterAction_StopAction#1" //GUID:9fc339caa7b06dc41bdd4d2c34bd58f5
	secondary = true
	show_in_action_bar = false
	show_in_character_widnow = true
	show_in_status = HoldingADefensivePactStatus
	confirmation_message = DissolvePactConfirmationMessage
}

def CreateOffensivePactAction : CharacterAction
{
	name = "Plan Invasion[ of {target}]"
	tooltip = "Create an invasion plan against [{target}|a neighboring kingdom you are not at war with]. {owner} will then search for supporters, which can also be added through diplomacy."
	//icon = OffensivePact.icon
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_CreateInvasionPlan.tga:Icon_CharacterAction_CreateInvasionPlan#2" //GUID:4136b4127e7fb5c4092723a4c310e3d2
	target = "other_kingdom"
	//prepare_status_text = "{owner} is creating an Invasion Plan against {target}."
	
	decline_voice_line = "Decline"
	prepare_voice_line = "create_pact"
	
	validate_prompts
	{
		text _no_possible_targets = "{clr:red_bright}There are no neighboring kingdoms we are at peace and can make invasion plans against.{/clr}"
	}
	
	cost
	{
		gold = (ceil(SSum(owner.kingdom, 0.5, 100) * (100 - own_character.cs_diplomat_actions_upkeep_reduction_perc - own_character.cs_defpact_invplan_cost_and_upkeep_reduction_perc)  / 100 , 100))
	}
	
	gold_upkeep = HoldingAnInvasionPlanStatus.upkeep.gold
	ai_validate = (gold_upkeep < kingdom.kingdom_gold_balance / 10)
	ai_eval_target = (target.army_strength)
}

def DissolveOffensivePactAction : CharacterAction
{
	name = "Dissolve pact"
	tooltip = "Order {owner} to end his {pact}."
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_StopAction.tga:Icon_CharacterAction_StopAction#1" //GUID:9fc339caa7b06dc41bdd4d2c34bd58f5
	secondary = true
	show_in_action_bar = false
	show_in_character_widnow = true
	show_in_status = HoldingAnInvasionPlanStatus
	confirmation_message = DissolvePactConfirmationMessage
}

def DiplomacyArrangeAnnexationAction : DiplomatAction
{
	name = "Arrange annexation"
	tooltip = "Make {owner} to attempt take over {owner.mission_kingdom}"
	icon = "Assets/UI/Elements/Common/Icons/Icon_Action_Diplomat_Annexation.png:Icon_Action_Diplomat_Annexation#2" //GUID:2064435b83dabf340a88866b13a60f7f
	prepare_status_text = "{owner} is attempting to takeover {owner.mission_kingdom}."
	
	
	int influence_requirement = 11
	
	requirements
	{
		influence = influence_requirement
		{
			text name = "At least {influence_requirement} influence in {mission_kingdom}"
		}
	}
	outcomes
	{
		main success = (20 + owner.class_level * 2)
		{
			message
			{
				case src_kingdom
				{
					text caption = "Diplomat successfully annexed {target_kingdom}"
					text text = ["{owner} finally managed to convince the rules of {target_kingdom}, that our kingdoms will be stronger under one strong ruler",
								"Thanks to the efforts of {owner}, {target_kingdom} accepted to put aside the differences between our kingdoms and become one with us."]
				}
			}
		}
		option fail
		{
			message
			{
				sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_Diplomat_Success.tga:UI_Illustration_Diplomat_Success#2" //GUID:435edf274a0708549af14bbc28f3c6ca
				text text = "{owner} failed to annex {target_kingdom}"
			}
		}
	}
}

def DiplomacyBecomeFavoriteAction : DiplomatAction
{
	opportunity
	{
		chance_to_add_on_tick = 20
	}
	
	name = "Become Favorite"
	tooltip = "Have {owner} attempt to become the favorite of {owner.mission_kingdom.king} of {owner.mission_kingdom}"
	icon = "Assets/UI/Elements/Common/Icons/Icon_Action_Diplomat_Favorite.png:Icon_Action_Diplomat_Favorite#2" //GUID:77f17ece389c9554e90def6f79ae97e1
	prepare_status_text = "{owner} is attempting to become a favorite of the {owner.mission_kingdom.king}, ruler of {owner.mission_kingdom}."
	prepare_voice_line = "become_favorite"
	
	outcomes
	{
		main success = (30 + owner.class_level * 2)
		{
			message
			{
				case src_kingdom
				{
					text caption = "Diplomat became favorite"
					text text = ["{owner} has become the favorite of the king in {owner.mission_kingdom} and now he listens carefully every word our diplomat says.",
								 "{owner} really managed to gain the trust of {owner.mission_kingdom.king} and now some interesting propositions might be discussed.",
							     "{owner} convinced {owner.mission_kingdom.king} in our good intentions and now they discuss together every diplomatic step of {owner.mission_kingdom}.",
							     "{owner} and {owner.mission_kingdom.king} became great friends almost instantly and now they often hunt together and discuss politics."]
				}
			}
		}
		option fail
		{
			text message = ["{owner} failed to become the favorite of {owner.mission_kingdom.king}.",
							"It seems that {owner.mission_kingdom.king} is not so fond of {owner} as we wished.",
							"{owner:s} attempts to impress {owner.mission_kingdom.king} were futile."]
		}
	}
}

def DiplomacyCallForPeaceAction : DiplomatAction //!!! to do placeholder for now
{
	name = "Negotiate peace with neighbors"
	tooltip = "Attempt to make peace with all neighboring kingdoms that we're currently in war with"
	icon = "Assets/UI/Elements/Common/Icons/Icon_Action_Diplomat_Call_For_Peace.png:Icon_Action_Diplomat_Call_For_Peace#2" //GUID:cfb02fc10c8278844b97769f519dcb82
	prepare_status_text = "His majesty is attempting to make peace with all neighboring kingdoms."
	
	cost
	{
		gold = 5000
	}
	
	prepare_duration = 120
	
	outcomes
	{
		main success = (10 + owner.class_level * 3) //note that each king starts level 3
		{
			message
			{
				case src_kingdom
				{
					text caption = "Peace with all our neighbors"
					text text = ["Using his remarkable diplomatic skills, {owner} convinced our neighbors that war with us is pointless.",
								 "In a historical negotiations, {owner} managed to sign peace treaty with all our neighbors!"]
				}
			}
		}
		option fail
		{
			text message = ["{owner} couldn't convince our enemies to sign peace treaty with us.",
							"Though {owner} did his best, he couldn't convince the neighbors we are fighting with to end the pointless war."]
		}
	}
}

def DiplomacySendGiftAction : DiplomatAction
{
	name = "Send Gift"
	tooltip = "Have {owner} send a gift to {owner.mission_kingdom}.{p}Gifts sent via diplomats are generally more effective in improving relations."
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_SendGift.tga:Icon_CharacterAction_SendGift#2" //GUID:d79f420a12838b345b21bb95f5c99b29
	prepare_status_text = "{owner} is improving our relations with {owner.mission_kingdom}."
	prepare_voice_line = "improve_relations"
	
	cost = null
	
	args = ["int"]
	text picker_text = "{amount}"
	
	// 500 per 100% of the average max treasures of the 2 kingdoms, multiplied [1..2] by CL
	float rel_change_amount = (ceil( 500 * arg * 2 / (owner.mission_kingdom.max_treasury + owner.kingdom.max_treasury) * MapCL(owner, 1, 2) ))
	
	outcomes
	{
		main success = 100
		{
			message
			{
				case src_kingdom
				{
					text caption = "Relations improved"
					text text = ["{owner} successfully strengthened our relations with {owner.mission_kingdom}!",
							 "{owner} managed to convince the politicians of {owner.mission_kingdom} that friendship between our kingdoms will be beneficial.",
							 "Due to the silver tongue of {owner}, the opinion of the {owner.mission_kingdom:ians} of us improved greatly.",
							 "Luckily, {owner} opened the eyes of the {owner.mission_kingdom:ian} diplomats about the possibilities of cooperation between our kingdoms.",
							 "{owner} managed to find out diplomatic solutions of many problems between {owner.mission_kingdom} and us.",
							 "That eloquent {owner} brilliantly convinced the {owner.mission_kingdom} that they should support our kingdom's interests more."]
				}
			}
			also rel_change = "rel_diplomat_gift" //(rel_diplomat_improve + owner.class_level * 3)
		}
	}
}

def DiplomacyProvokeWarWithAction : DiplomatAction
{
	name = "Provoke war with..."
	tooltip = "Have {owner} attempt to cause a war between {owner.mission_kingdom} and another kingdom"
	icon = "Assets/UI/Elements/Common/Icons/Icon_Action_Diplomat_Provoke_War.png:Icon_Action_Diplomat_Provoke_War#2" //GUID:8d68baf3ca397434aae7e0ed34f56bcf
	target = "other_kingdom"
	prepare_status_text = "{owner} is attempting to instigate a war between {owner.mission_kingdom} and {action.target}"
	prepare_voice_line = "provoke_war"
	
	outcomes
	{
		main success = (20 + owner.class_level * 3)
		{
			message
			{
				case src_kingdom
				{
					text caption = "We provoked a war"
					text text = ["{owner} convinced {owner.mission_kingdom} to attack {target}",
							"With a little help from {owner}, the {owner.mission_kingdom:ians} came to the decision that their real enemy is {target}.",
							"The soldiers of {owner.mission_kingdom} are now marching against {target}, thanks to {owner}, who warned them they are going to be attacked and better attack first."]
					
				}
			}
		}
		option fail
		{
			text message = ["{owner} failed to convince {owner.mission_kingdom} to attack {target}",
							"The {owner.mission_kingdom:ians} refused to attack {target}, regardless of the numerous attempts of {owner} to convince them.",
							"{owner} couldn't find a way to convince the {owner.mission_kingdom:ians} to attack {target}."]
		}
	}
}

def DiplomacyRevokeTributeAction : DiplomatAction
{
	name = "Revoke tribute"
	tooltip = "Have {owner} attempt to revoke our tribute to {owner.mission_kingdom}"
	icon = "Assets/UI/Elements/Common/Icons/Icon_Action_Diplomat_Revoke_Tribute.png:Icon_Action_Diplomat_Revoke_Tribute#2" //GUID:2946765fb3f65304eaa71f47c31edc6e
	prepare_status_text = "{owner} is attempting to revoke our tribute to {owner.mission_kingdom}."
	outcomes
	{
		main success = (40 + owner.class_level * 2)
		{
			message
			{
				case src_kingdom
				{
					text caption = "Tribute revoked"
					text message = "{owner} revoked our tribute to {owner.mission_kingdom}"
				}
			}
		}
		option fail
		{
			text message = "{owner} failed to revoke our tribute to {owner.mission_kingdom}"
		}
	}
}

def DiplomacySearchForSpouceAction : CharacterAction //DISABLED
{
	name = "Search for spouse"
	tooltip = "Have {owner} seek potential marriage candidates throughout all kingdoms for members of our royal family.[{p}This will require an upkeep of {SearchingForSpouseStatus.upkeep}.]"
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_SearchForSpouse.tga:Icon_CharacterAction_SearchForSpouse#2" //GUID:d32cf42986aa29f4f9dfe557cf837b01
	prepare_duration = -1
	target = "character"
	prepare_status_text = "{owner} is searching for marriage candidates for {target}.[{p}That requires an upkeep of {SearchingForSpouseStatus.upkeep}.]"
	
	validate_prompts
	{
		text _no_possible_targets = "{clr:red_bright}We have no unmarried family members that are old enough.{/clr}"
	}
}

def DiplomacySearchForHelpWithRebelsAction : CharacterAction //DISABLED
{
	name = "Search for help with rebels"
	tooltip = "Have {owner} seek out kingdoms that can send armies against our rebels"
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_SearchForHelpWithRebels.tga:Icon_CharacterAction_SearchForHelpWithRebels#2" //GUID:ce0bece2f9450264894a60ae0b7094c7
	prepare_duration = -1
	prepare_status_text = "{owner} is planning potential visitations with kingdoms which might aid us against our rebels."
}

// def FindPactMembersAction : CharacterAction
// {
// 	name = "Find Pact Members"
// 	tooltip = "Look for other kingdoms to join our [{owner.pact}|pact]"
// 	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_SearchForPactMembers.tga:Icon_CharacterAction_SearchForPactMembers#2" //GUID:02795758024889c4c8a9b9402ce46fc9
// 	prepare_duration = -1
// 	cancel_voice_line = "dissolve_pact"
// 	prepare_status_text = $[
// 		"{owner} is looking for kingdoms, eager to join our[ {owner.pact}| pact against {owner.pact.target}]."
// 		"[{owner.pact.has_supporters:if}{p}Currently supported by"
// 			"[ {owner.pact.members.1}]"
// 			"[, {owner.pact.members.2}]"
// 			"[, {owner.pact.members.3}]"
// 		"]"
// 		]
// }


def DiplomacySupportLoyalistsAction : DiplomatAction
{
	name = "Support loyalists"
	tooltip = "Have {owner} attempt to support loyalists in {owner.mission_kingdom}"
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_SupportLoyalists.png:Icon_CharacterAction_SupportLoyalists#2" //GUID:06b61ec5ade74da418b7d688f3ea28d2
	prepare_status_text = "{owner} is attempting to support loyalists in {owner.mission_kingdom}."
	outcomes
	{
		main success = (40 + owner.class_level * 2)
		{
			text message = "{owner} has supported our loyalists in {owner.mission_kingdom}"
		}
		option fail
		{
			text message = "{owner} failed to support our loyalists in {owner.mission_kingdom}"
		}
	}
}

def DiplomacyAcceptReligionAction : DiplomatAction
{
	name = "Accept our religion"
	tooltip = "Have {owner} attempt to convert {owner.mission_kingdom} to our religion"
	icon = "Assets/UI/Elements/Common/Icons/Icon_Action_Diplomat_Religion.png:Icon_Action_Diplomat_Religion#2" //GUID:24f396aeac9fa7f4484a823c5b557ea2
	prepare_status_text = "{owner} is attempting to convert {owner.mission_kingdom} to our religion"
	
	outcomes
	{
		main success = (10 + owner.class_level * 3)
		{
			text message = "{owner} successfully changed the religion of {owner.mission_kingdom}"
		}
		option fail
		{
			text message = "{owner} failed to change the religion of {owner.mission_kingdom}"
		}
	}
}

def ThreatenAction : DiplomatAction //!!! placeholder
{
	name = "Threaten"
	tooltip = "Have {owner} threaten {owner.mission_kingdom}"
	icon = "Assets/UI/Elements/Common/Icons/Icon_Action_Generic_Spy.png:Icon_Action_Generic_Spy#2" //GUID:8fabffe00ddb7e442bdc7bffc086f6d0
	prepare_status_text = "{owner} is preparing to threaten {target}"
}

// ----------------------------------------------------------//
// -----------------------    SPY   -------------------------//
// ----------------------------------------------------------//
def InfiltrateKingdomAction : CharacterAction
{
	name = "Infiltrate [{target}|Kingdom]"
	tooltip = "Send {owner} to infiltrate [{target}.|another kingdom.][{spy_is_known:if}{spy_can_be_revealed_while_infiltrating:if}{p}{p}As our spy's recent mission in {target} was compromised, sending him back might lead to his immediate reveal.]"
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_InfiltrateKingdom.tga:Icon_CharacterAction_InfiltrateKingdom#2" //GUID:e1bb4e048579cf64c9192a3d3fc88f76
	prepare_voice_line = "send_abroad"
	cancel_voice_line = "Recall"
	cancelled_voice_line = "infiltrate_kingdom_cancelled"
	success_voice_line = "arrive_abroad"
	target = "other_kingdom"
	
	bool spy_can_be_revealed_while_infiltrating = (owner.cs_spy_return_reveal_chance_negation != 1)
	float dist_mod = (sqrt(clamp(distance, 1, 100)))
	prepare_duration = (60 * dist_mod)
	prepare_status_text = "{owner} is attempting to infiltrate {action.target}."
	
	ai_validate = true //(!is_king)
	ai_validate_max_spies = (target.foreign_spies_count < 3 + floor(target.realms_count / 10))
	ai_validate_target = (ai_validate_max_spies && !spy_is_known)
	ai_eval_target = (ai_validate_target and target_kingdom_nearby_eval * target.army_strength)
	
	cost
	{
		gold = (50 + SSum(owner.kingdom, 0.1))
	}
	
	cancel_events
	{
		target_kingdom kingdom_destroyed
	}
	
	cancelled_message_caption = "Infiltration stopped"
	cancelled_message_texts
	{
		text kingdom_destroyed = "Unfortunately, our plans to spy on {target} were ended by their sudden destruction. {owner} has returned to our royal court."
	}
	
	outcomes
	{
		main success = ((100 - 70 * spy_is_known * (1 - owner.cs_spy_return_reveal_chance_negation)) * (1 + owner.cs_spy_reveal_chance_reduction_perc / 100))
		{
			message
			{
				text caption = "Kingdom infiltrated"
				text text = "{owner} successfully infiltrated {target} and awaits further orders."
				sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_Spy_Success.png:UI_Illustration_Spy_Success#2" //GUID:31b1fe07f5482f74e99aac10932bd4b1
				text bullet = "While our spy is there, he will look for beneficial opportunities that may arise. We will also be able to see all armies marching in {target}."
			}
		}
		option fail = 0 // forced if "plot" fails
		{
			case src_kingdom
			{
				message
				{
					text caption = "Spy failed"
					text text = "{owner} failed to infiltrate {target}"
				}
			}
			//...
		}
		option owner_imprisoned // kicks in when spy is known and success_chance is forced to 0
		{
			case src_kingdom
			{
				message
				{
					text caption = "Our spy was captured!"
					text text = ["{owner} was arrested for his past crimes in {target}.",
					 				"The return of {owner} to {target} was predestined to fail - the guards had not forgotten his last visit.",
					 				"As it could have been expected, {owner} was imprisoned in the minute he set his foot in {target}."]
					sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_Spy_Fail.png:UI_Illustration_Spy_Fail#2" //GUID:748a77e96be45c44ca41c0cefdac098f
				}
			}
			case target_kingdom
			{
				message
				{
					def = ActionOutcomeMessage
					text caption = "Foreign spy was captured!"
					text text = ["We have arrested {owner} for past crimes.",
								 "At last we captured that fool {owner} - he dared return to our kingdom.",
								 "{owner} tried to return to our lands and this time our guards captured him immediately."]
					sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_Spy_Fail.png:UI_Illustration_Spy_Fail#2" //GUID:748a77e96be45c44ca41c0cefdac098f
					string voice_line = "narrator_voice:enemy_spy_captured"
				}
			}
		}
	}
	
	float puppet_rebel_distance_check_time = 120
	int max_rebel_puppet_distance = 4
}

/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////      BASE ACTIONS        //////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////

def RuinRelationsAction : SpyPlot
{
	name = "Ruin Relations"
	tooltip = $[
		"Order {owner} to attempt to ruin the relations between {owner.mission_kingdom} and another kingdom."
		"{p}However, there is always some small chance[ {alt:if}({reveal_chance_on_tick:%})] for him to be revealed."
	]
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_RuinRelations.tga:Icon_CharacterAction_RuinRelations#2" //GUID:2fdb485e6ed944d4e86e0737707e98fa
	target = "kingdom"
	
	fail_voice_line = null
	
	severity = "Mid"
	
	float upkeep_ssums_base = 0.02
	float upkeep_ssums_bias = 0.5 // 0 only source, 1 only target, anything in between lerps (0.5 is defacto avg)
	float gold_upkeep = (5 + ceil(MaxSSumsBlend(own_kingdom, owner.mission_kingdom, upkeep_ssums_base, upkeep_ssums_bias,5)))
	
	opportunity : null = false
	
	prepare_duration = -1
	prepare_tick = 90/240
	
	prepare_status_text = "{owner} is attempting to ruin the relations between {owner.mission_kingdom} and {action.target}."
	
	success_fail : null
	
	reveal_factors : null
	
	reveal_chance_on_tick = ((5 - owner.class_level / 5.0) * (1 - cs_spy_reveal_chance_reduction_perc/100))
	
	rel_drop_on_tick = ( (30 + floor(RndI(20, 50) * MapCL(owner, 1, 3), 10)) * ( 1 + own_character.cs_ruin_relations_perc / 100 ) )
	
	
	cancel_events
	{
		target_kingdom kingdom_destroyed
	}
	
	cancelled_message_caption = "Ruin relations stopped"
	cancelled_message_texts
	{
		text kingdom_destroyed = "As {target} no longer exists, {owner} was forced to stop his actions. It seems that he did a good job."
	}
	
	src_messages
	{
		text success_undetected = ["{owner} proved he has the tongue of a snake and the wits of a diplomat, as he ruined the relations between {owner.mission_kingdom} and {target} by speaking with the right people.",
		"{owner} managed to forge some compromising letters of correspondence between {target} and {owner.mission_kingdom}, putting a dent in their relations.",
		"{owner} took advantage of a recent royal banquet and managed to speak privately with some of {owner.mission_kingdom.king:s} advisors. During their conversation, he made sure to mention some made-up facts about how {target} is scheming behind their backs."]
		text fail_revealed = ["{owner} was seen swapping some of {owner.mission_kingdom:s} letters of correspondence with fake ones mentioning {target}.",
		"{owner} got drunk and began boasting about his plans compromise the relations between {owner.mission_kingdom} and {target}. Needless to say, he was revealed on the following day.",
		"{owner.mission_kingdom:s} scribes proved to be experts at their job, as they found some letters aimed at compromising {target} that were ridden with odd handwriting and grammatical errors. Shortly after, the papers were traced back to our {owner}."]
		text plot_invalidated = "Due to the turn of events, {owner} can no longer ruin the relations between {owner.mission_kingdom} and {target}."
	}
	
	mission_kingdom_messages // what the mission kingdom sees
	{
		text success_undetected = ["Our relations have mysteriously worsened with {target_kingdom} - undoubtedly the work of an enemy spy... Sadly, the perpetrator remains unknown.",
		"Sire, {target_kingdom} have sent us angry letters condemning us of things we haven't done! We suspect this was due to enemy espionage.",
		"Our relations with {target_kingdom} have significantly deteriorated for no apparent reason! While investigations are underway, we suspect someone outside our kingdom had a hand in this..."]
		text fail_revealed = ["{src_kingdom:anian:cap} spy was trying to ruin our relations with {target_kingdom}! Fortunately, we got wind of his plot without the {target_kingdom:ians} realizing what was going on.",
		"We discovered {src_kingdom:anian:cap} spy has been sending damning letters to {target_kingdom}, trying to ruin our relations with them! Good thing we caught the rat in time.",
		"My lord, we bear troubling news - {src_kingdom:anian:cap} spy has been ruining our relations with {target_kingdom}! Who knows for how long this has been going on..."]
	}
	
	target_kingdom_messages // what the target kingdom sees
	{
		text success_undetected = ["Our relations with {mission_kingdom} have suddenly deteriorated! Someone must be messing with our negotiations, although the culprit's whereabouts remain hidden...",
		"Sire, we've received some rather angry letters from {mission_kingdom}... However, their wording and the reasoning behind them seems odd, pointing us to believe that this might be the work of another kingdom.",
		"The {mission_kingdom:ians} are angry at our kingdom, for reasons unknown to us! Might this be the work of a pesky spy? The question is, where is he hiding..."]
	}
	
	// mission_kingdom_event = RuinedRelationsMissionKingdomEvent
	// target_kingdom_event = RuinedRelationsTargetKingdomEvent
	
	outcomes : null
	{
		//log = 1
		
		option success
		{
			trigger foreign_spy_succeeded
			{
				target = (mission_kingdom)
				param = (owner)
			}
			
			case src_kingdom
			{
				message
				{
					text caption = "Spy succeeded"
					text text = "{src_messages.success_undetected}"
					sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_Spy_Success.png:UI_Illustration_Spy_Success#2" //GUID:31b1fe07f5482f74e99aac10932bd4b1
				}
			}
			case mission_kingdom
			{
				message
				{
					//def = (mission_kingdom_event)
					def = ActionOutcomeMessage
					text caption = "Relations Ruined"
					text text = "{mission_kingdom_messages.success_undetected}"
					icon = "Assets/UI/Elements/msg_icons/Icon_Message_IncomingOffer_Negative.png:Icon_Message_IncomingOffer_Negative#2" //GUID:f16b118485fa3de4ca358309faf0b723
				}
			}
			case target_kingdom
			{
				message
				{
					//def = (target_kingdom_event)
					def = ActionOutcomeMessage
					text caption = "Relations Ruined"
					text text = "{target_kingdom_messages.success_undetected}"
					icon = "Assets/UI/Elements/msg_icons/Icon_Message_IncomingOffer_Negative.png:Icon_Message_IncomingOffer_Negative#2" //GUID:f16b118485fa3de4ca358309faf0b723
				}
			}
			
			also rel_change = (-1 * rel_drop_on_tick)
			{
				src_kingdom = (mission_kingdom)
				tgt_kingdom = (target_kingdom)
				
				case target_kingdom
				{
					text bullet = "[Relations with {mission_kingdom}: {outcome.value:bonus_dark}]"
				}
				case mission_kingdom
				{
					text bullet = "[Relations with {target_kingdom}: {outcome.value:bonus_dark}]"
				}
				case default
				{
					text bullet = "[Relations between {mission_kingdom} and {target_kingdom}: {outcome.value:bonus_dark}]"
				}
			}
		}
		
		option fail = (reveal_chance_on_tick)
		{
			case src_kingdom
			{
				message
				{
					text text = "{src_messages.fail_revealed}"
				}
				string voice_line = "character_voice:action_failed"
			}
			case mission_kingdom
			{
				message
				{
					def = ActionOutcomeMessage
					sprite icon = "Assets/UI/Elements/msg_icons/Icon_Message_GenericEvent_Negative.png:Icon_Message_GenericEvent_Negative#2" //GUID:f955d92cf71058746985a61f90487bb9
					text text = "{mission_kingdom_messages.fail_revealed}"
				}
			}
			
			main owner_escaped = (escape_chance)
			option owner_imprisoned
			{
				message
				{
					sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_Spy_Fail.png:UI_Illustration_Spy_Fail#2" //GUID:748a77e96be45c44ca41c0cefdac098f
				}
			}
			option owner_killed
			
			also rel_change = (reveal_rel_change)
		}
	}
}


def SowDissentAction : SpyPlot
{
	name = "Sow dissent"
	tooltip = $[
		"Order {owner} to attempt to reduce the opinion of {owner.mission_kingdom:ians} of their king."
		"{p}However, there is always some small chance[ {alt:if}({reveal_chance_on_tick:%})] for him to be revealed."
	]
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_SowDissent.tga:Icon_CharacterAction_SowDissent#2" //GUID:5eeca86f30dd1294e8f60de3360b5b75
	
	severity = "Mid"
	
	float upkeep_ssums_base = 0.02
	float upkeep_ssums_bias = 0.5 // 0 only source, 1 only target, anything in between lerps (0.5 is defacto avg)
	float gold_upkeep = (5 + ceil(MaxSSumsBlend(own_kingdom, owner.mission_kingdom, upkeep_ssums_base, upkeep_ssums_bias,5)))
	
	fail_voice_line = null
	
	opportunity : null = false
	
	prepare_duration = -1
	prepare_tick = 120/240
	
	prepare_status_text = "{owner} is attempting to ruin the opinion of {owner.mission_kingdom:ians} of their king."
	
	success_fail : null
	
	reveal_factors : null
	
	sow_dissent_chance_on_tick = ((20 + owner.class_level * 2) * (1 + owner.cs_sow_dissent_chance/100))
	reveal_chance_on_tick = ((5 - owner.class_level / 5.0 ) * (1 - cs_spy_reveal_chance_reduction_perc/100))
	
	cancel_events
	{
		target_kingdom kingdom_destroyed
	}
	
	cancelled_message_caption = "Sow dissent stopped"
	cancelled_message_texts
	{
		text kingdom_destroyed = "As {owner.mission_kingdom} no longer exists, {owner} was forced to stop his actions. It seems that he did a good job."
	}
	
	src_messages
	{
		text fail_revealed = ["Some people distrusted {owner:s} rumors and started sniffing around him. From then on, things got from bad to worse.",
							  "{owner} tried to spread some lies against the {owner.mission_kingdom:ian} king, but got the wrong audience - some people too loyal to {owner.mission_kingdom.king}.",
							  "{owner} spread so much rumors about {owner.mission_kingdom.king}, that he sadly got too much attention on himself.",
							  "It seems that {owner.mission_kingdom.king} learned of {owner:s} lies and sent his most trusted people to investigate the matter."]
		
		NobilityOpinion
		{
			text success_undetected = ["{owner} managed to spread some rumors among the {owner.mission_kingdom:ian} nobility, that their king plans a horrific war.",
									   "{owner} convinced some {owner.mission_kingdom:ian} noblemen that their king is scared from betrayal and eager to execute anyone close to him on the slightest suspicion.",
									   "Thanks to few coins from {owner}, the lowest mistresses of the night in {owner.mission_kingdom} now brag that their king has paid them a visit.",
									   "{owner} convinced some landlords in {owner.mission_kingdom}, that the king takes too much taxes from their lands."]
			//text fail_revealed = ["NobilityOpinion fail_revealed"]
			
		}
		ArmyOpinion
		{
			text success_undetected = ["{owner} spread a rumor among {owner.mission_kingdom:ian} soldiers, that their king will send them on a suicdal war.",
									   "{owner} told so many stories what a pathetic fighter {owner.mission_kingdom.king} is, that people in {owner.mission_kingdom} started telling jokes about their king.",
									   "{owner} almost organized a riot due to the poor condition of the army in {owner.mission_kingdom}.",
									   "{owner} spoke among {owner.mission_kingdom:ian} soldiers, that they have the worst armor - it seems that their king doesn't value their lives."]
			//text fail_revealed = ["ArmyOpinion fail_revealed"]
			
		}
		MerchantsOpinion
		{
			text success_undetected = ["{owner} managed to spread a clever rumor, that the trade taxes in {owner.mission_kingdom} will be increased. Results quickly followed.",
									   "{owner} convinced his wealthy friends in {owner.mission_kingdom}, that in no other kingdom are the merchants treated so unfair, and with disrespect.",
									   "{owner} made sure, that every merchant in {owner.mission_kingdom} will learn for the war their king plans with their biggest trade partner.",
									   "Why were merchants not well protected in {owner.mission_kingdom}, {owner} asked. This fair claim was adopted by the local merchants guild."]
			//text fail_revealed = ["MerchantsOpinion fail_revealed"]
			
		}
		ClergyOpinion
		{
			text success_undetected = ["{owner} spoke among the {owner.mission_kingdom:ian} clergy about sinful deeds of their king.",
									   "{owner} managed to convince some important people in {owner.mission_kingdom}, that their king is an atheist.",
									   "{owner} raised the awareness of the {owner.mission_kingdom:ian} clergy about how little their king does to support {owner.mission_kingdom.religion:ism}.",
									   "Considering {owner.mission_kingdom.king} actual behaviour, it wasn't so difficult for {owner} to spread rumors of his participation in sinful rituals."]
			//text fail_revealed = ["ClergyOpinion fail_revealed"]
		}
		PeasantryOpinion
		{
			text success_undetected = ["{owner} visited many farmlands in {owner.mission_kingdom} and insisted that {owner.mission_kingdom.king} has increased the taxation of their monthly yields.",
									   "{owner} spread false rumors among the peasantry of {owner.mission_kingdom}, claiming that rebels are about to rise and plunder their lands.",
									   "{owner} played {owner.mission_kingdom:s} peasantry like a fiddle, convincing them that {owner.mission_kingdom.king} cares only for the rich and highborn.",
									   "{owner} turned the attention of the good and ordinary people of {owner.mission_kingdom} to how they starve, while the royalties feast and bathe in riches.",
									   "{owner} made up a story and paid a dozen bards to tell it around. It instantly became a blood-chilling legend - have you not heard that {owner.mission_kingdom.king} is a creature, wandering the nights and sucking the blood of innocent people?"]
			//text fail_revealed = ["PeasantryOpinion fail_revealed"]
		}
		// text success_undetected = ["{owner} proved he has the tongue of a snake and the wits of a diplomat, as he ruined the relations between {owner.mission_kingdom} and {target} by speaking with the right people.",
		// "{owner} managed to forge some compromising letters of correspondence between {target} and {owner.mission_kingdom}, putting a dent in their relations.",
		// "{owner} took advantage of a recent royal banquet and managed to speak privately with some of {owner.mission_kingdom.king:s} advisors. During their conversation, he made sure to mention some made-up facts about how {target} is scheming behind their backs."]
		// text fail_revealed = ["{owner} was seen swapping some of {owner.mission_kingdom:s} letters of correspondence with fake ones mentioning {target}.",
		// "{owner} got drunk and began boasting about his plans compromise the relations between {owner.mission_kingdom} and {target}. Needless to say, he was revealed on the following day.",
		// "{owner.mission_kingdom:s} scribes proved to be experts at their job, as they found some letters aimed at compromising {target} that were ridden with odd handwriting and grammatical errors. Shortly after, the papers were traced back to our {owner}."]
		text plot_invalidated = "Due to the turn of events, {owner} can no longer ruin the opinion of the {owner.mission_kingdom:ians} of their king."
	}
	
	mission_kingdom_messages // what the mission kingdom sees
	{
		text fail_revealed = ["We finally found {owner.kingdom:anian} spy, who spread nasty rumors about our king!",
							  "We got the name of the dirty liar, spreading rumors about our king - {owner.kingdom:anian} spy!",
							  "At last we found out who is the cunning spy, doing his best to reduce the opinions of our people! As we suspected, he is {owner.kingdom:anian}.",
							  "It is hard to beleive, but the {owner.kingdom:anian}, who turned out to spread lies about our king, dared to try and befog our royal guards. It was a mistake."]
		
		NobilityOpinion
		{
			text success_undetected = ["Our nobles think that their {owner.mission_kingdom.king.title} is about to order mass executions, aimed at anyone he suspects of betrayal. It seems a foreign spy has been plaguing their minds...",
									   "A foreign spy conspires with our own aristocrats day and night, convincing them that the dynasty of our {owner.mission_kingdom.king.title} is not worthy of rulership.",
									   "A foreign spy spreads false rumors among the noble ladies in our kingdom, describing digraceful deeds of our {owner.mission_kingdom.king.title} during the darkest ours of the nights.",
									   "These foreign spies have no shame! They spread rumors, that our {owner.mission_kingdom.king.title} is actually a bastard and has no claim to the throne!"]
			//text fail_revealed = ["NobilityOpinion fail_revealed"]
			
		}
		ArmyOpinion
		{
			text success_undetected = ["Our army has protested about a supposed suicidal war that is headed their way. Could there be a foreign spy in our midst, spreading false rumors?",
									   "False rumors about an upcoming war with strong enemies made our soldiers tense and discontented. Surely, a foreign spy caused this.",
									   "A foreign spy dared to spread rumors, that our {owner.mission_kingdom.king.title} is a coward and cannot fight.",
									   "Due to the poisonous words of foreign spies, our armymen now think they have the worst equipment and supplies in the entire world."]
			//text fail_revealed = ["ArmyOpinion fail_revealed"]
			
		}
		MerchantsOpinion
		{
			text success_undetected = ["Our merchants seem to think that we are about to wage war on our biggest trade partners. Such nonsense can only be concocted by a foreign spy...",
									   "False rumors of higher trade taxes, probably spread by foreign spies, made our merchants angry.",
									   "Some bandits robbed and killed few of our most prominent tradesmen, even though they had nothing that could be stolen. This was definitely organized by a foreign spy!",
									   "A strange man, that has presented himself as a foreign merchant, but was probably a spy, managed to convince the leaders of our merchant guild, that our  {owner.mission_kingdom.king.title} treats them poorly."
									   ]
			//text fail_revealed = ["MerchantsOpinion fail_revealed"]
			
		}
		ClergyOpinion
		{
			text success_undetected = ["Our [{owner.mission_kingdom.is_christian:if}clergymen|{owner.mission_kingdom.is_muslim:if}scholars|shamans] believe that {owner.mission_kingdom.king} has become a corrupted sinner. Only a foreign spy can spread such false rumors!",
									   "A foreign spy managed to convince our [{owner.mission_kingdom.is_christian:if}clergymen|{owner.mission_kingdom.is_muslim:if}scholars|shamans], that our {owner.mission_kingdom.king.title} is an atheist!",
									   "Our [{owner.mission_kingdom.is_christian:if}clergymen|{owner.mission_kingdom.is_muslim:if}scholars|shamans] suddenly decided, that they need to be treated with more respect. Surely a foreign spy spread some lies regarding what {owner.mission_kingdom.king} said or did.",
									   "Someone managed to convince our [{owner.mission_kingdom.is_christian:if}clergymen|{owner.mission_kingdom.is_muslim:if}scholars|shamans], that they deserve significantly more gold for their religious activities. This looks like the work of a foreign spy."]
			//text fail_revealed = ["ClergyOpinion fail_revealed"]
		}
		PeasantryOpinion
		{
			text success_undetected = ["Our peasantry has been protesting about a supposed tax increase. It seems like a foreign spy was spreading these false rumors, as we haven't planned anything of such sort...",
									   "Someone put the idea that peasants in other kingdoms have much more freedom and riches than in {owner.mission_kingdom}. This is probably the work of a foreign spy.",
									   "Lies about repressions by our {owner.mission_kingdom.king.title} over ordinary people in {owner.mission_kingdom} made the peasantry worried and angry. Probably a foreign spy spreads these around.",
									   "Someone is travelling from one inn to another, telling funny and untrue stories, that make {owner.mission_kingdom.king} look like a fool. This is probably a foreign spy."]
			//text fail_revealed = ["PeasantryOpinion fail_revealed"]
		}
		
		// text success_undetected = ["Our relations have mysteriously worsened with {target_kingdom} - undoubtedly the work of an enemy spy... Sadly, the perpetrator remains unknown.",
		// "Sire, {target_kingdom} have sent us angry letters condemning us of things we haven't done! We suspect this was due to enemy espionage.",
		// "Our relations with {target_kingdom} have significantly deteriorated for no apparent reason! While investigations are underway, we suspect someone outside our kingdom had a hand in this..."]
		// text fail_revealed = ["{src_kingdom:anian:cap} spy was trying to ruin our relations with {target_kingdom}! Fortunately, we got wind of his plot without the {target_kingdom:ians} realizing what was going on.",
		// "We discovered {src_kingdom:anian:cap} spy has been sending damning letters to {target_kingdom}, trying to ruin our relations with them! Good thing we caught the rat in time.",
		// "My lord, we bear troubling news - {src_kingdom:anian:cap} spy has been ruining our relations with {target_kingdom}! Who knows for how long this has been going on..."]
	}
	
	// mission_kingdom_event = RuinedRelationsMissionKingdomEvent
	
	outcomes : null
	{
		//log = 1
		option success // sow_dissent_chance_on_tick, but hidden so that the action tooltip doesn't show the value. Check the "default" down below.
		{
			trigger foreign_spy_succeeded
			{
				target = (mission_kingdom)
				param = (owner)
			}
			
			case src_kingdom
			{
				message
				{
					text caption = "Spy succeeded"
					text = (SowDissentAction.src_messages[random_opinion].success_undetected) //"{src_messages.success_undetected}"
					sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_Spy_Success.png:UI_Illustration_Spy_Success#2" //GUID:31b1fe07f5482f74e99aac10932bd4b1
				}
			}
			case mission_kingdom
			{
				message
				{
					//def = (mission_kingdom_event)
					opinion_name_def = (mission_kingdom.opinions[random_opinion].def)
					def = ActionOutcomeMessage
					text caption = "{opinion_name_def.name} opinion decreased"
					text = (SowDissentAction.mission_kingdom_messages[random_opinion].success_undetected) //"{mission_kingdom_messages.success_undetected}"
					icon = "Assets/UI/Elements/msg_icons/Icon_Message_KnighEscaped_Negative.png:Icon_Message_KnighEscaped_Negative#2" //GUID:16663f8bd4ac6f84fa31fceb457a5b9c
					illustration = "Assets/UI/Messages/Illustrations/UI_Enemy_Spy_Success_Undetected.tga:UI_Enemy_Spy_Success_Undetected#2" //GUID:8dd910aa9f0c2b445b61e5b1529e1ef5
				}
			}
			
			also opinion_change = (-1 * RndI(1, 2))
			{
				kingdom = (mission_kingdom)
				opinion = (random_opinion)
				opinion_name_def = (src_kingdom.opinions[opinion].def)
				case mission_kingdom
				{
					text bullet = "{opinion_name_def.name} opinion: {outcome.value:bonus_dark}"
				}
				case default
				{
					text bullet = "{opinion_name_def.name} opinion in {mission_kingdom}: {outcome.value:bonus_dark}"
				}
			}
		}
		
		option fail = (reveal_chance_on_tick)
		{
			case src_kingdom
			{
				message
				{
					text = (SowDissentAction.src_messages.fail_revealed) //"{src_messages.fail_revealed}"
				}
				string voice_line = "character_voice:action_failed"
			}
			case mission_kingdom
			{
				message
				{
					def = ActionOutcomeMessage
					sprite icon = "Assets/UI/Elements/msg_icons/Icon_Message_GenericEvent_Negative.png:Icon_Message_GenericEvent_Negative#2" //GUID:f955d92cf71058746985a61f90487bb9
					text = (SowDissentAction.mission_kingdom_messages.fail_revealed) //"{mission_kingdom_messages.fail_revealed}"
				}
			}
			
			main owner_escaped = (escape_chance)
			option owner_imprisoned
			{
				message
				{
					sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_Spy_Fail.png:UI_Illustration_Spy_Fail#2" //GUID:748a77e96be45c44ca41c0cefdac098f
				}
			}
			option owner_killed
		}
		option default = (100 - sow_dissent_chance_on_tick - reveal_chance_on_tick)
		{
			case src_kingdom
			{
				message
				{
					def = null
				}
			}
			case mission_kingdom
			{
				message
				{
					def = null
				}
			}
		}
	}
}

// def RuinedRelationsMissionKingdomEvent : OkMessage //result of RuinRelations action
// {
// 	icon = "Assets/UI/Elements/Common/Icons/Icon_Action_Generic_Spy.png:Icon_Action_Generic_Spy#2" //GUID:8fabffe00ddb7e442bdc7bffc086f6d0
// 	caption = "Relations Ruined!"
// 	body = "Our relations with {target_kingdom} dropped due to enemy espionage."
// }

def WitchHuntAction : SpyPlot //forces WitchHuntRevealAction on each foreign spy, effectly catching them individualy, until the max
{
	name = "Witch Hunt"
	tooltip = "Initiate a kingdom-wide investigation to look for foreign spies.{p}{p}Even if the spy does everything in his power to succeed (chance indicated below), there is an additional hidden chance for fail, if foreign spies evade detection or there aren't any in the kingdom."
	icon = "Assets/UI/Elements/Actions/Icon_Opportunity_WitchHunt.tga:Icon_Opportunity_WitchHunt#2" //GUID:0cbec89dd98589447a5c1f52b7067153
	
	severity = "Low"
	prepare_voice_line = "witch_hunt_action"
	cancelled_voice_line = null
	success_voice_line = null
	fail_voice_line = "narrator_voice:witch_hunt_fail"
	
	opportunity
	{
		chance_to_add_on_tick = (3 + 10 * own_kingdom.num_spies + 100 * from_event)
	}
	
	mission = "Ignore"
	
	success_base_chance = 40
	success_fail
	{
		sf_our_princess_in_tgt_kingdom = (0)
		sf_our_queen_in_tgt_kingdom = (0)
		sf_their_negative_CA = (0)
		sf_they_are_our_vassal = (0)
		sf_their_negative_opinions = (0)
		sf_their_positive_CA = (0)
		sf_their_king_spy_class = (0)
		sf_their_skills_traditions = (0)
		sf_their_positive_opinions = (0)
		sf_their_important_relatives = (0)
		sf_their_spy_keeps = (0)
		
		perc sf_our_spy_witch_hunt_bonus = (cs_witch_hunt_efficiency_perc)
		{
			text name = "Spy's specialization in Witch hunt"
		}
		
		// defense(%) ---------------------------------------------------------------------
		// all negatives are summed up and multiply with the success chance to diminish it
		// --------------------------------------------------------------------------------
		
		// perc sf_rebellion_is_famous = (-rebellion.is_famous * 10) //!!! not implemented
		// {
		// 	text name = "Rebellion is famous"
		// }
		// perc sf_regular_rebel_supporters = (-rebellion.regular_rebel_armies * 3) //!!! not implemented
		// {
		// 	text name = "Regular rebels supporting {target}"
		// }
		// perc sf_general_rebel_supporters = (-rebellion.general_rebel_armies * 5) //!!! not implemented
		// {
		// 	text name = "Generals supporting {target}"
		// }
	}
	
	reveal_base_chance = 20
	penalty reveal_factors
	{
		sf_spy_is_king = (-10 * owner.is_king)
		{
			text name = "Our spy is king"
		}
		sf_their_king_stars = (0)
		sf_their_king_spy_class = (0)
		sf_their_positive_CA = (0)
		sf_their_princess_in_our_kingdom = (0)
		sf_their_queen_in_our_kingdom = (0)
	}
	
	
	int max_caught_spies = 3
	
	prepare_duration = 120
	
	cost { gold = ((1000 + SSum(owner.kingdom, 0.75, 50)) * (1 - 0.2 * owner.is_spy)) }
	
	prepare_status_text = "{owner} is leading a witch hunt in search for foreign spies in {owner.kingdom}."
	
	src_messages
	{
		text caught_spies_outcomes = "[{caught_any_spies:if}{p}][{caught_spies_imprisoned:if}{p}{blt} We managed to apprehend {caught_spies_imprisoned}.][{caught_spies_escaped:if}{p}{blt} Alas, {caught_spies_escaped} escaped from our clutches.][{caught_spies_killed:if}{p}{blt} {caught_spies_killed} died while trying to escape.]"
		
		text new_opportunity = "{owner} has reasons to beleive there are foreign spies in our kingdom. "
		//text success_revealed = "{owner} managed to find the leads of some foreign spies, but it was actually a trap!"
		text success_undetected_caught_some = ["{owner:s} witch hunt proved to be beneficial, as we caught some people, plotting against our {kingdom.KingdomType}!{caught_spies_outcomes}",
							"Despite the population's muttering, {owner:s} witch hunt proved to be warranted. We discovered some foreign spy activity!{caught_spies_outcomes}",
							"Sire, good news! Our witch hunt was not in vain, as we discovered foreign forces secretly plotting against our {kingdom.KingdomType}!{caught_spies_outcomes}"]
		text success_undetected_didnt_catch = ["Alas, we couldn't find any traces of foreign spies in our {kingdom.KingdomType}. We are either paranoid, or the pesky moles have burrowed deep underground.",
							"Unfortunately, {owner:s} witch hunt failed to find any foreign spy activity within our {kingdom.KingdomType}.",
							"After a careful investigation, our agents have reported that no foreign spy activity could be found within our {kingdom.KingdomType}."]
		text fail_revealed = ["Sadly, a foreign spy that {owner} tried to catch was prepared and led them into a trap. We found the body of our brave knight this morining near a countryside road.",
							  "Sire, a week ago {owner} reported, that he cought some leads to foreign spy activity. This was the last we've heard of him and we assume that he is already dead.",
							  "A day after {owner} reported, that he is almost sure he knows who the foreign spy in our kingdom is, we found him poisoned in his home."]
		text fail_undetected = ["{owner} couldn't find any leads to foreign spy activity. Maybe if there were any, they already left {owner.kingdom}.",
								"After thorough investigation, {owner} concluded, that there are certainly no spies in our kingdom. We can only hope that he is right.",
								"{owner} found some trails of foreign spy activity, but they quickly went cold. If there are really some spies in {owner.kingdom}, they probably went into hiding already.",
								"The hunt for foreign spies ended with no results - {owner} has some suspicions, but no proofs at all. He promised that he'll stay vigilant."]
		//"{target:s} rebel entourage caught the scent of {owner}, forcing our spy to abandon his cover for now."]
	}
	
	outcomes
	{
		main success
		{
			option success_undetected
			{
				case src_kingdom
				{
					message
					{
						switch_value = (caught_any_spies)
						case 1
						{
							text caption = "Spies caught"
							text text = "{src_messages.success_undetected_caught_some}"
							icon = "Assets/UI/Elements/msg_icons/Icon_Message_KnightImprisoned_Positive.png:Icon_Message_KnightImprisoned_Positive#2" //GUID:e739776a08b7b294aa0fd2251a7df694
							string voice_line = "narrator_voice:witch_hunt_success"
						}
						case 0
						{
							text caption = "Witch hunt failed"
							text text = "{src_messages.success_undetected_didnt_catch}"
							icon = "Assets/UI/Elements/msg_icons/Icon_Message_Action_Negative.png:Icon_Message_Action_Negative#2" //GUID:e4b41d0620e99ca47ac12a4dcfbd996e
							string voice_line = "narrator_voice:witch_hunt_fail"
						}
					}
				}
			}
			option success_revealed = 0
			// option success_revealed
			// {
			// 	case mission_kingdom
			// 	{
			// 		message
			// 		{
			// 			def = null
			// 		}
			// 	}
			// 	option owner_imprisoned = 0
			// 	option owner_escaped = 0
			// }
		}
		option fail
		{
			option fail_revealed
			{
				case mission_kingdom
				{
					message
					{
						def = null
					}
				}
				option owner_imprisoned = 0
				option owner_escaped = 0
			}
		}
	}
}

// hidden actions
// success means spy remains undetected, fail means revealed
template ResistRevealAction : SpyPlot
{
	name = "Avoid Reveal"
	tooltip = "The effort of {owner} to keep the secrecy of his mission" //"Hidden action, used to let {owner} be revealed on fail during counter espionage"
	
	mission = "Ignore"
	secondary = true
	prepare_duration = 0
	ai_validate = false
	
	show_in_action_bar = false
	show_in_character_widnow = false
	show_in_status = false
	
	reveal_base_chance = 10
	reveal_factors : null
	{
		sf_base = (reveal_base_chance)
		{
			text name = "Base chance"
			show_always = false
		}
	}
	
	src_messages
	{
		text fail_revealed = "{mission_kingdom} revealed our {owner}!"
	}
	
	mission_kingdom_messages // what the target kingdom sees
	{
		text fail_revealed = "We have revealed {owner} as {owner.kingdom:anian} spy!"
	}
	
	cost : null = null
	
	severity = "Low"
	
	opportunity : null = false
	
	success_fail : null
	success_reveal_chance = null
	
	outcomes
	{
		option success : null = 0
		{
			message
			{
				def = null
			}
		}
		
		fail
		{
			option fail_undetected : null
			{
				message
				{
					def = null
				}
			}
			option fail_revealed
			{
				main owner_escaped
				{
					case src_kingdom
					{
						message
						{
							string voice_line = "narrator_voice:our_spy_escaped"
						}
					}
				}
			}
		}
	}
}

def ArmyResupplyCastleAction : CharacterAction
{
	name = "Supply army"
	tooltip = $["Supply the army of {obj}"
	"[{p}With our current resources, we can restore {potential_supplies:nonzero} supplies]"]
	]
	icon = "Assets/UI/Elements/Actions/Icon_Opportunity_SupplyArmy.tga:Icon_Opportunity_SupplyArmy#2" //GUID:c6d444ef13995b843bea3aebb0970c0e
	
	show_in_action_bar = false
	show_in_character_widnow = false
	show_in_status = false
	ai_validate = true
	prepare_voice_line = "ResupplyArmy"
	decline_voice_line = "Decline"
	
	cost
	{
		food = (ceil(min(cost_full.food, floor(available.food))))
		gold = (ceil(min(cost_full.gold, floor(available.gold))))
	}
	cost_full
	{
		food = (ceil(5 * obj.army.missing_supplies))
		gold = (ceil(10 * obj.army.missing_supplies * (1 - obj.kingdom.ks_resupply_price_gold_reduction_perc / 100)))
	}
}

def WitchHuntRevealAction : ResistRevealAction
{
	name = "Avoid reveal"
	tooltip = "The effort of {owner} to keep the secrecy of his mission" //"Hidden action, used to let {owner} be revealed on fail during counter espionage"
	
	reveal_base_chance = 80
	reveal_factors //: null
	{
		// sf_base = (50)
		// {
		// 	text name = "Base chance"
		// 	show_always = false
		// }
		sf_other_spies = (10 * (owner.mission_kingdom.foreign_spies_count - 1))
		{
			text name = "Other Spies"
		}
		// perc sf_their_efficienhcy = (mission_kingdom.ks_witch_hunt_efficiency_perc)
		// {
		// 	text name = "Their efficiency"
		// }
		
		// // defense
		
		// perc sf_class_level = (-owner.class_level * 2)
		// {
		// 	//perc = true
		// 	text name = "Class Level"
		// }
		// perc sf_our_skills = (-1 * owner.cs_spy_reveal_chance_reduction_perc)
		// {
		// 	text name = "Skills and Traditions"
		// }
	}
	
	src_messages
	{
		text fail_revealed = ["Sire, the pesky {mission_kingdom:ians} organized a witch hunt and revealed our {owner}!",
		"Alas, {owner:s} activities could not remain hidden for {mission_kingdom}. After a lenghtly witch hunt, they managed to discover our spy.",
		"Our infiltration within {mission_kingdom} has been compromised! {owner} was discovered, as part of a witch hunt carried within his mission kingdom."]
	}
	
	outcomes
	{
		option fail
		{
			option fail_revealed
			{
				main owner_escaped = 20
				option owner_imprisoned = 60
				option owner_killed = 20
				case mission_kingdom
				{
					message
					{
						def = null
					}
				}
			}
		}
	}
}

// executed on special events where spies are forcibly revealed - like when a puppet-papacy-cleric becomes the pope. 
def ForceRevealAction : ResistRevealAction
{
	name = "Force reveal"
	reveal_factors : null
	{
		sf_base = (100)
		{
			text name = "Base chance"
			show_always = false
		}
	}
	
	decline_voice_line = null
	prepare_voice_line = null
	cancelled_voice_line = null
	success_vice_line = null
	fail_voice_line = null
}

def PrinceBecomesKingRevealAction : ResistRevealAction
{
	decline_voice_line = null
	prepare_voice_line = null
	cancelled_voice_line = null
	success_vice_line = null
	fail_voice_line = null
	
	src_messages
	{
		text fail_revealed = "As {owner.mission_kingdom.king} became the ruler {owner.mission_kingdom}, his loyalty towards {owner} suddenly dissipated. Thus, our spy's cover has been compromised!"
	}
	
	mission_kingdom_messages // what the target kingdom sees
	{
		text fail_revealed = "We have revealed {owner} as {owner.kingdom:anian} spy! Evidently, he was poisoning the mind of our new ruler, {mission_kingdom.king}, who had the decency to reveal this."
	}
	
	reveal_factors : null
	{
		sf_base = (10)
		{
			text name = "Base chance"
			show_always = false
		}
		sf_heir_espionage_stars = (owner.mission_kingdom.heir.espionage_ability * 5)
		{
			text name = "Their Heir's Espionage Ability (x5)"
		}
		sf_heir_class = (owner.mission_kingdom.heir.class_level)
		{
			text name = "Their Heir's Level"
		}
		sf_heir_spy_class = (owner.mission_kingdom.heir.is_spy * owner.mission_kingdom.heir.class_level * 2)
		{
			text name = "Their Heir's Spy Level (x2)"
		}
		sf_their_positive_CA = (MapCA(owner.mission_kingdom, 0, 0, 10))
		{
			text name = "Their Crown Authority (x2)"
		}
		sf_their_princess_in_our_kingdom = 10
		{
			text name = "Their Princess"
		}
		perc sf_their_efficienhcy = (mission_kingdom.ks_witch_hunt_efficiency_perc)
		{
			text name = "Their efficiency"
		}
		
		//Defense
		perc sf_class_level = (-1 * 2 * owner.class_level)
		{
			text name = "Spy Level (x2)"
		}
		
		perc sf_our_skills = (-1 * owner.cs_spy_reveal_chance_reduction_perc)
		{
			text name = "Skills and Traditions"
		}
	}
}

def BribeNobleAction : SpyPlot //this is an opportunity, but a fundamental one
{
	name = "Bribe [{target}|a noble]"
	tooltip = "Order {owner} to attempt to bribe [{target}|a noble in {owner.mission_kingdom}]."
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_BribeNoble.tga:Icon_CharacterAction_BribeNoble#2" //GUID:d028f2afd1e141f4394bcbd92753d79b
	//show_in_action_bar = false
	//show_in_character_widnow = false
	success_voice_line = "action_succeeded"
	
	severity = "Low"
	success_base_chance = 30 //(25 + owner.cs_bribe_CTS_perc) //+ owner.kingdom.ks_bribe_CTS_perc <-- this is already in cs
	//reveal_base_chance = 20
	success_fail
	{
		sf_their_diplomat_hold_pact_against_us = ( 20 * (target.pact.target == own_kingdom))
		{
			text name = "Holds a pact against us"
		}
	}
	our_sf_stats
	{
		cs_bribe_CTS_perc { perc = false }
	}
	
	float ratio = (1 + owner.mission_kingdom.ks_own_knight_bribe_cost_perc / 100 - owner.cs_bribe_cost_upkeep_reduction_perc / 100 + (0.5 * target.is_crusader))
	float ssums_base = (ratio * 0.5)
	float add_gold_cost = (ratio * 300)
	
	opportunity
	{
		chance_to_add_on_tick = 30
		chance_to_del_on_tick = 10
		max_targets = 3
	}
	
	prepare_status_text = "{owner} is attempting to bribe {action.target}."
	
	src_messages
	{
		text new_opportunity = ["{owner} overheard that {target} could be easily bribed. Apparently the {target.kingdom:ian} values gold more than anything else.",
		"{owner} has informed us that him and {target} have formed close relations, to the point that the {target.kingdom:ian} can easily be bribed for the right amount of gold",
		"{owner} learned that {target:s} allegiance to his {target.kingdom.king.title} is fleeting. Perhaps our spy can attempt to bribe the {target.kingdom:ian} and make use of his occupation."]
		//text opportunity_lost = "{owner} lost his chance to bribe {target}."
		text success_undetected = ["{owner} successfully bribed {target}. His loyalty now secretly lies with us!",
	 				  			   "The risk was great, but in the end {target} took the bribe and now awaits orders from {owner}.",
	 				   			   "As expected, {target} was easily convinced to work for us. {owner} will make sure any commands from us will reach him."]
		text success_revealed = ["{owner} successfully bribed {target}, but someone found out he is doing something suspicious.",
								 "{owner} managed to bribe {target}, but his actions were too conspicuous and the {target.kingdom:ians} now know he is a spy.",
								 "Although {target} readily accepted {owner:s} bribe, their interaction was witnessed by some passersby who reported out spy to the local authorities."]
		text fail_undetected = ["{owner} was unable to bribe {target}, who is now even more loyal to his king.",
	 							"{target} refused the bribe {owner} offered to him.",
	 							"Trying to bribe {target} turned out to be a bad idea. He refused to even hear what {owner} has to offer."]
		text fail_revealed = ["Trying to bribe {target} was a terrible idea - he immediately reported {owner:s} actions.",
							  "Not only did {target} refuse our bribe, but he informed the guards that {owner} is a spy!",
							  "{target:s} trust could not be cracked. Even worse - he double-crossed {owner} and revealed him as a spy!",
							  "While scheming how to reach {target}, {owner} asked too many people too dangerous questions and in the end his plot got uncovered."]
		// text plot_revealed = ["{owner} was revealed while attempting to bribe {target}.",
		// 					  "While scheming how to reach {target}, {owner} asked too many people too dangerous questions and in the end his plot got uncovered."]
		text plot_invalidated = "Due to the turn of events, {owner} cannot try to bribe {target} any longer."
		//plot failed - cannot happen at the moment
	}
	
	mission_kingdom_messages // what the target kingdom sees
	{
		text success_revealed = ["{src_kingdom:anian:cap} spy bribed one of our knights, though it is yet unclear who! At least we uncovered the spy.",
		"We discovered {src_kingdom:anian} spy bribed one of our knights! Luckily, the target was {target}, who only took the money and then immediately revealed the spy.",
		"We learned that {src_kingdom:anian} spy bribed one of our knights! In the end, it was the spy's loud mouth that unveiled him, as he was overheard boasting about his 'wealth' and 'influence' in the local inn."]
		text fail_revealed = ["{src_kingdom:anian:cap} spy tried to bribe {target}, but our loyal knight refused and reported the event immediately.",
		"Our {target} informed us that {src_kingdom:anian} spy offered him some gold, in hopes of bribing him! Thankfully, our {target.class_name} did not succumb to the temptation and revealed the impostor.",
		"Sire, we've intercepted a large sum of gold hidden in a shipment of apples! Without doubt, it was a bribe intended for one of our knights, with all traces pointing to {src_kingdom:anian} spy."]
		//text plot_revealed = "We learned that {src_kingdom:anian} spy tried to bribe {target}, but got in the way of his cunning plan before they even met."
	}
	
	
	float gold_upkeep = (10 * (1 - own_character.cs_bribe_cost_upkeep_reduction_perc / 100))
	float upkeep_per_puppet_increase = (5 * (1 - own_character.cs_bribe_cost_upkeep_reduction_perc / 100))
	upkeep_subcategory = "Bribes"

	target = "character"
	target_vars
	{
		rightTextKey = "Action.costText"
	}
	
	cancel_events
	{
		target dying
		target imprisoned
	}
	
	cancelled_message_caption = "Bribing stopped"
	cancelled_message_texts
	{
		text dying = "{target:s} sudden death has halted our spy's attempts to bribe him. {owner} is now on the lookout for another corrupted {target.kingdom:ian} knight."
		text imprisoned = "{target} can no longer be bribed by our spies, as he was imprisoned by another kingdom. {owner} is once again on the lookout for another corrupted {target.kingdom:ian} knight."
	}
}

/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////      OPPORTUNITUES       //////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////

def ProvokeWarAction : SpyPlot
{
	name = "Provoke War[ with {target}]"
	icon = "Assets/UI/Elements/Actions/Icon_Opportunity_ProvokeWar.tga:Icon_Opportunity_ProvokeWar#2" //GUID:d87b74620dda40c4289ceb4d3f1d41b5
	
	target = "kingdom"
	
	tooltip = "Have {owner} attempt to provoke war between {owner.mission_kingdom} and [{target}|another kingdom]."
	prepare_status_text = "{owner} is looking for ways to provoke war between {owner.mission_kingdom} and {target}."
	success_voice_line = "action_succeeded"
	
	severity = "High"
	success_base_chance = 25
	//reveal_base_chance = 30
	float ssums_base = (MapCA(owner.mission_kingdom, 1, 2))
	float ssums_bias = 0.75 // 0 only source, 1 only target, anything in between lerps (0.5 is defacto avg)
	float add_gold_cost = 1000
	
	max_relationship = -200 //-500 // mission_kingdom and target_kingdom need to be below this relationship
	
	opportunity
	{
		chance_to_add_on_tick = 20
		chance_to_del_on_tick = 5
	}
	
	outcomes
	{
		main success
		{
			option success_revealed
			{
				case target_kingdom
				{
					message
					{
						icon = "Assets/UI/Elements/msg_icons/Icon_Message_WarDeclared.png:Icon_Message_WarDeclared#2" //GUID:3e80d4d6062b48948b964303521d1042
						voice_line = "narrator_voice:war_declared"
					}
				}
				main owner_escaped = (escape_chance)
				{
					message
					{
						illustration = "Assets/UI/Messages/Illustrations/UI_Enemy_Spy_Success_Undetected.tga:UI_Enemy_Spy_Success_Undetected#2" //GUID:8dd910aa9f0c2b445b61e5b1529e1ef5
					}
				}
				option owner_imprisoned
				{
					message
					{
						illustration = "Assets/UI/Messages/Illustrations/UI_Enemy_Spy_Success_Undetected.tga:UI_Enemy_Spy_Success_Undetected#2" //GUID:8dd910aa9f0c2b445b61e5b1529e1ef5
					}
				}
				option owner_killed
				{
					message
					{
						illustration = "Assets/UI/Messages/Illustrations/UI_Enemy_Spy_Success_Undetected.tga:UI_Enemy_Spy_Success_Undetected#2" //GUID:8dd910aa9f0c2b445b61e5b1529e1ef5
					}
				}
			}
		}
	}
	
	src_messages
	{
		text new_opportunity = ["{owner} has an opportunity to provoke war between {owner.mission_kingdom} and {target}, given how tense the relations between both kingdoms have become.",
		"{owner} has found a lead which could potentially spark war between {owner.mission_kingdom} and {target}. Should our spy proceed with this opportunity?"]
		//text opportunity_lost = "{owner} lost his opportunity to provoke war between {owner.mission_kingdom} and {target}."
		
		text success_undetected = ["Without leaving any trace, {owner} managed to turn the deteriorating relations between {mission_kingdom} and {target_kingdom} into full-fledged war.",
		"{owner} qickly took advantage of {owner.mission_kingdom:s} hatred towards the {target_kingdom:ians} and managed to provoke war between both kingdoms.",
		"Somehow, {owner} managed to cloud the mind of {owner.mission_kingdom.king}, convincing him that waging war against {target_kingdom} is of utmost importance."]
		text success_revealed = ["The deed is done - {owner} managed to provoke war between {mission_kingdom} and {target_kingdom}. Unfortunately for our spy, he was revealed as the conspirator behind this plot.",
		"While {owner} did manage to provoke war between {owner.mission_kingdom} and {target_kingdom}, his plot got revealed by some clerks who witnessed him forging a bunch of letters."]
		
		text fail_undetected = ["Evidently, war between {owner.mission_kingdom} and {target_kingdom} could not be provoked. At least our spy was diligent to keep his tracks unnoticed.",
		"{owner} will have to work harder if we want {owner.mission_kingdom} to enter war against {target_kingdom}. For now, our spy remains undetected and may continue his efforts in the future.",
		"It seems like {owner} forgot that he was supposed to provoke war between {mission_kingdom} and {target_kingdom}... The idiot has been spending most of his days getting blind drunk in the local tavern!"]
		text fail_revealed = ["Not only did {owner} fail to provoke war between {mission_kingdom} and {target_kingdom}, but he also got caught in the process. What a disaster...",
		"Alas, {owner} could not fool the {owner.mission_kingdom:ians} to enter war against {target_kingdom}. After sending dozens of forged letters, he was finally caught."]
		
		text plot_invalidated = "Due to the turn of events, {owner} can no longer try to provoke war between {mission_kingdom} and {target_kingdom}."
	}
	
	mission_kingdom_event = ProvokedWarEvent
	target_kingdom_event = ProvokedWarOtherEvent
	
	mission_kingdom_messages // what the mission kingdom sees
	{
		text success_revealed = ["Sire, we've been fooled. It seems like {owner} from {owner.kingdom} has been acting behind our backs for quite some time, leading to a sudden war between us and {target_kingdom}!",
		"Unbeknownst to us, a war declaration has been sent to {target_kingdom}! We traced the origins of the letter and its author turned out to be none other than {owner} of {owner.kingdom}..."]
		text fail_revealed = ["{owner.kingdom:anian:cap} spy was caught trying to provoke war between us and {target_kingdom}! Good thing we managed to stop the rat in time.",
		"We've discovered that {owner.kingdom:anian} spy was attempting to instigate war between our people and {target_kingdom}! Luckily, he wasn't very careful and allowed us to discover his plot easily."]
	}
	
	target_kingdom_messages
	{
		text success_revealed_caption = "War Provoked!"
		text success_revealed = "We've received a damning letter from {mission_kingdom.king} of {mission_kingdom}, proclaiming that his {mission_kingdom.KingdomType} has declared war against us! We suspect a spy has fabricated this feud, as the messenger who sent the letter spoke {owner.kingdom:ian}..."
	}
	
	mission_kingdom_voice_lines
	{
		string success_revealed = "narrator_voice:war_declared"
	}
	
	cancel_events
	{
		target_kingdom kingdom_destroyed
		target_kingdom war_started = (!target_valid)
		target_kingdom joined_war = (!target_valid)
	}
	
	cancelled_message_caption = "War provoking halted"
	cancelled_message_texts
	{
		text kingdom_destroyed = "The destruction of {target_kingdom} has stopped {owner:s} attempts to provoke war between its people and {mission_kingdom}."
		text war_started = "We've received intel that {target_kingdom} and {mission_kingdom} are at war! As a result, {owner} is no longer plotting to provoke war between both kingdoms."
		text joined_war = "We've received intel that {target_kingdom} and {mission_kingdom} are at war! As a result, {owner} is no longer plotting to provoke war between both kingdoms."
		
	}
}

def ProvokedWarEvent : OkMessage
{
	icon = "Assets/UI/Elements/msg_icons/Icon_Message_WarDeclared.png:Icon_Message_WarDeclared#2" //GUID:3e80d4d6062b48948b964303521d1042
	illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_GameStartedWarsMessage.tga:UI_Illustration_GameStartedWarsMessage#2" //GUID:256fa7a0dd092a342b3eb06cbd1d0eca
	caption = "War Provoked!"
	body = ["Sire, we've been fooled. We believe a foreign spy has been acting behind our backs for quite some time, leading to a sudden war between us and {target_kingdom}!",
	"Unbeknownst to us, a war declaration has been sent to {target_kingdom}! We could not trace the origins of the letter, but it reeks of an enemy spy..."]
	
	// ["Sire, we've entered war against {target}! The {target:ians} seem to think it was us who instigated the feud...",
	// "My lord, we've somehow declared war against {target}! Such a sudden and unexpected event carries the stench of an enemy spy acting behind our backs..."]
	
	voice_line = ProvokeWarAction.mission_kingdom_voice_lines.success_undetected
}

def ProvokedWarOtherEvent : OkMessage
{
	icon = "Assets/UI/Elements/msg_icons/Icon_Message_WarDeclared.png:Icon_Message_WarDeclared#2" //GUID:3e80d4d6062b48948b964303521d1042
	illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_GameStartedWarsMessage.tga:UI_Illustration_GameStartedWarsMessage#2" //GUID:256fa7a0dd092a342b3eb06cbd1d0eca
	caption = "War Provoked!"
	body = "We've received a damning letter from {mission_kingdom.king} of {mission_kingdom}, proclaiming that his {mission_kingdom.KingdomType} has declared war against us! Oddly, the messenger who sent this grave news wasn't even {mission_kingdom:ian}... Could a foreign spy be behind this?"
	
	voice_line = "narrator_voice:war_declared"
}

def SpyMurderAction : MurderPlot
{
	name = "Murder [{target}|a noble]"
	tooltip = "Have {owner} attempt to kill [{target}|a character of {owner.mission_kingdom}|a noble]."
	icon = "Assets/UI/Elements/Actions/Icon_Opportunity_Murder.tga:Icon_Opportunity_Murder#2" //GUID:631231cb6d4350e42b6d6b88a6f06e0e
	prepare_status_text = "{owner} is planning the assassination of {action.target}."
	success_voice_line = "action_succeeded"
	target = "character"
	
	severity = "Mid"
	success_base_chance = 25
	//reveal_base_chance = 50
	
	success_fail
	{
		sf_our_puppet = (20 * IsPuppetOf(target, owner))
		{
			text name = "Target is our puppet"
		}
	}
	
	opportunity
	{
		chance_to_add_on_tick = 15
		chance_to_del_on_tick = 35
		max_targets = 1
	}
	
	bool target_is_male = (target.sex = "Male")
	
	
	src_messages
	{
		text new_opportunity = "{owner} got close to {target} and now he can plan [{target_is_male:if}his|her] assassination." //[{target.sex.Male:if}his|her]
		//text opportunity_lost = "{target:s} assassination can no longer be organized by {owner}."
		
		text fail_undetected = ["{owner} made an elaborate murder plot, but {target} had a sudden change of plans and changed [{target_is_male:if}his|her] daily schedule. Thus, the whole scheming was in vain.",
	 						    "{owner} finally managed to sneak in {target:s} quarters at night, only to find out that {target} spends [{target_is_male:if}his|her] nights elsewehere.",
	 						    "After weeks of planning, {owner} finally managed to put some poison in the tea of {target}. Unfortunately, the poison turned out too weak or underdozed and caused only some stomach problems."]
		
		text fail_revealed = ["{owner} finally managed to sneak in {target:s} quarters at night, but somehow {target} expected him and called the guards immediately!",
	 						    "After weeks of planning, {owner} finally managed to put some poison in the tea of {target}.  However, the cups got switched and one of his guards drank it and died. After a short investigation, it got clear who was the culprit..."]
		text plot_revealed = ["One of {owner:s} men ratted out the his assassination plot and the {target.kingdom:ians} found out he is our spy!",
	 					      "{owner} had to risk too much to get near {target} and finally blew his cover. His plot was revealed by the {target.kingdom:ians}."]
		
		text plot_invalidated = "Due to the turn of events, {target:s} assassination got impossible."
		text success_revealed = ["{owner} managed to sneak into the quarters of {target} and kill [{target_is_male:if}him|her], but a servant saw him as he was leaving.",
	 									"{owner} managed to poison {target}, but when the victim died, it got painfully obvious our spy was responsible for the deed."]
		text success_undetected = ["{owner:s} plan worked perfectly and {target} fell dead. It all looked like an accident to the {target.kingdom:ians}.",
	 									  "{owner:s} plan was brilliant and when {target} fell dead, all thought it was due to a disease, not poison."]
	}
	
	mission_kingdom_messages // what the target kingdom sees
	{
		text fail_revealed = ["{src_kingdom:anian:cap} spy attacked {target} in [{target_is_male:if}his|her] quarters, but the guards got there in time.",
	 						  "{src_kingdom:anian:cap} spy tried to poison {target}, but an unfortunate servant drank the poison instead.",
	 						  "We found out that a {src_kingdom:anian} spy was planning the assassination of {target}! We've made sure keep a close eye on our noble and he is now well protected."]
		text success_revealed = ["{target} was assassinated in his quarters! One of the servants saw the murderer, who turned out to be {owner}, {src_kingdom:anian} spy!",
	 									"During a 'diplomatic' meeting {target} was fatally poisoned by {owner}, who we much too late found out to be {src_kingdom:anian} spy!"]
	}
	
	cancel_events
	{
		target dying
	}
	
	cancelled_message_caption = "Assassination attempt halted"
	cancelled_message_texts
	{
		text dying = "Good news, sire! It turns out {target} died without our spy having to do anything. {owner:s} hands are clean and his plot has inadvertently come to a success."
	}
	
	
	mission_kingdom_event = WorkIncidentKilledEvent //shouldn't be neccessary
	float ssums_base = 1
	float ssums_bias = 0.75
	float add_gold_cost = (500 + target.class_level * 100)
}

def WorkIncidentKilledEvent : OkMessage
{
	icon = "Assets/UI/Elements/msg_icons/Icon_Message_KnightDead_Negative.png:Icon_Message_KnightDead_Negative#2" //GUID:c869e7764f85b1e41a7e84d3576a87c3
	illustration = "Assets/UI/Messages/Illustrations/UI_Enemy_Spy_Success_Undetected.tga:UI_Enemy_Spy_Success_Undetected#2" //GUID:8dd910aa9f0c2b445b61e5b1529e1ef5
	case is_prince = (target.is_prince)
	{
		voice_line = "narrator_voice:royal_prince_died"
		illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_DeadRoyalFamilyMember.tga:UI_Illustration_DeadRoyalFamilyMember#2" //GUID:30a3bf4c3206c05408a380788f31d050
	}
	case is_princess = (target.is_princess)
	{
		voice_line = "narrator_voice:princess_died"
		illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_DeadRoyalFamilyMember.tga:UI_Illustration_DeadRoyalFamilyMember#2" //GUID:30a3bf4c3206c05408a380788f31d050
	}
	case is_queen = (target.is_queen)
	{
		voice_line = "narrator_voice:queen_died"
		illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_DeadRoyalFamilyMember.tga:UI_Illustration_DeadRoyalFamilyMember#2" //GUID:30a3bf4c3206c05408a380788f31d050
	}
	case default
	{
		illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_DeadCourtMember.tga:UI_Illustration_DeadCourtMember#2" //GUID:17c31b385b6468f4d9d31755cb96b139
	}
	caption = "{target} perished"
	body = ["{target} suddenly got sick and after a few days perished. A handful of servants reported an unknown person visiting {target} from time to time... Perhaps there is a spy in our midst?", // !!! add [{p}{p}{target_was_heir_add_text}]
			"{target} got robbed and killed by bandits. On-site, a letter ordering the death of our {target.title} was found, surely written by a foreign spy. Our guards are now searching the entire kingdom, with orders to execute on sight everyone involved.", // !!! add [{p}{p}{target_was_heir_add_text}]
			"Regrettably, {target} was found lying dead in a ditch near a road. When questioned, nearby villagers reported seeing a hooded figure on the premises. An enemy spy, no doubt..."] // !!! add [{p}{p}{target_was_heir_add_text}] AND maybe check for was on mission or not (for flavor)
	//text target_was_heir_add_text = "[{target.is_heir:if}[{target.kingdom.heir:if}{target.kingdom.heir} is now ready to succeed {target.kingdom.king:s} crown instead.|{target.kingdom.heir:if_not}Alas, our {target.kingdom.KingdomType} is now left without a successor to {target.kingdom.king}.]]"
	//voice_line = (outcome_voice_line)
}

def AssassinateRebellionLeader : SpyPlot
{
	name = "Assassinate rebellion leader"
	tooltip = "Have {owner} arrange the murder of {target} in an attempt to end his rebellion."
	icon = "Assets/UI/Elements/Actions/Icon_Opportunity_AssassinateRebellionLeader.tga:Icon_Opportunity_AssassinateRebellionLeader#2" //GUID:0bbd699e834798646a52532cac9bdad7
	
	prepare_voice_line = "rebel_plot_confirmation"
	
	target = "Character"
	mission = "Ignore"
	
	severity = "Low"
	success_base_chance = 25 //note that they do not have espionage defense, so this is base e.g. 25 - some compensation (15)
	reveal_base_chance = 15 //same as above
	
	success_fail
	{
		sf_our_princess_in_tgt_kingdom = (0)
		sf_our_queen_in_tgt_kingdom = (0)
		sf_their_negative_CA = (0)
		sf_they_are_our_vassal = (0)
		sf_their_negative_opinions = (0)
		sf_their_positive_CA = (0)
		sf_their_king_spy_class = (0)
		sf_their_skills_traditions = (0)
		sf_their_positive_opinions = (0)
		
		perc sf_target_level = (-target.class_level * 2)
		{
			text name = "Rebel Leader Level (x2)"
		}
	}
	
	
	
	penalty reveal_factors
	{
		sf_their_king_stars = (0)
		sf_their_king_spy_class = (0)
		sf_their_positive_CA = (0)
		sf_their_princess_in_our_kingdom = (0)
		sf_their_queen_in_our_kingdom = (0)
		sf_target_level = (target.class_level)
		{
			text name = "Rebel Leader Level"
		}
	}
	
	opportunity
	{
		chance_to_add_on_tick = 25
		chance_to_del_on_tick = 15
	}
	
	prepare_status_text = "{owner} is arranging the murder of {target} in order to put and end to his rebellion."
	
	src_messages
	{
		text new_opportunity = "{owner} has found a way to get close to {target} and his rebel supporters, so that he can assassinate him and put an end to his rebellion."
		//text opportunity_lost = "{target:s} entourage caught the scent of {owner}, forcing our spy to abandon his cover for now."
		text success_revealed = "It was messy, but {owner} somehow managed to kill {target} in a tough brawl. Unfortunately for our spy, his struggle was overheard by nearby rebels."
		text success_undetected = "In a cold and calculated fashion, {owner} managed to sneak into the ranks of {target} and kill the rebel leader, while impersonating one of his guards."
		text fail_revealed = "{owner} was caught by one of {target:s} guards, just as he was about to thrust his dagger into the back of the rebellion leader."
		text fail_undetected = ["{owner} tried to stage the assassination of {target} by using the help of a hired hand. Unfortunately, our spy's accomplice proved to be exceedingly useless, as he was caught while attempting to pour poison into {target:s} mead. To save his skin, he ratted out {owner} to the rebels.",
		"{target:s} rebel entourage caught the scent of {owner}, forcing our spy to abandon his cover for now."]
	}
	
	outcomes
	{
		main success
		{
			option success_revealed
			{
				case mission_kingdom
				{
					message
					{
						def = null
					}
				}
				option owner_imprisoned = 0
				option owner_escaped = 0
			}
		}
		option fail
		{
			option fail_revealed
			{
				case mission_kingdom
				{
					message
					{
						def = null
					}
				}
				option owner_imprisoned = 0
				option owner_escaped = 0
			}
		}
	}
	
	ssums_bias = 0
	cost
	{
		gold = (ceil(SSum(own_kingdom, 0.5) + target.class_level * 400, 50))
	}
	
	cancel_events
	{
		target dying
		target imprisoned
	}
	
	cancelled_message_caption = "Assassination attempt halted"
	cancelled_message_texts
	{
		text dying = "The pesky {target} died without our spy having to do anything! Thus, {owner:s} hands are clean and his plot has inadvertently come to a success."
		text imprisoned = "{owner} had to abandon his plot to assassinate {target}, who got imprisoned before our spy could reach him."
	}
}

def AbductRebellionLeader : SpyPlot
{
	name = "Abduct rebellion leader"
	tooltip = "Have {owner} arrange the abduction and imprisonment of {target} in an attempt to end his rebellion."
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_AbductRebellionLeader.tga:Icon_CharacterAction_AbductRebellionLeader#2" //GUID:620037200a76ab141badd4b3d91f35d8
	
	
	prepare_voice_line = "rebel_plot_confirmation"
	cancelled_voice_line = "spy_plot_cancelled"
	
	target = "Character"
	mission = "Ignore"
	
	severity = "Low"
	
	success_base_chance = 20 //note that they do not have espionage defense, so this is base e.g. 30 - some compensation (15)
	reveal_base_chance = 20 //same as above
	
	success_fail
	{
		sf_our_princess_in_tgt_kingdom = (0)
		sf_our_queen_in_tgt_kingdom = (0)
		sf_their_negative_CA = (0)
		sf_they_are_our_vassal = (0)
		sf_their_negative_opinions = (0)
		sf_their_positive_CA = (0)
		sf_their_king_spy_class = (0)
		sf_their_skills_traditions = (0)
		sf_their_positive_opinions = (0)
		
		// defense(%) ---------------------------------------------------------------------
		// all negatives are summed up and multiply with the success chance to diminish it
		// --------------------------------------------------------------------------------
		
		// perc sf_rebellion_is_famous = (-rebellion.is_famous * 10) //!!! not implemented
		// {
		// 	text name = "Rebellion is famous"
		// }
		// perc sf_regular_rebel_supporters = (-rebellion.regular_rebel_armies * 3) //!!! not implemented
		// {
		// 	text name = "Regular rebels supporting {target}"
		// }
		// perc sf_general_rebel_supporters = (-rebellion.general_rebel_armies * 5) //!!! not implemented
		// {
		// 	text name = "Generals supporting {target}"
		// }
		perc sf_target_level = (-target.class_level * 2)
		{
			text name = "Rebel Leader Level (x2)"
		}
	}
	
	
	
	penalty reveal_factors
	{
		sf_their_king_stars = (0)
		sf_their_king_spy_class = (0)
		sf_their_positive_CA = (0)
		sf_their_princess_in_our_kingdom = (0)
		sf_their_queen_in_our_kingdom = (0)
		sf_target_level = (target.class_level)
		{
			text name = "Rebel Leader Level"
		}
	}
	
	opportunity
	{
		chance_to_add_on_tick = 25
		chance_to_del_on_tick = 15
	}
	
	prepare_status_text = "{owner} is arranging the abduction of {target} in order to put and end to his rebellion."
	
	src_messages
	{
		text new_opportunity = "{owner} has found a way to get close to {target}, so that he can abduct him and put an end to his rebellion."
		//text opportunity_lost = "{target:s} entourage caught the scent of {owner}, forcing our spy to abandon his cover for now."
		text success_revealed = ["Accompanied by a few {owner.kingdom:ian} soldiers, {owner} rode to {target:s} camp and abducted the rebellion leader! It was messy, though, as nearby rebels caught some of the intruders.",
		"{owner} hired a few villagers despearate for coin and sneaked into {target:s} base of operations, following a secret underground tunnel. This was enough to surprise the rebel leader, as our spy's group tied him up and rode off to our royal dungeon. Unfortunately, {owner} got diverted from his allies as a few rebels saw him and started a fight."]
		text success_undetected = ["{owner} sneaked into the encampments of {target} and neutralized all patroling guards, one by one. With the area clear, our spy burst into {target:s} tent and abducted the rebel leader.",
		"As {target:s} men were ransacking some farmers' huts in the fields, they quickly realized that their leader has gone missing. Little did they know that {owner} was hiding in the shadows, waiting for the right time to snatch {target}, tie him up and ride off with him to our dungeon.",
		"{owner} sent a forged letter to {target}, which promised that {owner.kingdom.king} would visit the rebels in a secret meeting spot and hear their demands. The rebel leader took the bait and rode off with a few men, only to be met by a small royal army. And so, {target} was captured and sent to our dungeon."]
		text fail_revealed = ["{owner} tried to abduct {target} by sneaking into his camp during the night. Unfortunately, our spy was caught by one of {target:s} guards, just as he was about to tie up the rebellion leader.",
		"When {owner} found out where {target:s} army was headed, he set up an ambush by the side of a desolate road. Unfortunately, the rebellion leader had spotted our spy's trap from afar."]
		text fail_undetected = ["{owner} tried to stage the abduction of {target} by using the help of a hired hand. Unfortunately, our spy's accomplice proved to be exceedingly useless, as he was caught while attempting to pour anaesthetics into {target:s} mead. To save his skin, he ratted out {owner} to the rebels.",
		"{target:s} rebel entourage caught the scent of {owner}, forcing our spy to abandon his cover for now."]
	}
	
	outcomes
	{
		main success
		{
			option success_revealed
			{
				case mission_kingdom
				{
					message
					{
						def = null
					}
				}
				option owner_imprisoned = 0
				option owner_escaped = 0
			}
		}
		option fail
		{
			option fail_revealed
			{
				case mission_kingdom
				{
					message
					{
						def = null
					}
				}
				option owner_imprisoned = 0
				option owner_escaped = 0
			}
		}
	}
	
	ssums_bias = 0
	cost
	{
		gold = (ceil(SSum(own_kingdom, 0.5) + target.class_level * 400, 50))
	}
	
	cancel_events
	{
		target dying
		target imprisoned
	}
	
	cancelled_message_caption = "Abduction attempt halted"
	cancelled_message_texts
	{
		text dying = "The pesky {target} died before we could abduct him! Thus, {owner:s} plot has inadvertently come to an end."
		text imprisoned = "The pesky {target} was imprisoned in {target.prison_kingdom}! Thus, {owner:s} hands are clean and his plot has inadvertently come to an end."
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////

def HuntingIncidentAction : MurderPlot
{
	name = "Hunting Accident"
	tooltip = "Have {owner} attempt to murder {owner.mission_kingdom.king} by staging a hunting accident."
	icon = "Assets/UI/Elements/Actions/Icon_Opportunity_HuntingIncident.tga:Icon_Opportunity_HuntingIncident#2" //GUID:57a878f39042ad74c9be899f2a8fcd84
	success_voice_line = "action_succeeded"
	
	target = "Character"
	severity = "High"
	
	success_base_chance = 25
	
	success_fail
	{
		sf_spy_acrhery = ( owner.cs_hunting_incident_chance_perc)
		{
			text name = "Spy's skill in archery (x5)"
		}
	}
	
	//reveal_base_chance = 35
	opportunity
	{
		chance_to_add_on_tick = 25
		chance_to_del_on_tick = 20
	}
	
	
	//add cs_hunting_incident_chance_perc to espionage outcomes
	
	prepare_status_text = "{owner} is arranging a hunting accident in {owner.mission_kingdom}."
	
	// text inline_descr = "to kill {target_kingdom.king} and make it look like a hunting accident"
	// text mk_inline_descr = "to kill our {target_kingdom.king} and make it look like a hunting accident"
	
	src_messages
	{
		text new_opportunity = "After becoming acquainted with a handful of influential noblemen in {target_kingdom}, {owner} has gained the opportunity to join their royal hunting trips. Perhaps he can attempt to kill {owner.mission_kingdom.king} and make it look like an accident."
		text success_undetected = "{owner:s} expert skills in archery proved way more useful than he ever imagined. With a single shot, he managed to kill {target_kingdom.king}, making it look like an simple hunting accident!"
		text success_revealed = "{owner} tried to act surprised when {target_kingdom.king} fell dead off his horse. Unfortunately, the hunting entourage of the deceased {target_kingdom.king.title} could not be fooled, as they witnessed the moment when our spy struck their ruler with an arrow."
		text fail_undetected = ["{owner} tried to 'accidentally' land a bow in {target.kingdom.king:s} head, but unfortunately missed the shot. Luckily, no one saw his attempt.",
		"{owner:s} long-awaited hunting trip with the {target_kingdom.king.title} of {target_kingdom} was actually rather uneventful. In the end, our spy managed to only showcase his lack of accuracy, making a fool out of himself in front of the entire hunting brigade."]
		text fail_revealed = "{owner} was spotted while aiming his bow at {target_kingdom.king} and could not take the shot."
		//text plot_revealed = "{owner} was revealed while attempting to organize a hunting accident during a hunting trip with the {target_kingdom:ian} {target_kingdom.king}."
	}
	
	mission_kingdom_event = HuntingIncidentEvent
	
	mission_kingdom_messages
	{
		text success_revealed = "Tragic news has befell our {target_kingdom.KingdomType} - {target_kingdom.king} was killed during a hunting trip! {src_kingdom:anian:cap} spy was responsible, who tried to make it look like a hunting accident."
		text fail_revealed = "We discovered {src_kingdom:anian} spy who was trying to organize a hunting accident for our {target_kingdom.king}! The hunting trip was immediately recalled and our {target_kingdom.king.title} is now safe."
	}
	
	outcomes
	{
		success
		{
			success_revealed
			{
				mission_kingdom
				{
					text force_caption = "Our {target_kingdom.king.title} was assasinated!"
				}
			}
		}
	}
	
	float ssums_base = (MapCA(owner.mission_kingdom, 1.5, 2.5))
	float ssums_bias = 0.75
	add_gold_cost = (250 + target.class_level * 50)
	
	cancel_events
	{
		target dying
	}
	
	cancelled_message_caption = "Assassination attempt halted"
	cancelled_message_texts
	{
		text dying = "Good news, sire! It turns out {target} died without our spy having to do anything. {owner:s} hands are clean and his plot has inadvertently come to a success."
	}
}

def HuntingIncidentEvent : OkMessage
{
	icon = "Assets/UI/Elements/msg_icons/Icon_Message_KnightKilled_Negative.png:Icon_Message_KnightKilled_Negative#2" //GUID:c69ba8b66f7a190468fa7cddb596098c
	illustration = "Assets/UI/Messages/Illustrations/UI_Enemy_Spy_Success_Undetected.tga:UI_Enemy_Spy_Success_Undetected#2" //GUID:8dd910aa9f0c2b445b61e5b1529e1ef5
	caption = "Hunting accident"
	body = ["Sire, tragic news! {game.plr_kingdom.king} died in a hunting accident! Our {game.plr_kingdom.king.title} was struck by an arrow which was fired by a member of his hunting party, no doubt an enemy spy. The culprit escaped on horseback, avoiding capture...",
	"Tragic news has befell our {target_kingdom.KingdomType} - {target_kingdom.king} was killed during a hunting trip! A foreign spy was responsible, who tried to make it look like a hunting accident."]
}

////////////////////////////////////////////////////////////////////////////////////////////////////////

def KillTheKingAction : MurderPlot
{
	name = "Kill the King"
	tooltip = "Have {owner} attempt to kill {owner.mission_kingdom:s} king."
	icon = "Assets/UI/Elements/Actions/Icon_Opportunity_KillTheKing.tga:Icon_Opportunity_KillTheKing#2" //GUID:3379deefb7a234742b83db19fb9fd800
	prepare_status_text = "{owner} is looking for ways to kill {action.target}."
	success_voice_line = "action_succeeded"
	
	success_base_chance = 20 //owner.kingdom.ks_own_murder_plots_CTS_perc moved to cs
	
	src_messages //!!! to mix up the flavor here todo: Alex; also write the default Kill knowing it cannot be queen or king
	{
		text new_opportunity = "{owner} got close to {target} and now he can plan his assassination."
		//text opportunity_lost = "{target:s} assassination can no longer be organized by {owner}."
		
		text fail_undetected = ["{owner} made an elaborate murder plot, but {target:s} had to give an unexpected audience to foreign diplomats. Thus, all of the scheming was in vain.",
	 						    "{owner} finally managed to sneak in {target:s} quarters at night, but there were too many concubines present. Our spy decided that the moment is not right and got out silently.",
	 						    "One afternoon {owner} finally managed to put deadly poison in the wine of {target}, but his cup-bearer turned out too skilled and though the poison was pratically tasteless, he discovered it."]
		
		text fail_revealed = ["{owner} finally managed to sneak in {target:s} quarters at night, but somehow {target} expected him and called the guards immediately.",
	 						    "After weeks of planning, {owner} finally managed to put some poison in the tea of {target}, but cups got switched and one of his concubines drank it and died. After a short investigation, it got clear who was the culprit."]
		text plot_revealed = ["One of the {owner:s} men ratted out his assassination plot and the {target.kingdom:ians} found out he is our spy.",
	 					      "{owner} had to risk too much to get near {target} and finally blew his cover. His plot was revealed by the {target.kingdom:ians}."]
		
		text plot_invalidated = "Due to the turn of events, {target:s} assassination got impossible."
		text success_revealed = ["{owner} managed to sneak in the quarters of {target} and to kill him, but a servant saw him when he was leaving.",
	 									"{owner} managed to poison {target}, but when the victim died, it got painfully obvious our spy was responsible for the deed."]
		text success_undetected = ["{owner} plan worked perfectly and {target} fell dead. It all looked like an accident to the {target.kingdom:ians}.",
	 									  "{owner} plan was brilliant and when {target} fell dead, all thought it was due to a disease, not poison."]
	}
	
	mission_kingdom_messages // what the target kingdom sees
	{
		text fail_revealed = ["{src_kingdom:anian:cap} spy attacked {target} in his quarters, but the guards got there in time.",
	 						  "{src_kingdom:anian:cap} spy tried to poison {target}, but an unfortunate servant drank the poison instead.",
	 						  "We found out that a {src_kingdom:anian} spy was planning the assassination of {target}! We found his plot in time, with our {target.title} now being safe and well-protected."]
		text success_revealed = ["{target} was assassinated in his quarters! One of the servants saw the murderer, who turned out to be {owner}, {src_kingdom:anian} spy!",
		"During a 'diplomatic' meeting, {target} was fatally poisoned by {owner}, who we much too late found out to be {src_kingdom:anian} spy!"]
	}
	
	target_kingdom_event = WorkIncidentKilledEvent
	float ssums_base = (MapCA(owner.mission_kingdom, 1.5, 2.5))
	float ssums_bias = 0.75
	add_gold_cost = (250 + target.class_level * 50)
	
	cancel_events
	{
		target dying
	}
	
	cancelled_message_caption = "Assassination attempt stopped"
	cancelled_message_texts
	{
		text dying = "Good news, sire! It turns out {target} died without our spy having to do anything. {owner:s} hands are clean and his plot has inadvertently come to a success."
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////

def KillTheQueenAction : MurderPlot
{
	name = "Kill the Queen"
	tooltip = "Have {owner} attempt to kill {owner.mission_kingdom:s} {owner.mission_kingdom.queen.title}."
	icon = "Assets/UI/Elements/Actions/Icon_Opportunity_KillTheQueen.tga:Icon_Opportunity_KillTheQueen#2" //GUID:b49f578dacaa8b74ea363e6beb35c3f5
	prepare_status_text = "{owner} is looking for ways to kill {action.target}."
	success_voice_line = "action_succeeded"
	
	success_base_chance = 25 //owner.kingdom.ks_own_murder_plots_CTS_perc moved to cs
	
	
	src_messages //!!! to mix up the flavor here todo: Alex; also write the default Kill knowing it cannot be queen or king
	{
		text new_opportunity = "{owner} got close to {target} and now he can plan her assassination."
		//text opportunity_lost = "{target:s} assassination can no longer be organized by {owner}."
		
		text fail_undetected = ["{owner} made an elaborate murder plot, but {target:} had a sudden change of plans and her daily schedule got changed. Thus, all of the scheming was in vain.",
	 						    "{owner} finally managed to sneak in {target:s} quarters at night, but it turned out she spends her nights elsewhere.",
	 						    "After weeks of planning, {owner} finally managed to put some poison in the tea of {target}. Unfortunately, the poison turned out too weak or underdozed and caused only some stomach problems to the noble lady.",
	 						    "{owner} finally managed to get to {owner.mission_kingdom:s} {owner.mission_kingdom.queen.title}, but it turned out he couldn't finish the deed. He reported it was too risky, but from another source we learned he might have been disarmed by her charm."]
		
		text fail_revealed = ["{owner} finally managed to sneak in {target:s} quarters at night, but it turned out her most trusted guard is there.",
	 						    "After weeks of planning, {owner} finally managed to put some poison in the tea of {target}, but the cups got switched and one of her court maidens drank it and died. After short investigation, they found out our spy was the culprit.",
	 						    "One of {owner:s} trusted men turned out to be in love with the {owner.mission_kingdom.queen.title} and ratted out the assassination plot. The {target.kingdom:ians} found out he is our spy.",
	 						    "When {owner} tried too hard to get near the {owner.mission_kingdom.queen.title}, {target.kingdom.king} suspected that he is trying to seduce her, but later on the guards found out he is our spy."]
		text plot_invalidated = "Due to the turn of events, {target:s} assassination got impossible."
		text success_revealed = ["{owner} managed to get an audience in the quarters of {target} and to kill her, but one court lady saw him when he was leaving.",
	 							 "{owner} managed to poison {target}, but she died, it got painfully obvious our spy was responsible for the deed.",
	 							 "{owner:s} natural charm worked in his favor, as he managed to get close to {target} - enough so that he could murder her in her sleep. Sadly, his time spent with the {owner.mission_kingdom.queen.title} did not go unnoticed to her close servants."]
		text success_undetected = ["{owner} plan worked perfectly and {target} fell dead. It all looked as an accident to the {target.kingdom:ians}.",
	 							"{owner} plan was brilliant and when {target} fell dead, all thought it was due to a disease, not poison.",
	 							"{owner:s} natural charm worked in his favor, as he managed to get close to {target} - enough so that he could murder her in her sleep! Nobody heard this and our spy is so far unsuspected."]
	}
	
	mission_kingdom_messages // what the target kingdom sees
	{
		text fail_revealed = ["{src_kingdom:anian:cap} spy attacked {target} in her quarters! Thankfully, the guards got there in time, as they were alerted by the terrified screams of our {owner.mission_kingdom.queen.title}.",
	 						  "{src_kingdom:anian:cap} spy tried to poison {target:s} wine, but an unfortunate court maiden drank the poison instead.",
	 						  "We found out that a {src_kingdom:anian} spy was planning the assassination of {target}! Her servants took wind of the culprit, as they noticed him spending too much time around our {target.title}."]
		text success_revealed = ["{target} was murdered in her quarters! One of her servants saw the murderer, who turned out to be {src_kingdom:anian} spy, just as he was exiting the crime scene.",
		"{target} was fatally poisoned by {owner} during a 'diplomatic meeting', who we much too late found out to be {src_kingdom:anian} spy!"]
	}
	
	mission_kingdom_voice_lines
	{
		string success_undetected = "narrator_voice:queen_died"
		string success_revealed = "narrator_voice:queen_died"
	}
	
	mission_kingdom_event = WorkIncidentKilledEvent
	
	// float ssums_base = (MapCA(owner.mission_kingdom, 1.5, 2.5))
	// float ssums_bias = 0.75
	// add_gold_cost = 250
	
	cancel_events
	{
		target dying
	}
	
	cancelled_message_caption = "Assassination attempt halted"
	cancelled_message_texts
	{
		text dying = "Good news, sire! It turns out {target} died without our spy having to do anything. {owner:s} hands are clean and his plot has inadvertently come to a success."
	}
}


////////////////////////////////////////////////////////////////////////////////////////////////////////

def PlotHelpOurPrisonersEscapeAction : SpyPlot
{
	name = "Help our prisoners escape"
	tooltip = "Order {owner} to plot a jailbreak in {owner.mission_kingdom:s} dungeon to free our prisoners."
	icon = "Assets/UI/Elements/Actions/Icon_Opportunity_PlotHelpOurPrisonersEscape.tga:Icon_Opportunity_PlotHelpOurPrisonersEscape#2" //GUID:b8861ed875960094082b80917e25a867
	success_voice_line = "action_succeeded"
	prepare_status_text = "{owner} is trying to think of a way to break in the royal dungeon of {owner.mission_kingdom} to free our prisoners."
	
	success_base_chance = 45
	//reveal_base_chance = 60

	severity = "Low"
	
	opportunity : PermanentOpportunity
	// {
	// 	chance_to_add_on_tick = 40
	// 	chance_to_del_on_tick = 30
	// 	max_targets = 0
	// }
	
	validate_prompts
	{
		text _no_possible_targets = "{clr:gray}We have no prisoners in {owner.mission_kingdom}.{/clr}"
	}
	
	src_messages
	{
		//text new_opportunity = "{owner} has found a potential way to break into the royal dungeon of {owner.mission_kingdom} and free our imprisoned knights."
		//text opportunity_lost = "{owner} no longer has a chance to break in the royal dungeon of {owner.mission_kingdom}."
		
		text success_revealed = ["Disguised as a guard, {owner} successfully infiltrated {owner.mission_kingdom:s} dungeon and freed [{prisoner}|all of our prisoners]! Sadly, the {owner.mission_kingdom:ians} later found out he was the culprit.",
		"Sire, {owner} managed to break into {owner.mission_kingdom:s} dungeon and free [{prisoner}|all of our prisoners]! However, they all made quite the racket and our spy was revealed."]
		text success_undetected = ["{owner} has successfully freed [{prisoner}|all of our prisoners] from {owner.mission_kingdom:s} royal dungeon! Our spy's moves were so swift that nobody could hear a thing.",
		"After surveying {owner.mission_kingdom:s} royal dungeon for several nights, {owner} managed to sneak in while the guards are sleeping. As a result, [{prisoner} is now free|all of our prisoners there are now free]!"]
		
		text fail_undetected = ["The royal dungeon of {owner.mission_kingdom} turned out impenetrable. {owner} couldn't figure out a way to free anyone.",
		"{owner} couldn't find any way of entering {owner.mission_kingdom:s} royal dungeon. For now, our prisoners continue to rot in their cells."]
		text fail_revealed = ["The guards in {owner.mission_kingdom} turned out more watchful and loyal than expected and {owner} failed to free anyone. Unfortunately, he was revealed as our spy.",
		"{owner} tried to bribe some guards in order to infiltrate the {owner.mission_kingdom:ian} dungeon, but they didn't take the gold and reported our spy to the warden."]
		
		text plot_invalidated = "{owner:s} plan of breaking into the royal dungeon of {owner.mission_kingdom} is now meaningless."
	}
	
	mission_kingdom_event = PrisonersEscapedEvent
	
	float ssums_base = 0.2
	
	mission_kingdom_messages // what the target kingdom sees
	{
		text success_revealed = ["{src_kingdom:anian:cap} spy managed to bribe some of our guards and organize a jail break! We found out too late and his plot succeeded, resulting in the escape of [{prisoner}|all {owner.kingdom:ian} prisoners] from our dungeon.",
		"Sire, [{prisoner} has|all {owner.kingdom:ian} prisoners have] escaped from our royal dungeon with the help of {owner.kingdom:ian} spy! We should really tighten our security there...",
		"My lord, our dungeon's been compromised... Many of our guards there were found dead, but those that lived to tell the tale described {owner.mission_kingdom:anian} spy arriving with a sizeable band of thugs. It seems they've freed [{prisoner}|all {owner.kingdom:ian} prisoners]."]
		text fail_revealed = ["{src_kingdom:anian:cap} spy tried to break into our royal dungeon with a bunch of henchmen, but our guards were well prepared and easily dealt with the threat.",
		"{src_kingdom:anian:cap} spy tried to bribe some of our guards and infiltrate our royal dungeon, but it seems they had the dignity to refuse the gold and report the event to the warden."]
	}
	
	cancel_events
	{
		mission_kingdom we_have_no_prisoners = (param == owner.kingdom)
	}
	
	cancelled_message_caption = "Jailbreak plot halted"
	cancelled_message_texts
	{
		text we_have_no_prisoners = "As {owner.mission_kingdom} no longer holds any prisoners of ours, {owner} was forced to stop plotting a riot within their dungeon."
	}
	
	_outcomes
	{
		log = 1
		
		case mission_kingdom
		{
			message
			{
				def = ActionOutcomeMessage
			}
		}
		
		main success // = (success_base_chance)
		{
			option success_undetected
			{
				case src_kingdom
				{
					text caption = "Jailbreak successful"
					text message = "{src_messages.success_undetected}"
				}
			}
			option success_revealed = (reveal_chance) // may be modified in C#
			{
				case src_kingdom
				{
					text message = "{src_messages.success_revealed}"
				}
				also owner
				{
					main owner_escaped = (escape_chance)
					option owner_imprisoned
					option owner_killed
				}
				also rel_change = (reveal_rel_change)
			}
		}
	}
}

def PrisonersEscapedEvent : OkMessage
{
	icon = "Assets/UI/Elements/msg_icons/Icon_Message_KnighEscaped_Negative.png:Icon_Message_KnighEscaped_Negative#2" //GUID:16663f8bd4ac6f84fa31fceb457a5b9c
	illustration = "Assets/UI/Messages/Illustrations/UI_Enemy_Spy_Success_Undetected.tga:UI_Enemy_Spy_Success_Undetected#2" //GUID:8dd910aa9f0c2b445b61e5b1529e1ef5
	caption = "Prisoners escaped"
	body = ["Sire, there's been trouble in our dungeon! Our guards report that a foreign spy organized an escape, managing to free {prisoners} our wardens' backs.",
			"Our guards are worthless - they let {prisoners} escape from our dungeon! They were helped by a foreign spy, who was seen running away with the escapees.",
			"There's been a breach in our royal dungeon! A foreign spy somehow managed to enter and organize the escape of {prisoners}.",
			"A foreign spy managed to bribe some of our guards and organize a jail break! We found out too late and his plot succeeded, resulting in the escape of [{prisoner}|all {owner.kingdom:ian} prisoners] from our dungeon.",
			"Sire, [{prisoner} has|all {owner.kingdom:ian} prisoners have] escaped from our royal dungeon with the help of a foreign spy! We should really tighten our security there..."]
}

def HelpFriendlyPrisonersEscape : SpyPlot
{
	name = "Help friendly prisoners escape"
	tooltip = "Order {owner} to plot a jailbreak in {owner.mission_kingdom:s} dungeon, in an attempt to free some friendly prisoners."
	icon = "Assets/UI/Elements/Actions/Icon_Opportunity_HelpFriendlyPrisonersEscape.tga:Icon_Opportunity_HelpFriendlyPrisonersEscape#2" //GUID:39073a2e20f8f7f4f895b15ab10b2e12
	success_voice_line = "action_succeeded"
	prepare_status_text = "{owner} is studying the ins and outs of {owner.mission_kingdom:s} dungeon, in an attempt to free some friendly prisoners."
	
	float min_relationship = 350
	
	success_base_chance = 35
	//reveal_base_chance = 30
	severity = "Low"
	
	opportunity : PermanentOpportunity
	// {
	// 	chance_to_add_on_tick = 40
	// 	chance_to_del_on_tick = 30
	// 	max_targets = 0
	// }
	
	validate_prompts
	{
		text _no_possible_targets = "{clr:gray}There are no friendly prisoners in {owner.mission_kingdom:s} dungeon.{/clr}"
	}
	
	src_messages
	{
		//text new_opportunity = "{owner} has found a potential break in the security of {owner.mission_kingdom}! Should he attempt to free some friendly prisoners?"
		//text opportunity_lost = "{owner} no longer has a chance to break in the royal dungeon of {owner.mission_kingdom} to free some friendly prisoners."
		
		text success_revealed = ["Disguised as a guard, {owner} successfully infiltrated {owner.mission_kingdom:s} dungeon and freed {prisoners}! Sadly, the {owner.mission_kingdom:ians} later found out he was the culprit.",
		"Sire, {owner} managed to break into {owner.mission_kingdom:s} dungeon and free {prisoners}! However, they all made quite the racket and our spy was revealed."]
		text success_undetected = ["{owner} managed to organize the escape of {prisoners} from {owner.mission_kingdom:s} royal dungeon! Our spy's moves were so swift that nobody could hear a thing.",
		"After surveying {owner.mission_kingdom:s} royal dungeon for several nights, {owner} managed to sneak in while the guards are sleeping. As a result, [{prisoner} is now free|{prisoners} are now free]!"]
		
		text fail_undetected = ["The royal dungeon of {owner.mission_kingdom} turned out impenetrable. {owner} couldn't figure out a way to free anyone.",
		"{owner} couldn't find any way of entering {owner.mission_kingdom:s} royal dungeon. For now, [{prisoner} continues to rot in his cell|{prisoners} continue to rot in their cells]."]
		text fail_revealed = ["The guards in {owner.mission_kingdom} turned out more watchful and loyal than expected and {owner} failed to free anyone. Unfortunately, he was revealed as our spy.",
		"{owner} tried to bribe some guards in order to infiltrate the {owner.mission_kingdom:ian} dungeon, but they didn't take the gold and reported our spy to the warden."]
		
		text plot_invalidated = "{owner:s} plan of breaking into the royal dungeon of {owner.mission_kingdom} is now meaningless."
	}
	
	mission_kingdom_event = PrisonersEscapedEvent
	
	float ssums_base = 0.2
	
	mission_kingdom_messages // what the target kingdom sees
	{
		text success_revealed = ["{owner.kingdom:anian:cap} spy managed to bribe some of our guards and organize a jail break! We found out too late and his plot succeeded, resulting in the escape of {prisoners} from our dungeon.",
		"Sire, [{prisoner} has|{prisoners} have] escaped from our royal dungeon with the help of {owner.kingdom:ian} spy! We should really tighten our security there...",
		"My lord, our dungeon's been compromised... Many of our guards there were found dead, but those that lived to tell the tale described {owner.mission_kingdom:anian} spy arriving with a sizeable band of thugs. It seems they've freed {prisoners}."]
		text fail_revealed = ["{owner.kingdom:anian:cap} spy tried to break into our royal dungeon with a bunch of henchmen, but our guards were well prepared and easily dealt with the threat.",
		"{owner.kingdom:anian:cap} spy tried to bribe some of our guards and infiltrate our royal dungeon, but it seems they had the dignity to refuse the gold and report the event to the warden."]
	}
	
	cancel_events
	{
		mission_kingdom we_have_no_prisoners = (param == owner.kingdom)
	}
	
	cancelled_message_caption = "Jailbreak plot stopped"
	cancelled_message_texts
	{
		text we_have_no_prisoners = "As {owner.mission_kingdom} no longer holds any friendly prisoners, {owner} was forced to stop plotting a riot within their dungeon."
	}
	
	_outcomes
	{
		log = 1
		
		case mission_kingdom
		{
			message
			{
				def = ActionOutcomeMessage
			}
		}
		
		main success // = (success_base_chance)
		{
			option success_undetected
			{
				case src_kingdom
				{
					text caption = "Jailbreak successful"
					text message = "{src_messages.success_undetected}"
				}
			}
			option success_revealed = (reveal_chance) // may be modified in C#
			{
				case src_kingdom
				{
					text message = "{src_messages.success_revealed}"
				}
				also owner
				{
					main owner_escaped = (escape_chance)
					option owner_imprisoned
					option owner_killed
				}
				also rel_change = (reveal_rel_change)
			}
		}
	}
}

def FriendHelpedOurPrisonersEscapeMessage : Message //!!! not implemented
{
	icon = "Assets/UI/Elements/msg_icons/Icon_Message_KnighEscaped_Positive.png:Icon_Message_KnighEscaped_Positive#2" //GUID:11be9b99c24cef249a6eae02cf524314
	illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_Dungeon_Escaped.png:UI_Illustration_Dungeon_Escaped#2" //GUID:431f97f4c55a7f046b4eefdc15fb01ec
	caption = "Our [{prisoner:if}prisoner was|prisoners were] rescued"
	body = "Good news, my Lord. {prisoners} managed to flee from {owner.mission_kingdom:s} dungeon! Upon [{prisoner:if}his|their] arrival in {kingdom}, [{prisoner:if}{prisoner}|they] mentioned {owner.kingdom:anian} spy and how he helped organize escape."
}

def InstigateDungeonRiot : SpyPlot
{
	name = "Instigate dungeon riot"
	tooltip = "Have {owner} attempt to instigate a riot in {owner.mission_kingdom:s} dungeon."
	icon = "Assets/UI/Elements/Actions/Icon_Opportunity_InstigateDungeonRiot.tga:Icon_Opportunity_InstigateDungeonRiot#2" //GUID:91f64fe6ec881274fa941be22004e176
	prepare_status_text = "{owner} is attempting to instigate a riot in {owner.mission_kingdom:s} dungeon."
	success_voice_line = "action_succeeded"
	
	severity = "Mid"
	success_base_chance = 30
	//reveal_base_chance = 30
	float ssums_base = (MapCA(owner.mission_kingdom, 1, 2))
	float ssums_bias = 0.75 // 0 only source, 1 only target, anything in between lerps (0.5 is defacto avg)
	float add_gold_cost = 750
	
	opportunity
	{
		chance_to_add_on_tick = 20
		chance_to_del_on_tick = 5
	}
	
	src_messages
	{
		text new_opportunity = "Sire, {owner} has reported that {owner.mission_kingdom:s} royal dungeon is filled to the brim with prisoners! Say the word, and we can order our spy to cause some mischief by organizing a riot."
		//text opportunity_lost = "{owner} lost his opportunity instigate a dungeon riot in {owner.mission_kingdom}."
		
		text success_extra = "The riot was led by {leader} of {leader.kingdom}, who escaped unscathed.[ Alongside him, {escaped_prisoners} managed to escape.][ Fortune, however, wasn't so favorful to {died_prisoners}, who died in the end.]"
		// text success_extra = $[
		// "The riot was led by {leader} of {leader.kingdom}, who escaped unscathed."
		// "[{p}   {blt} Escaped prisoners: {escaped_prisoners}]"
		// "[{p}   {blt} Dead prisoners: {died_prisoners}]"]
		
		text success_undetected = ["Dressed up as a harmless visitor, {owner} visited {owner.mission_kingdom:s} dungeon each day for the duration of several weeks. After secretly conversing with the local prisoners, our spy managed to agitate a riot while staying unnoticed.{p}{p}{success_extra}",
		"After spending many days surveying the royal dungeon grounds in {owner.mission_kingdom}, {owner} finally found a secret passageway that can house a few escapees. Thus, with our spy's instructions, a riot has successfully taken place!{p}{p}{success_extra}"]
		text success_revealed = ["Thanks to {owner:s} efforts, a riot has taken place in {owner.mission_kingdom}. Sadly for our spy, he wasn't so good at hiding his tracks, leading to his reveal by the local guards.{p}{p}{success_extra}",
		"In the still of the night, {owner} knocked out a stray guard, grabbed his keys, put his armor on and sneaked into {owner.mission_kingdom:s} dungeon. Then, he managed to unlock the cells of several prisoners, but was unfortunately revealed by the other guards in the complex.{p}{p}{success_extra}",
		"By bribing a corrupt guard, {owner} managed to successfully instigate a riot in {owner.mission_kingdom:s} dungeon! Regrettably, our spy's accomplice decided to betray his master and report his plot to the bailiff.{p}{p}{success_extra}"]
		
		text fail_undetected = ["For some reason, the prisoners of {owner.mission_kingdom} did not want to participate in a riot, no matter how hard {owner} tried to convince them. Either they were too scared, or the living comforts of their cells were simply too good to pass up.",
		"Sire, {owner} has sent a report for what seems to be the most uneventful and uninspired mission. Long story short, he visited {owner.mission_kingdom:s} dungeon, saw how many guards it had and decided to quickly turn tail and head to the local tavern. The rest of his letter contained mostly drunken gibberish."]
		text fail_revealed = ["{owner} decided that a riot in {owner.mission_kingdom} would be easiest if the local guard somehow became drugged. Unfortunately, our spy's plot ended with him being revealed by said guards, who noticed him putting sleeping agents in their drinks.",
		"{owner} did his best to organize a riot in {owner.mission_kingdom}, but in the end he put too much trust in his accomplices. In the end, one of the prisoners ratted out our spy to the guards."]
		
		text plot_invalidated = "Due events outside {owner:s} control, he can no longer instigate a dungeon riot in {owner.mission_kingdom}."
	}
	
	mission_kingdom_messages // what the mission kingdom sees
	{
		text success_revealed = ["The cursed {owner.kingdom:ians} have been using their spy to spread his poison behind our guards' backs... The recent riot was their doing!",
		"Sire, we've managed to find the culprit behind the riot which just occured in our dungeon. Turns out it was {owner} of {owner.kingdom}!"]
		text fail_revealed = ["Our guards caught {owner} of {owner.kingdom} skulking in our dungeon, dressed up as a priest claiming to be on a 'visitation' for one of our prisoners... No doubt, the rat was trying to organize a riot!",
		"Sire, our guards have caught a foreign spy! It was {owner} of {owner.kingdom}, who had seemingly entered the dungeon grounds through a secret passage, in an attempt to stir trouble and organize a riot."]
	}
	
	cancel_events
	{
		mission_kingdom prison_changed = (cancel_condition)
	}
	cancelled_message_caption = "Riot instigation halted"
	cancelled_message_texts
	{
		text prison_changed = "{owner} was seemingly too slow to organize a riot in {owner.mission_kingdom:s} dungeon, as its cells are now mostly empty."
	}
}

def InspireRebellion : SpyPlot
{
	name = "Inspire uprising"
	tooltip = "Have {owner} attempt to inspire a rebel uprising in {owner.mission_kingdom}, originating in {arg}."
	icon = "Assets/UI/Elements/Actions/Icon_Opportunity_InspireRebellion.tga:Icon_Opportunity_InspireRebellion#2" //GUID:3ef831c956ec094488e21f5b4b22b471
	prepare_status_text = "{owner} is attempting to inspire a {owner.mission_kingdom:ian} rebel uprising in the province of {arg}."
	success_voice_line = "action_succeeded"
	args = ["Realm"]
	severity = "Low"
	success_base_chance = 20
	//reveal_base_chance = 25
	float ssums_base = (MapCA(owner.mission_kingdom, 0.5, 1.5))
	float add_gold_cost = 500
	
	opportunity
	{
		chance_to_add_on_tick = 20
		chance_to_del_on_tick = 5
	}
	
	float min_rebel_population = 0
	
	src_messages
	{
		text new_opportunity = ["After spending some time in {arg}, {owner} sensed that the people there are miserable and could easily be convinced to rebel against {owner.mission_kingdom:s} tyranny.",
		"{owner} spoke to some nobles in {arg} and gathered that they've been secretly planning to organize an uprising against {owner.mission_kingdom}. For the right amount of gold, they might be convinced to start it now."]
		//text opportunity_lost = "{owner} lost his opportunity inspire a rebellion in {owner.mission_kingdom}."
		
		text success_undetected = ["{owner} spent many days in {arg}, visiting people's houses and agitating them to stand up against {owner.mission_kingdom:s} tyranny. In the end, he managed to convince them to rebel!",
		"{owner} became somewhat of a local hero in {arg}, as he donated funds for local projects, helped the weak and told people that they should stand against the tyranny of {owner.mission_kingdom}. Finally, he managed to use his favor to influence the locals to rebel!"]
		text success_revealed = ["{owner} managed to convince the people of {arg} that they should rebel against {owner.mission_kingdom}! Unfortunately, the peasants which agreed to his agitation weren't so secretive about their dealings with our spy...",
		"After meeting with the nobles in {arg} and offering them a hefty sum of gold, {owner} managed to convince them to organize an uprising against {owner.mission_kingdom}. Sadly, our {owner.mission_kingdom:ian} conspirators also decided that turning in our spy would make them even wealthier..."]
		
		text fail_undetected = ["{owner} tried his best, but the people of {arg} had simply no reason to rebel against {owner.mission_kingdom}.",
		"{owner} tried to agitate the people of {arg} into rebelling against {owner.mission_kingdom}, but evidently he wasn't convincing enough.",
		"Not only did {owner} fail to organize an uprising in {arg}, but he also managed to anger the local {owner.mission_kingdom:ians}, who chased him out of town with raised fists and a flurry of colorful phrases."]
		text fail_revealed = ["Organizing an uprising in {arg} proved to be a tough job for {owner}, as he couldn't find anyone willing to stand up against {owner.mission_kingdom}. Our spy's attempts were unfortunately disovered by one of {owner.mission_kingdom.king:s} agents.",
		"{owner} was very close to convincing the nobles of {arg} to organize an uprising, but in the end he was only laughed at and reported to the local authorities.",
		"{owner} decided to trust a gang of petty brigands, and he paid the price. Not only did he fail to convince them to form an uprising in {arg}, but he was also ambushed and beaten up."]
		
		text plot_invalidated = "Due to events outside {owner:s} control, he can no longer inspire a rebellion in {owner.mission_kingdom}."
	}
	
	mission_kingdom_messages // what the mission kingdom sees
	{
		text success_revealed = ["Sire, it seems that {owner.kingdom:anian} spy has managed to instigate a rebel uprising in our kingdom! Its armies are now ransacking the province of {arg}.",
		"Troubling news have arrived from {arg} - rebels are on the loose! Evidently, {owner.kingdom:anian} spy has been agitating our people."]
		text fail_revealed = ["We've discovered that {owner.kingdom:anian} spy was trying to inspire an uprising in {arg}! Fortunately, our nobles there revealed that he was attempting to influence them.",
		"One of our dilligent agents in {arg} has reported that {owner.kingdom:anian} spy has been secretly agitating the people there to form an uprising there!",
		"We've managed to locate {owner.kingdom:anian} spy! The fool thought he could convince the people of {arg} to rebel against our {owner.mission_kingdom.KingdomType}."]
	}
	
	
	mission_kingdom_event = InspireRebellionEvent
	
	cancel_events
	{
		arg kingdom_changed
	}
	
	cancelled_message_texts
	{
		text kingdom_changed = "Unfortunately, {mission_kingdom} no longer owns {arg0} and our connections to that province are severed. {owner} can no longer inspire rebellion there."
	}
}


def InspireRebellionEvent : OkMessage
{
	caption = "Rebels in {arg}"
	illustration = "Assets/UI/Messages/Illustrations/UI_Enemy_Spy_Success_Undetected.tga:UI_Enemy_Spy_Success_Undetected#2" //GUID:8dd910aa9f0c2b445b61e5b1529e1ef5
	icon = "Assets/UI/Elements/msg_icons/Icon_Message_Rebels_Negative.png:Icon_Message_Rebels_Negative#2" //GUID:dbf11e725a52e1d429ad05300abb2f07
	body = ["Sire, rebels are on the loose in {arg}! Surely, this is the work of a pesky foreign spy.",
	"Rebels have appeared in {arg}! Either someone's spying on us, or we've really neglected our hold over the province...",
	"Sire, it seems that a foreign spy has managed to instigate a rebel uprising in our kingdom! Its armies are now ransacking the province of {arg}.",
	"Troubling news have arrived from {arg} - rebels are on the loose! Evidently, a foreign spy has been agitating our people."]
}


def FrameAction : SpyPlot
{
	name = "Frame foreign knight"
	tooltip = "Order {owner} to frame {target} of {target.kingdom} and compromise their mission in {target.mission_kingdom}."
	icon = "Assets/UI/Elements/Actions/Icon_Opportunity_Frame.tga:Icon_Opportunity_Frame#2" //GUID:640d5311a0e7ac44b95f1d3cc2e64850
	prepare_status_text = "{owner} is attempting to frame {target} of {target.kingdom}, in order to compromise their mission in {target.mission_kingdom} and fabricate their imprisonment."
	success_voice_line = "action_succeeded"
	target = "Character"
	
	severity = "Mid"
	success_base_chance = 30
	//reveal_base_chance = 10
	
	success_fail
	{
		perc sf_target_is_king = (target.is_king * -30)
		{
			text name = "Target is King"
		}
	}
	
	
	float ssums_base = (MapCA(owner.mission_kingdom, 0.5, 1))
	float ssums_bias = 0.75 // 0 only source, 1 only target, anything in between lerps (0.5 is defacto avg)
	float add_gold_cost = (200 + target.class_level * 50)
	
	opportunity
	{
		chance_to_add_on_tick = 10
		chance_to_del_on_tick = 10
	}
	
	src_messages
	{
		text new_opportunity = "{owner} has reported that he can attempt to frame {target} and compromise his mission in {target.mission_kingdom}. If all goes well, the {target.kingdom:ian} knight will be imprisoned for crimes he hasn't committed."
		//text opportunity_lost = "{owner} lost his opportunity to frame {target} and compromise his mission in {target.mission_kingdom}."
		
		text success_undetected = ["[{target.mission_kingdom.queen:if}{owner} found out that {target} has been secretly meeting with {owner.mission_kingdom.queen}! Our spy immediately informed {owner.mission_kingdom.king:s} advisors, which led to the imprisonment of the {target.kingdom:ian} knight.]",
		"Finding compromising information about {target} was tough, but {owner} persevered and finally got hold of the {target.kingdom:ian} knight's personal records. As it turns out, he was stealing funds from {target.mission_kingdom}! For that, our spy's target now lies shackled in the dungeon.",
		"{owner} managed to frame {target} for his habit of hunting game in the royal woods without {target.mission_kingdom.king:s} permission - a crime which easily led to the imprisonment of the {target.kingdom:ian} knight."]
		text success_revealed = ["After performing a thorough investigation, {owner} found out that {target} of {target.kingdom} has been sending sensitive information about {target.mission_kingdom} to other kingdoms. It was enough to put the {target.kingdom:ian} knight in prison, but our spy was also revealed for his inquiries.",
		"After countless attempts suported by false claims, {owner} finally managed to convince the bailiff to order the arrest of {target}. Unfortunately, our spy wasn't particularly secretive and got revealed."]
		
		text fail_undetected = "{owner} failed to frame {target} and could not stop his mission in {target.mission_kingdom}."
		text fail_revealed = "{owner} attempted to frame {target}, but failed and was revealed in the process."
		
		text plot_invalidated = "Due to events outside of {owner:s} control, he can no longer compromise {target:s} mission in {target.mission_kingdom}."
	}
	
	mission_kingdom_messages // what the mission kingdom sees
	{
		text success_revealed = ["Sire, our guards have imprisoned {target} from {target.kingdom}. It seems we've been misdirected by {owner} of {owner.kingdom}, who was working towards ruining our business with {target.kingdom}.",
		"{target} of {target.kingdom} has been arrested in our dungeon, but we might have made a mistake. While he was dragged into his cell, he kept shouting the name '{owner.name}', who we later found out to be {owner.kingdom:anian} spy."]
		text fail_revealed = ["My lord, we caught {owner} from {owner.kingdom} trying to frame a foreign knight and stop his mission with our kingdom!",
		"{target} of {target.kingdom}, who is currently on a mission in our kingdom, has reported that {owner.kingdom:anian} spy has been blackmailing him and threatening to fabricate his imprisonment."]
	}
	
	target_kingdom_messages
	{
		text success_revealed = "Our {target} was suddenly imprisoned by {target.mission_kingdom}! A little birdie told us that {owner.kingdom:anian} spy played a role in this scheme..."
	}
	
	
	mission_kingdom_event = FrameForeignerEvent
	target_kingdom_event = FrameForeignerOtherEvent
	
	
	cancel_events
	{
		target dying
		target imprisoned
	}
	
	cancelled_message_caption = "Frame attempts halted"
	cancelled_message_texts
	{
		text dying = "{target:s} sudden death has interrupted our spy's attempts to frame him. {owner} is now on the lookout for another visitor of {target.kingdom}."
		text imprisoned = "{target} can no longer be framed by our spies, as he was imprisoned by another kingdom. {owner} is once again on the lookout for another visitor of {target.kingdom}."
	}
}


def FrameForeignerEvent : OkMessage
{
	caption = "Foreign knight imprisoned"
	illustration = "Assets/UI/Messages/Illustrations/UI_Enemy_Spy_Success_Undetected.tga:UI_Enemy_Spy_Success_Undetected#2" //GUID:8dd910aa9f0c2b445b61e5b1529e1ef5
	body = ["Sire, our guards have imprisoned {target} from {target.kingdom}. It seems we've been misdirected by a foreign spy, who was working towards ruining our business with {target.kingdom}.",
		"{target} of {target.kingdom} has been arrested in our dungeon, but we might have made a mistake. While he was dragged into his cell, he kept shouting the name of some foreign figure, refering to him as a filthy spy."
	]
	// "Sire, we've imprisoned {target} of {target.kingdom} due to allegations made by an anonymous source.",
	// "We've received reports that {target} has been stealing from us and providing sensitive information to other kingdoms. Thus, he now lies in our royal dungeon."]
	icon = "Assets/UI/Elements/msg_icons/Icon_Message_KnightImprisoned_Neutral.png:Icon_Message_KnightImprisoned_Neutral#2" //GUID:a29ff1d08e084a248a27c745daf84b40
}

def FrameForeignerOtherEvent : OkMessage
{
	caption = "{target} imprisoned"
	body = ["Sire, {target} was unexpectedly imprisoned by {target.mission_kingdom}! The reasoning behind this sudden betrayal remains unknown, but we suspect a foreign spy has influenced the decision.",
	"{target} has been detained by the {target.mission_kingdom:ians}! It is yet unclear why he's been imprisoned, but we suspect some foul play from another kingdom's spy."]
	sprite icon = "Assets/UI/Elements/msg_icons/Icon_Message_KnightImprisoned_Negative.png:Icon_Message_KnightImprisoned_Negative#2" //GUID:576cf88267f938d479147e5ac18e45d9
	illustration = "Assets/UI/Messages/Illustrations/UI_Enemy_Spy_Success_Undetected.tga:UI_Enemy_Spy_Success_Undetected#2" //GUID:8dd910aa9f0c2b445b61e5b1529e1ef5
}

def BurnFoodStorageAction : SpyPlot
{
	name = "Burn food reserves"
	tooltip = "Order {owner} to burn all food stored in {target}."
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_BurnFoodReserves.tga:Icon_CharacterAction_BurnFoodReserves#2" //GUID:bcdb5ce330c058c4a85f66745ee1695b
	prepare_status_text = "{owner} is attempting to burn all food stored in {target}."
	success_voice_line = "action_succeeded"
	target = "realm"
	
	severity = "Low"
	
	success_base_chance = 45
	//reveal_base_chance = 10
	
	
	float ssums_base = (MapCA(owner.mission_kingdom, 0.5, 1))
	float ssums_bias = 0.75 // 0 only source, 1 only target, anything in between lerps (0.5 is defacto avg)
	float add_gold_cost = (100 + target.class_level * 50)
	
	opportunity
	{
		chance_to_add_on_tick = 18
		chance_to_del_on_tick = 10
	}
	
	src_messages
	{
		text new_opportunity = ["After studying the patrol paths of all guards in {target}, {owner} feels confident that he can maneuver past them and set fire to the town's granaries.",
		"Sire, {owner} thinks that he can bribe someone in {target} and order them to burn down the town's food reserves. Shall we proceed with his plan?"]
		//text opportunity_lost = "{owner} lost his opportunity to frame {target} and compromise his mission in {target.mission_kingdom}."
		
		text success_undetected = ["After waiting for night to fall, {owner} managed to sneak past all patrolling guards in {target} and set fire to all granaries in the area!",
		"{owner} managed to burn down all food reserves in {target}, with the help of a local stable boy. Nobody caught our spy's scent, as he left the town long before the fire engulfed its granaries."]
		text success_revealed = ["{owner} waited for nightfall and set fire to all granaries in {target}! It was somewhat of a messy display, though, as he was seen by some drunkards on the streets... Sadly, they were beginning to sober up, enough to realize that our spy was up to no good.",
		"{owner} managed to burn down all food reserves in {target}, with the help of some local thugs that accepted our spy's bribes. Unfortunately, the ruffians were caught in the act and then interrogated, revealing our spy as their associate."]
		
		text fail_undetected = ["As {owner} was carrying a lit torch in search of a good spot to start a fire, some local {target.kingdom:ian} villagers spotted him and decided to join him, thinking he was leading a witch hunt. Soon, the entire town of {target} was marching alongside our spy. Needless to say, he had to play along, failing to burn anything...",
		"While looking for the best spot to start a fire in {target}, {owner} somehow tripped and fell in the town's sewage. Covered in feces and filled with shame, our spy returned to his hideout and decided his mission was not meant to be."]
		text fail_revealed = ["{owner} made a fool of himself, as he accidentally set himself on fire while trying to burn a barn in {target}. He began screaming in sheer terror, which quickly attracted some unwanted attention...",
		"{owner} seems to have misread his mission, as he decided that setting fire to the tavern in {target} would somehow hinder the town's food reserves. Naturally, the guards who were there for a drink saw our spy almost immediately."]
		
		//text plot_invalidated = "BurnFoodStorageAction plot_invalidated"
	}
	
	mission_kingdom_messages // what the mission kingdom sees
	{
		text success_revealed = ["All of our food reserves in {target} have been burned down! A massive fire was reported during the night by one of our guards, who caught {owner.kingdom:anian} spy running away from the scene.",
		"A massive fire has engulfed all granaries in {target} and all of our food is burned to ashes! Thankfully, the local bailiff ordered a thorough investigation, which revealed {owner.mission_kingdom:anian} spy was behind this."]
		text fail_revealed = ["Sire, you won't believe what just happened. {owner.kingdom:anian:cap} spy was seen running around the streets of {target}, while his body was covered in flames! It seems he was trying to burn down our food reserves, but failed disastrously.",
		"{owner.kingdom:anian:cap} spy tried to burn all of our food reserves in {target}! Luckily, our guards managed to quench the flames in time."]
	}
	
	
	mission_kingdom_event = BurnFoodStorageEvent
	
	
	cancel_events
	{
		mission_kingdom kingdom_destroyed
		mission_kingdom stance_changed = (!AreEnemies(owner.mission_kingdom, own_kingdom))
		target kingdom_changed
	}
	
	cancelled_message_caption = "Burn food attempts halted"
	cancelled_message_texts
	{
		text kingdom_destroyed = "[{target.kingdom.is_local_player:if}Now that {target} belongs to our {owner.kingdom.KingdomType}, burning down the town's food reserves seems like a foolish thing to do. Our spy is back in our kingdom, awaiting his next prey.|The fall of {target} to {target.kingdom} tighthened security too much in the area, forcing our spy to cease his attempts of burning the town's food reserves.]"
		text stance_changed = "{owner} had to let go of his mission to burn the food in {target}, so that we can maintain our newly formed peace with the {target.kingdom:ians}."
		text kingdom_changed = "Unfortunately, {owner} had to abandon his mission to burn the food of {target}, since the town is now under the control of {target.kingdom}."
	}
}


def BurnFoodStorageEvent : OkMessage
{
	caption = "Food reserves burned"
	body = ["Our crops in {target} have been burned! An apprentice in the local stable was bribed by a foreign spy and ordered to start the fire while everyone was asleep. Sadly, the intruder's name and kingdom remain a mystery.",
	"A foreign spy has burned all of our food reserves in {target}! As it all happened during the night, nobody could catch a glimpse of the culprit."]
	icon = "Assets/UI/Elements/msg_icons/Icon_Message_KnighEscaped_Negative.png:Icon_Message_KnighEscaped_Negative#2" //GUID:16663f8bd4ac6f84fa31fceb457a5b9c
	illustration = "Assets/UI/Messages/Illustrations/UI_Enemy_Spy_Success_Undetected.tga:UI_Enemy_Spy_Success_Undetected#2" //GUID:8dd910aa9f0c2b445b61e5b1529e1ef5
}


def OpenTheGatesAction : SpyPlot
{
	name = "Open the gates"
	tooltip = "Order {owner} to open the gates of {target.castle}. This will allow the {target.castle.battle.attacker_kingdom:ian} troops to assault the town immediately."
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_OpenTheGates.tga:Icon_CharacterAction_OpenTheGates#2" //GUID:6aeeb5975d4686f408389b1c993f66bc
	prepare_status_text = "{owner} is attempting to open the gates in {target.castle}, besieged by {target.castle.battle.attacker_kingdom:ian} forces."
	success_voice_line = "action_succeeded"
	target = "realm"
	
	severity = "Low"
	success_base_chance = 40
	//reveal_base_chance = 10
	
	prepare_duration = 20
	float ssums_base = (MapCA(owner.mission_kingdom, 0.2, 0.5))
	float ssums_bias = 0.8 // 0 only source, 1 only target, anything in between lerps (0.5 is defacto avg)
	float add_gold_cost = 400
	
	opportunity
	{
		chance_to_add_on_tick = 35
		chance_to_del_on_tick = 10
		activate_message = OpenTheGatesActionMessage
	}
	
	outcomes
	{
		main success
		{
			option success_revealed
			{
				case target_kingdom
				{
					message
					{
						icon = "Assets/UI/Elements/msg_icons/Icon_Message_Siege_Positive.png:Icon_Message_Siege_Positive#2" //GUID:7a4538fbfc0905a44a8410edb93588b9
						illustration = "Assets/UI/Messages/Illustrations/UI_Enemy_Spy_Success_Undetected.tga:UI_Enemy_Spy_Success_Undetected#2" //GUID:8dd910aa9f0c2b445b61e5b1529e1ef5
					}
				}
			}
		}
	}
	
	src_messages
	{
		text new_opportunity = "{owner} has reported that he might be able to open the gates of {target.castle} for the {target.castle.battle.attacker_kingdom:ian} troops. This will allow for the attacking {target.castle.battle.attacker_kingdom:ian} troops to mount a quick assault and surprise the {owner.mission_kingdom:ian} defenders."
		//text opportunity_lost = "{owner} lost his opportunity to frame {target} and compromise his mission in {target.mission_kingdom}."
		
		text success_undetected = ["While the {owner.mission_kingdom:ian} troops were busy with organizing their defenses, {owner} sneaked into {target.castle:s} armory and put on the arms of a local guard. Thus, our spy blended effortlessly with the defenders and managed to open the gates of the town!",
		"{owner} creeped into {target.castle} and opened one of its gates! Somehow, our spy did it all without being seen. With the enemy in disarray, the {target.castle.battle.attacker_kingdom:ian} troops can now assault the town's walls.",
		"{owner} entered {target.castle} and opened its gates, allowing the {target.castle.battle.attacker_kingdom:ian} troops to assault the town! Our spy almost got caught, so he had hide in the nearest [{target.is_christian:if}church and steal the attire of a local priest|{target.is_muslim:if}mosque and steal the clothes of a local scholar|shrine and steal the robes of a local shaman]."]
		text success_revealed = ["{owner} successfully opened the gates of {target.castle}, with the help of some local traitors! However, our poor spy was caught in the act. It's a miracle that the mechanism got stuck, granting the {target.castle.battle.attacker_kingdom:ian} troops enough time to mount a surprise assault.",
		"After meeting with {owner}, a handful of bribed guards opened one of {target.castle:s} gates during their night time watch! The bad news is that our spy was compromised, just as he was about to the leave the town's premises."]
		text fail_undetected = ["{owner} sneaked into a traveler's caravan, which was headed for {target.castle} to bring some supplies. Sadly, our spy's hopes to infiltrate the town were quickly thwarted, as the caravan was refused entry.",
		"{owner} entered {target.castle}, sneaked past the guards at night and found himself in front of the town's gate. However, when he tried to open it, our spy quickly realized he lacks the strength to do it alone."]
		text fail_revealed = ["{owner} used the chaos in {target.castle} to his advantage and sneaked into the town's armory, equipping the arms of a local guard. He then rushed to the nearest gate and tried to open it, but by doing so caught the attention of everyone around him...",
		"{owner} entered {target.castle} dressed as a filthy farmer. Without much of a plan, he ran to the nearest gate and tried to pull its lever, which was immediately noticed by the nearby {owner.mission_kingdom:ian} soldiers...",
		"{owner} was informed of a secret entrance in the northern part of {target.castle:s} walls, leading straight into the town through an underground passage. Our spy used the shortcut and clawed his way through a series of tight tunnels, only to be greeted by a {owner.mission_kingdom:ian} guard at the other end..."]
		
		//text plot_invalidated = "OpenTheGatesAction plot_invalidated"
	}
	
	mission_kingdom_messages // what the mission kingdom sees
	{
		text success_revealed = ["Troubling news has reached us from {target.castle}. Its gates have opened, allowing the {owner.kingdom:ians} to assault our town! An spy was seen in the vicinity.",
		"{owner.kingdom:anian:cap} spy has opened our gates in {target.castle}! Our men tremble, as the enemies are ready to mount their assault."]
		text fail_revealed = ["We've discovered {owner.kingdom:anian} spy in {target.castle}! One of our watchmen found the vermin, just as he was trying to open the town's gates.",
		"{owner.kingdom:anian:cap} spy was seen near our gates, attempting to open them during the night! Thankfully, our guards handled the situation by chasing down the intruder.",
		"Sire, we found out that {owner.kingdom:anian} spy was in {target.castle}. He was trying to open the town's gates, but got caught by one of our watchmen."]
	}
	
	target_kingdom_messages // what the target kingdom sees
	{
		text success_revealed = "Surprisingly to us, but even more to the {target.castle.kingdom:ians}, a {owner.kingdom:ian} spy open the gates of {target.castle}, besieged by our forces. Now we are already assaulting the town! We saw that brave man being chased by local guards, but for now there is nothing we can do to save him."
	}

	cancel_events
	{
		target_realm battle_stage_changed = (target.castle.battle.is_finished)
		target_realm battle_type_changed = (!target.castle.battle.is_siege)
	}

	cancelled_message_caption = "Open the gates stopped"
	cancelled_message_texts
	{
		text battle_stage_changed = "With the end of {target.castle:s} siege, {owner:s} plot to open the town's gates has become obsolete."
		text battle_type_changed = "My Lord, the siege of {target} has advanced and both sides are preparing to face in direct combat! As opening the gates is no longer necessary, {owner} has abandoned his mission."
	}
	
	mission_kingdom_event = OpenTheGatesEvent
	target_kingdom_event = OpenTheGatesOtherEvent
}


def OpenTheGatesEvent : OkMessage
{
	caption = "Gates opened"
	body = ["Sire, the gates of {target.castle} have been unexpectedly opened with the help of a foreign spy! Our enemies are now mounting an assault...",
	"A foreign spy has assisted our enemies in {target.castle}, opening the town's gates right behind our noses! The intruders are now preparing to assault us..."]
	icon = "Assets/UI/Elements/msg_icons/Icon_Message_KnighEscaped_Negative.png:Icon_Message_KnighEscaped_Negative#2" //GUID:16663f8bd4ac6f84fa31fceb457a5b9c
	illustration = "Assets/UI/Messages/Illustrations/UI_Enemy_Spy_Success_Undetected.tga:UI_Enemy_Spy_Success_Undetected#2" //GUID:8dd910aa9f0c2b445b61e5b1529e1ef5
}

def OpenTheGatesOtherEvent : OkMessage
{
	caption = "Gates opened"
	body = ["A {owner.kingdom:ian} spy aided us in our siege of {target.castle}. It turned out he has strong connections with the local guards and few of them opened the gates for our army. Now we are already assaulting the town!",
								 "Due to the cunning work of a {owner.kingdom:ian} spy, the gates of {target.castle} were opened and our forces grabbed the chance and started the assault."]
	
	//"A foreign { target.castle } , opening
	icon = "Assets/UI/Elements/msg_icons/Icon_Message_Siege_Positive.png:Icon_Message_Siege_Positive#2" //GUID:7a4538fbfc0905a44a8410edb93588b9
	illustration = "Assets/UI/Messages/Illustrations/UI_Enemy_Spy_Success_Undetected.tga:UI_Enemy_Spy_Success_Undetected#2" //GUID:8dd910aa9f0c2b445b61e5b1529e1ef5
}

def OpenTheGatesActionMessage : NewPlotAvailableMessage
{
	buttons
	{
		action activate = (action)
		{
			text text = "&Try to open gates"
		}
		cancel_opportunity cancel_op
		{
			text text = "&Continue siege"
		}
		text ok = "&Let me think"
	}
}



def InciteLoyalistRebellionAction : SpyPlot
{
	name = "Incite Loyalist Rebellion"
	tooltip = "Order {owner} to incite a loyalist rebellion at {target}."
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_InciteLoyalistRebellion.tga:Icon_CharacterAction_InciteLoyalistRebellion#2" //GUID:45f35ec9e88df214b8166f51dc9dd1a3
	prepare_status_text = "{owner} is attempting to incite a loyalist rebellion in {target.castle}."
	success_voice_line = "action_succeeded"
	target = "realm"
	var max_distance = 2
	severity = "Low"
	
	//reveal_base_chance = 10
	
	opportunity
	{
		chance_to_add_on_tick = 40
		chance_to_del_on_tick = 5
	}
	
	float ssums_base = (MapCA(owner.mission_kingdom, 0.5, 1.5))
	float ssums_bias = 0.75 // 0 only source, 1 only target, anything in between lerps (0.5 is defacto avg)
	float add_gold_cost = 500
	
	success_base_chance = 25
	success_fail
	{
		perc sf_loyalty = (max(0, (target.majority_strength - 60)/2))
		{
			text name = "Loyalty"
		}
	}
	
	src_messages
	{
		text new_opportunity = "{owner} has reported that the people in {target.castle}, still loyal to us, are ready to rise and fight for {owner.kingdom}."
		//text opportunity_lost = "{owner} lost his opportunity to frame {target} and compromise his mission in {target.mission_kingdom}."
		
		text success_undetected = ["Sire, {owner} made sure that the people in {target.castle} will no longer kneel to their oppressors. They have risen to fight for liberty, praising your name!",
								   "{owner} helped in arming and uniting our loyalists in {target.castle} - they are now leading a rebellion!",
								   "Little effort was need from {owner} to incite a rebellion in {target.castle} - the people there were already prepared to rise against {target.castle.kingdom}."]
		text success_revealed = ["{owner} brought too much attention on himself while inciting a rebellion in {target.castle}. He made it, but the {target.castle.kingdom:ians} find out who he is and what he is doing.",
								 "As {owner} had to speak with too many people in {target.castle} to incite a rebellion, and the province is crowded with {target.castle.kingdom:ian} guards, they learned about his activities. Too late to stop the rebellion, though."]
		
		text fail_undetected = ["{owner} couldn't incite a rebellion in {target.castle} - he said that the people there have not awaken from their sleep.",
								"The people in {target.castle} are yet too afraid from the {target.castle.kingdom:ian} wrath and they are afraid to stand up and fight for their freedom. {owner} said it is not the right time to incite a rebellion."]
		text fail_revealed = ["It seems that there are more cowards than brave men in {target.castle}. {owner} was betrayed, while trying to organize a rebellion.",
						      "The {target.castle.kingdom:ian} guards in {target.castle} turned out very watchful. Just a few days after {owner} started organizing a rebellion, they learned about his activities."]
		
		text plot_invalidated = "Inciting rebellion in {target.castle} is no longer an option for us, {owner} reported."
	}
	
	mission_kingdom_messages // what the mission kingdom sees
	{
		text success_revealed = ["Our watchful guards found at that {owner} is inciting a rebellion in {target.castle}. Although, to late to stop it.",
							  "A rebellion rose in {target.castle} and it we found out that it is {owner} who organized it."]
		text fail_revealed = ["Our watchful guards in {target.castle} found out that {owner} is trying to incite a rebellion and managed to stop it just in time!",
							  "{owner}, a pathetic {owner.kingdom:ian} spy tried to organize a rebellion in {target.castle}. Of course, our own spies were the first to hear about that and the problem was easily solved."]
	}
	
	
	mission_kingdom_event = InciteLoyalistRebellionEvent
}


def InciteLoyalistRebellionEvent : OkMessage
{
	caption = "Rebellion incited"
	body = "A rebellion has transpired in {target.castle}! A foreign spy must have laid his filthy hands on the feeble men who dared stand against our {target.kingdom.king.title}..."
	icon = "Assets/UI/Elements/msg_icons/Icon_Message_KnighEscaped_Negative.png:Icon_Message_KnighEscaped_Negative#2" //GUID:16663f8bd4ac6f84fa31fceb457a5b9c
	illustration = "Assets/UI/Messages/Illustrations/UI_Enemy_Spy_Success_Undetected.tga:UI_Enemy_Spy_Success_Undetected#2" //GUID:8dd910aa9f0c2b445b61e5b1529e1ef5
}

def TurnRebelIntoLoyalist : SpyPlot
{
	icon = "Assets/UI/Elements/Actions/Icon_Opportunity_RebelBecomeLoyalist.tga:Icon_Opportunity_RebelBecomeLoyalist#2" //GUID:b6ae38dc0b8b2234fbbce7d9f6c0ba0a
	name = "Turn rebellion into loyalist"
	tooltip = "Convince {target} to become our loyalist"
	prepare_status_text = "{action.owner} is convincing {action.target} to become a loyalist rebel fighting for our crown."
	target = "character"
	
	text inline_descr = "bribe {target} to become our rebel loyalist"
	text mk_inline_descr = "convince {target} to become a rebel loyalist fighting in {action.owner.kingdom:s} name"
	
	prepare_duration = 30
	severity = "Low"
	
	src_messages
	{
		text new_opportunity = "{owner} has reported that he can arrange a meeting with {target}, offering the rebel to make his rebellion loyal to our crown, in return to some funding and support."
		text success_undetected = ["By our command, {target} has become a rebel loyal to our crown! All men who support him fight valiantly in the name of our {owner.kingdom.king.title}.",
		"{owner} convinced {target} to become our loyalist! The {owner.mission_kingdom:ian} rebel and all who support him now march in the name of our {owner.kingdom.king.title}."]
		text success_revealed = "{target} proved his loyalty to our spy and agreed to make his rebellion loyal to our crown! However, many of the rebel's supporters weren't so happy about changing their allegiance and made sure to reveal our spy to the {owner.mission_kingdom:ians}."
		text fail_undetected = "After being beaten and chased away from {target:s} camp, {owner} quickly learned that dealing with rebels is a pretty risky endeavour. Thus, we could not convince the {owner.mission_kingdom:ian} to become our loyalist."
		text fail_revealed = "{owner} visited {target:s} camp multiple times, hoping to convince the rebel to become our loyalist. Unfortunately for our spy, his visitations were noticed by a handful of {owner.mission_kingdom:ian} agents that were observing the area."
	}
	
	success_fail
	{
		// defense(%) ---------------------------------------------------------------------
		// all negatives are summed up and multiply with the success chance to diminish it
		// --------------------------------------------------------------------------------
		
		perc sf_target_level = (-target.class_level)
		{
			text name = "Rebel Leader Level"
		}
	}
	
	success_base_chance = 40
	//reveal_base_chance = 20
	
	add_gold_cost = (300 + target.class_level * 50)
	
	mission_kingdom_event = RebelTurnedLoyalistEvent
	
	cancelled_message_caption = "Loyalist conversion halted"
}

def RebelTurnedLoyalistEvent : SpyResultMessage
{
	icon = "Assets/UI/Elements/msg_icons/Icon_Message_Rebels_Negative.png:Icon_Message_Rebels_Negative#2" //GUID:dbf11e725a52e1d429ad05300abb2f07
	sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_RebellionSpawned.tga:UI_Illustration_RebellionSpawned#2" //GUID:b4dca559d34a6994d8a6a166be867a1f
	caption = "Rebellion turned loyalist"
	body = "Sire, we've received reports that the armies supporting {target:s} rebellion have started to march under {owner.mission_kingdom:ian} banners!"
}


////////////////////////////////////////////////////////////////////////////////////////////////////////

def PuppetPretenderTakeCrownAction : CharacterAction //this action is automatic, not done by the player, in case he supports a pretender
{
	show_in_action_bar = false
	show_in_character_widnow = false
	//instant action - with only outcomes
	outcomes
	{
		message
		{
			def = null //dunno why, but this is necessary - empty messsages appear or src_kingdom
		}
		main become_vassal = (20)
		{
			case loyal_to_kingdom
			{
				message
				{
					def = ActionOutcomeMessage
					text caption = "Our pretender became king and our vassal!"
					text text = "{owner} became the {owner.title} of {own_kingdom}! He also pledged loyalty of his {own_kingdom.KingdomType} to us and has officially become our vassal."
					sprite icon = "Assets/UI/Elements/msg_icons/Icon_Message_GenericEvent_Positive.png:Icon_Message_GenericEvent_Positive#2" //GUID:0038f70bebc08a04392e08f1f9149b7b
				}
			}
		}
		option default
		{
			case loyal_to_kingdom
			{
				message
				{
					def = ActionOutcomeMessage
					text caption = "Our pretender became king!"
					text text = "{owner} was chosen to be the ruler of {own_kingdom}! His {own_kingdom.KingdomType} would not become our vassal, though, as it seems our puppet quickly forgot about our role in staging his succession."
					sprite icon = "Assets/UI/Elements/msg_icons/Icon_Message_GenericEvent_Positive.png:Icon_Message_GenericEvent_Positive#2" //GUID:0038f70bebc08a04392e08f1f9149b7b
				}
			}
		}
	}
}


/////////////////////////////////////////////////////////////////////////////////////
//////////////////////      OBSOLETE or NOT IMPLEMENTED       ///////////////////////
/////////////////////////////////////////////////////////////////////////////////////


// def PlotMurderAction : CharacterAction //Placeholder spy action - not implemented!
// {
// 	name = "Plot murder"
// 	tooltip = "Have {owner} arrange the death of [{owner.mission_kingdom.king}|the king]"
// 	icon = "Assets/UI/Elements/Common/Icons/Icon_Action_Generic_Spy.png:Icon_Action_Generic_Spy#2" //GUID:8fabffe00ddb7e442bdc7bffc086f6d0
// 	prepare_duration = (300 - owner.class_level * 7.5)
// 	prepare_status_text = "{owner} is arranging the murder of [{owner.mission_kingdom.king}|the king] of {owner.mission_kingdom}"

// 	outcomes
// 	{
// 		main success
// 		{
// 			text caption = "Our spy killed {owner.mission_kingdom.king:s} king!"
// 			text message = "{owner} managed to kill [{owner.mission_kingdom.king}|the king] of {owner.mission_kingdom} without getting caught!"
// 		}

// 		option success_killed
// 		{
// 			text message = "In a moment of sheer bravery and foolishness, {owner} stabbed [{owner.mission_kingdom.king}|the king] {owner.mission_kingdom} right in front of his guards. Needless to say, our spy was killed shortly after this happened."
// 			// also rel_spy_discoveredy //not implemented
// 		}

// 		option success_imprisoned
// 		{
// 			text message = "{owner} killed [{owner.mission_kingdom.king}|the king] of {owner.mission_kingdom} but was caught in the process. He is now imprisoned, counting his days in agony."
// 			// also rel_spy_discovered //not implemented
// 		}

// 		option success_escaped
// 		{
// 			text message = "With the help of a local hired hand, {owner} successfully organized the killing of [{owner.mission_kingdom.king}|the king] of {owner.mission_kingdom}! To avoid further complications, he has returned to our court and awaits further commands."
// 		}

// 		option fail
// 		{
// 			text message = "{owner} failed to organize the murder of [{owner.mission_kingdom.king}|the king] of {owner.mission_kingdom}. He remains stationed, awaiting his new task."
// 		}

// 		option fail_killed
// 		{
// 			text message = "{owner} attempted to kill [{owner.mission_kingdom.king}|the king] of {owner.mission_kingdom} during his sleep, but was unfortunately killed by his target's trusty hounds."
// 			// also rel_spy_discovered //not implemented		
// 		}

// 		option fail_imprisoned
// 		{
// 			text message = "{owner} tried to poison [{owner.mission_kingdom.king}|the king] of {owner.mission_kingdom} but was caught while pouring the deadly agent in his drink. As a result, our spy now lies imprisoned."
// 			// also rel_spy_discovered //not implemented
// 		}

// 		option fail_escaped
// 		{
// 			text message = "{owner} was betrayed by one of his accomplices while conspiring the murder of [{owner.mission_kingdom.king}|the king] of {owner.mission_kingdom}. Luckily, he managed to outrun the royal guards who were sent after him and escaped with the first boat available."
// 		}
// 	}
// }

// def SpreadRumorsAction : CharacterAction //Placeholder spy action - not implemented!
// {
// 	name = "Collect Rumors"
// 	tooltip = "Have {owner} gather rumors in {owner.mission_kingdom}"
// 	icon = "Assets/UI/Elements/Common/Icons/Icon_Action_Generic_Spy.png:Icon_Action_Generic_Spy#2" //GUID:8fabffe00ddb7e442bdc7bffc086f6d0
// 	prepare_duration = 10
// 	prepare_status_text = "{owner} is skulking around alleyways and brothels, in search of rumors."

// 	outcomes
// 	{
// 		main success
// 		{
// 			text message = "{owner} successfully spread rumors in {owner.mission_kingdom}!"
// 		}
// 		option fail
// 		{
// 			text message = "{owner} could not find any weaknesses worth exposing in {owner.mission_kingdom}. He is now ready for new assignments."
// 		}
// 		option fail_killed
// 		{
// 			text message = "{owner} was killed for spreading rumors in {owner.mission_kingdom}."
// 			// also rel_spy_discovered //not implemented
// 		}
// 		option fail_imprisoned
// 		{
// 			text message = "{owner} was imprisoned for spreading rumors in {owner.mission_kingdom}."
// 			// also rel_spy_discovered //not implemented
// 		}
// 		option fail_escaped
// 		{
// 			text message = "{owner} was caught trying to spreading rumors in {owner.mission_kingdom} and returned to our court."
// 		}
// 	}
// }

////////////////////////////////////////////////////////////////////////////////////////////////////////

// def SupportRebelsAction : CharacterAction //Placeholder spy action - not implemented!
// {
// 	name = "Support rebels"
// 	tooltip = "Have {owner} support all active rebellions in {owner.mission_kingdom}."
// 	icon = "Assets/UI/Elements/Common/Icons/Icon_Action_Generic_Spy.png:Icon_Action_Generic_Spy#2" //GUID:8fabffe00ddb7e442bdc7bffc086f6d0
// 	prepare_duration = (300 - owner.class_level * 10)
// 	prepare_status_text = "{owner} is looking for opportunities to support rebels in {owner.mission_kingdom}."

// 	outcomes
// 	{
// 		main success
// 		{
// 			text message = "{owner} was successful in enforcing {owner.mission_kingdom:s} rebels." //what is the actual effect?
// 		}
// 		option fail
// 		{
// 			text message = "{owner} failed to find any rebels in {owner.mission_kingdom}. He is now ready for new assignments."
// 		}
// 		option killed
// 		{
// 			text message = "{owner} was killed while dealing with rebels in {owner.mission_kingdom}."
// 			// also rel_spy_discovered //not implemented
// 		}
// 		option imprisoned
// 		{
// 			text message = "{owner} was imprisoned by {owner.mission_kingdom:s} guards after being caught supplying swords and shields to a local group of bandits."
// 			// also rel_spy_discovered //not implemented
// 		}
// 		option escaped
// 		{
// 			text message = "{owner} failed to find an opportunity to support any rebels in {owner.mission_kingdom}. To avoid imprisonment, he has returned to our court."
// 		}
// 	}
// }

// prepare_status_text = "{owner} is trying to plot a jailbreak in {owner.mission_kingdo:s} dungeon."
// success_message = ["{owner} successfully organized a jailbreak in {owner.mission_kingdom:s} dungeon and freed one of our knights.",
// 				   "The jailbreak plot in {owner.mission_kingdom} was successful - {owner} got our knight out alive and well.",
// 				   "It is yet unknown how {owner} managed to enter the royal dungeon of {owner.mission_kingdom} and get our knight out of there, but he did it."]
// outcomes
// {
// 	main success // + onwer.kingdom.prison_action_bonus_chance)
// 	{
// 		case src_kingdom
// 		{
// 			message
// 			{
// 				text caption = "Jailbreak successful"
// 			}
// 		}
// 		option mass_escape = (owner.class_level * 1.5)
// 		{
// 			case src_kingdom
// 			{
// 				message
// 				{
// 					add_text = " Other prisoners also managed to escape along."
// 				}
// 			}
// 		}
// 	}
// 	fail
// 	{
// 		case src_kingdom
// 		{
// 			message
// 			{
// 				text caption = "Jailbreak failed"
// 			}
// 		}
// 		option revealed
// 		{
// 			option target_puppet_revealed = 0 // weight, not chance
// 		}
// 	}
// }

// ----------------------------------------------------------//
// -----------------------  CLERIC  -------------------------//
// ----------------------------------------------------------//

def WriteBooksAction : CharacterAction
{
	name = "Write books"
	tooltip = "Have {owner} start writing books"
	icon = "Assets/UI/Elements/Common/Icons/Icon_DistrictFacility_ScribesOffice.png:Icon_DistrictFacility_ScribesOffice#2" //GUID:9fefe66ab9a19c7449e265809a8233e1
	prepare_duration = (300 - owner.class_level * 10)
	prepare_status_text = "{owner} is writing books"
	
	prepare_voice_line = ""
	
	//ai_validate = true
}

def StudySkillAction : CharacterAction //!!! old action
{
	ai_validate = false
	show_in_action_bar = false
	show_in_character_widnow = false
	show_in_status = false
	//show_in_status = BrightPersonStatus
	
	name = "Study skill"
	tooltip = "Have {owner} study a skill"
	icon = "Assets/UI/Elements/Common/Icons/Icon_Books.png:Icon_Books#2" //GUID:1995d5c2a4c84c349ab40f4d42ff7a7c
	prepare_duration = (180 - owner.class_level * 6)
	prepare_status_text = "{owner} is studying {action.arg0}"
	int max_skill_cnt = 3
	
	target = "none"
	args = ["skill"]
	
	
	cost
	{
		books = 2 // 300
	}
	
	outcomes
	{
		
		main success = (60 + has_literacy * 20 + has_learning * 20)
		{
			case src_kingdom
			{
				message
				{
					text caption = "Skill studied"
					text text = "{owner} successfully studied {arg0} and may now teach it to other knights in our court."
				}
				// change with relevant sound event !!!
				string sound_effect = "event:/sound_effects/notification/character/merchant_success"
			}
		}
		option fail
		{
			message
			{
				text caption = "Studying failed"
				text text = "{owner} failed to learn any skills worth teaching"
			}
			// change with relevant sound event !!!
			string sound_effect = "event:/sound_effects/notification/character/merchant_success"
			
		}
	}
}

def ConvertProvinceReligionAction : CharacterAction
{
	ai_validate = true
	name = "Preach [{kingdom.religion:ism}|our religion][ in {target}]"
	tooltip = "Have {owner} try to convert our provinces in [the region of {target}|a region] to [{kingdom.religion:ism}|our religion]"
	
	//text add_tooltip = "[{p}{target:if}Chance to be killed: {chance_to_be_killed}%]"
	
	//icon = (kingdom.religion.def.icon)
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_ConvertProvinceReligion.tga:Icon_CharacterAction_ConvertProvinceReligion#2" //GUID:d87a15e1bb762434ebd99f81d86ce6b1
	
	cost
	{
		gold = (own_kingdom.S1)
		piety = 1000
		books = 200
	}
	
	gold_upkeep = (ceil(20 + 0.05 * own_kingdom.S1, 10))
	
	target = "own_realm"
	prepare_duration = (time_mul * points_needed / points_produced)
	{
		time_mul = 1
		points_needed = (3000 * target.castle.max_population * religion_distance_factor * cleric_type_factor)
		{
			religion_distance_factor = (religion_distance_factors[target.religion_distance])
			{
				religion_distance_factors = 0/1/1.5/2
			}
			cleric_type_factor = (owner.is_cardinal and 0.75 or owner.is_patriarch and 0.5 or 1)
		}
		points_produced = (50 + income_factors + class_level_factors) * stat_factors
		{
			income_factors = (min(own_kingdom.income.piety + 0.5 * kingdom.income.books, 250))
			class_level_factors = (own_character.class_level * 20)
			stat_factors = (1 + (own_character.cs_conversion_rate_perc / 100))
		}
	}
	
	prepare_status_text = $[
		"{owner} preaching [{kingdom.religion:ism}|our religion] in the region of {src_castle}."
		"{p}He is currently in {action.target} and once he's done there, he will continue his preaching in other provinces around, if needed."
		"[{p}{p}Success chance: {success_chance}%]"
		"[{p}{target:if}{sf_factors_text}]"
		"[{add_tooltip}]"
		"[{p}Upkeep: {upkeep}]"
	]
	
	max_realm_dist = 4
	
	validate_prompts
	{
		text _no_possible_targets = "{clr:red_bright}We have no provinces we can convert to {kingdom.religion:ism} right now.{/clr}"
	}
	
	switch_value = (kingdom.religion_family)
	case christian
	{
		prepare_voice_line = "convert_province_to_christian"
	}
	case muslim
	{
		prepare_voice_line = "convert_province_to_muslim"
	}
	case pagan
	{
		prepare_voice_line = "convert_province_to_pagan"
	}
	decline_voice_line = "Decline"
	cancel_voice_line = "cancel_province_conversion"
	cancelled_voice_line = "action_failed"
	
	cancel_events
	{
		target_realm religion_changed = (!target_valid)
		// {
		// 	cancel_outcome = "*success" // for testing
		// }
		
		target_realm kingdom_changed
		target_realm battle_started
		
		//own_kingdom income_tick = (kingdom.resources.piety <= 0)
		
		// prepare_tick // for testing
		// {
		// 	//cancelled_message = null
		// 	cancel_reason = "kingdom_changed"
		// }
	}
	
	//prepare_tick = 1 // for testing
	
	cancelled_message_caption = "Religion conversion stopped"
	cancelled_message_texts
	{
		text religion_changed = "{target} accepted {own_kingdom.religion:ism} on its own, so {owner} has nothing more to do there."
		text kingdom_changed = "As we lost contol over {target}, {owner} had to abandon his attempts to convert the province's religion returned to our court."
		text battle_started = "Due to the recent siege of {target}, {owner} had to evacuate its premises and halt his attempts to preach {owner.kingdom.religion:ism} to the local population."
		//text income_tick = "{owner} had to stop preaching because we cannot afford the upkeep."
	}
	
	sf_per_target = true
	
	success_fail
	{
		sf_base = (100)
		{
			text name = "Base chance"
		}
		
		sf_low_crown_authority = (10 * min(own_kingdom.crown_authority, 0))
		{
			text name = "Our Crown Authority"
		}
		
		sf_monasteries = (-5 * target.religious_settlements_count)
		{
			//text name = "Religious settlements" 
			//text name = "{own_kingdom.religious_settlement_name:s}" // there is no "s" form in text atm
			text name = "{target.religious_settlements_count}x {target.religious_settlement_name}"
		}
		
		sf_loyal_to_other_kingdom = (target.majority_foreign_kingdom and -20 or 0)
		{
			text name = "Loyal to {target.majority_kingdom}"
		}
		
		sf_at_war_with_their_loyal_to_kingdom = (AreEnemies(own_kingdom, target.majority_foreign_kingdom) and -10 or 0)
		{
			text name = "At war with {target.majority_kingdom}"
		}
		
		sf_we_are_at_war = (own_kingdom.num_wars > 0 and -15 or 0)
		{
			text name = "Our wars"
		}
	}
	
	chance_to_be_killed = (10 + Monasteries + PopMaj + CA + War + Rebels - CL)
	{
		Monasteries = (5 * target.religious_settlements_count)
		PopMaj = (target.majority_foreign_kingdom and 5 or 0)
		CA = (own_kingdom.crown_authority < 0 and 5 or 0)
		War = (own_kingdom.num_wars > 0 and 5 or 0)
		Rebels = (target.num_rebels > 0 and 10 or 0)
		CL = (3 * owner.class_level)
	}
	
	outcomes
	{
		main success
		{
			case src_kingdom
			{
				message
				{
					text caption = "Province converted"
					case Pagan = (target.religion.pagan)
					{
						text text = "{owner} managed to rid {target} of its old pagan ways, convincing its people to accept [{kingdom.religion:ism}|our religion]."
						case christian_kingdom = (owner.religion.christian)
						{
							voice_line = "narrator_voice:province_religion_conversion_success_catholic"
							sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ProvinceReligionConverted_Christian.tga:UI_Illustration_ProvinceReligionConverted_Christian#2" //GUID:186b9e6949a728c4a885921c2d05e3f6
						}
						case muslim_kingdom = (owner.religion.muslim)
						{
							voice_line = "narrator_voice:province_religion_conversion_success_muslim"
							sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ProvinceReligionConverted_Muslim.tga:UI_Illustration_ProvinceReligionConverted_Muslim#2" //GUID:c71bcd52bed8e7a45afba61664acb575
						}
						
					}
					case Muslim = (owner.religion.muslim)
					{
						text text = "Thanks to {owner:s} holy preachings, {target} recognized Allah as the one true God and accepted [{kingdom.religion:ism}|our religion]."
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ProvinceReligionConverted_Muslim.tga:UI_Illustration_ProvinceReligionConverted_Muslim#2" //GUID:c71bcd52bed8e7a45afba61664acb575
						voice_line = "narrator_voice:province_religion_conversion_success_muslim"
					}
					case Christian = (owner.religion.christian)
					{
						text text = "By spreading the virtues of Christianity vigorously within {target}, {owner} managed to convince its people to formally accept [{kingdom.religion:ism}|our religion]."
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ProvinceReligionConverted_Christian.tga:UI_Illustration_ProvinceReligionConverted_Christian#2" //GUID:186b9e6949a728c4a885921c2d05e3f6
						voice_line = "narrator_voice:province_religion_conversion_success_catholic"
					}
					case default
					{
						text text = "After {owner} spent months amongst the people of {target}, he successfully converted the province to [{kingdom.religion:ism}|our religion]!"
						voice_line = "narrator_voice:province_religion_conversion_success_pagan"
					}
					
					text add_text = "{p}[{owner} is now going to {next_target}.|There are no more provinces near {src_castle} to preach in, so {owner} has returned to our court.]"
				}
			}
		}
		option fail
		{
			case src_kingdom
			{
				message
				{
					text caption = "Preaching failed"
					text text = "{owner} failed to convert the people of {target} to [{kingdom.religion:ism}|our religion]."
					case Muslim = (owner.religion.muslim)
					{
						voice_line = "narrator_voice:province_religion_conversion_failed_muslim"
					}
					case Christian = (owner.religion.christian)
					{
						voice_line = "narrator_voice:province_religion_conversion_failed_catholic"
					}
					case default
					{
						voice_line = "narrator_voice:province_religion_conversion_failed_pagan"
					}
				}
			}
			
			option owner_killed = (chance_to_be_killed)
			
			option try_again
			{
				text add_text = "{p}{owner} is going to try again."
			}
			
			option move_to_next
			{
				text add_text = "{p}[{owner} is now going to {next_target}.|There are no more provinces near {src_castle} to preach in, so {owner} has returned to our court.]"
			}
		}
		
		// for testing
		// option cancel_event = 0
		// {
		// 	message
		// 	{
		// 		text caption = "Religion conversion cancelled"
		// 		text text = "{owner} is no longer trying to convert {target} to [{kingdom.religion.name}|our religion]"
		// 	}
		// }
	}
}

template ReligionSpecificAction : CharacterAction
{
	cancel_events
	{
		own_kingdom religion_changed = (!condition)
	}
	
	cancelled_message_texts
	{
		text religion_changed = "Since we are now {own_kingdom.religion:ans}, {owner} had to abandon his task."
	}
	ai_validate = true
}

def ReligionSpecificOpportunity : ReligionSpecificAction
{
	opportunity
	{
		chance_to_add_on_tick = 20
		chance_to_del_on_tick = 20
		activate_message = NewClericOpportunityMessage
		deactivate_message = null
		min_active_time = 300
	}
	
	src_messages
	{
		text new_opportunity_caption = "{kingdom.cleric_title} opportunity: {name}"
		text new_opportunity = "{tooltip}"
	}
	
	float success_base_chance = 30
	float validation_min_chance = 20
	
	success_fail
	{
		sf_base = (success_base_chance)
		{
			text name = "Base chance"
			show_always = false
		}
		
		sf_cleric_level = (owner.class_level * 2)
		{
			text name = "{owner.class_name}'s level (x2)"
		}
		
		sf_our_culture = (round(owner.kingdom.ks_culture/100))
		{
			text name = "Our culture"
		}
		
		sf_cleric_is_patriarch = (owner.is_patriarch * 10)
		{
			text name = "{owner.class_name} is patriarch"
		}
		
		sf_cleric_is_cardinal = (owner.is_cardinal * 8)
		{
			text name = "{owner.class_name} is cardinal"
		}
		
		sf_caliphate = (own_kingdom.is_caliphate * 10)
		{
			text name = "Our kingdom is a caliphate"
		}
		
		sf_cleric_king = (own_kingdom.king.is_cleric * 5)
		{
			text name = "Our king is a {own_kingdom.king.class_name}"
		}
		
		sf_king_religion_ability = (own_kingdom.king_religion_ability * 2)
		{
			text name = "Our king's religion ability (x2)"
		}
	}
}

def NewClericOpportunityMessage : Message
{
	icon = "Assets/UI/Elements/msg_icons/Icon_Message_Opportunity_Cleric_Positive.png:Icon_Message_Opportunity_Cleric_Positive#2" //GUID:8e0b16e0ea2d1f4419df7d953df5d71f
	caption = "[{src_messages.new_opportunity_caption}|{kingdom.cleric_title} opportunity: {name}]"
	body = "{src_messages.new_opportunity}"
	buttons
	{
		action activate = (action)
		// {
		// 	text text = "&Take it!"
		// }
		
		cancel_opportunity cancel_op
		{
			text text = "&Forget opportunity"
		}
		
		text ok = "&Let me think"
	}
	
	//ui_prefab = "Assets/UI/Messages/UIP_NewPlotAvailableMessage.prefab" //GUID:1fe9b0b7d73ffe948983be83cb6265ae
	sound_effect = "event:/sound_effects/notification/message/opportunity_default" //sound effect not ready
}

template CatholicAction : ReligionSpecificAction
{
	condition = (own_kingdom.is_catholic && !own_kingdom.excommunicated)
	enabled_condition = (!papacy.defeated)
	
	cancel_events
	{
		own_kingdom excommunicated = (!condition)
		own_kingdom unexcommunicated = (!condition)
		papacy_destroyed
		{
			sender = (papacy)
			message = "kingdom_destroyed"
		}
	}
	
	validate_prompts
	{
		text _enabled_condition = "{clr:red_bright}{papacy} does not exist{/clr}"
	}
	
	cancelled_message_texts
	{
		text excommunicated = "Since {pope} excommunicated us, {owner} had to abandon his task."
		text unexcommunicated = "Since we are no longer excommunicated, {owner} had to abandon his task."
		text papacy_destroyed = "Since {papacy} no longer exists, {owner} had to abandon his task."
	}
}

def MissionInRomeAction : ReligionSpecificAction
{
	name = "Go on a mission in {catholic.hq_realm}"
	tooltip = "Send {owner} in {catholic.hq_realm} to improve our relations with {papacy}[{owner.kingdom.is_catholic:if} and our piety[ ({income.piety:bonus}{piety_icon})]|, commercial potential[ ({income.trade:bonus}{trade_icon})] and knowledge[ ({income.books:bonus}{books_icon})]]."
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_MissionInRome.tga:Icon_CharacterAction_MissionInRome#2" //GUID:905332d2781349349b1692b9ddf26e70
	
	condition = (own_kingdom.is_catholic && !own_kingdom.excommunicated || own_kingdom.is_orthodox)
	enabled_condition = (!papacy.defeated)
	
	decline_voice_line = "Decline"
	prepare_voice_line = "send_abroad"
	cancel_voice_line = "Recall"
	cancelled_voice_line = "mission_cancelled"
	success_voice_line = "arrived_abroad"
	
	unique
	unique_status = "OnMissionInRomeStatus"
	
	cancel_events
	{
		own_kingdom excommunicated
		papacy_destroyed
		{
			sender = (papacy)
			message = "kingdom_destroyed"
		}
	}
	
	cost
	{
		piety = 200
		gold = (SSum(owner.kingdom, 0.5, 100))
	}
	
	income = OnMissionInRomeStatus.income
	
	upkeep : OnMissionInRomeStatus.upkeep
	
	prepare_duration = 30
	prepare_status_text = $[
		"{owner} is travelling to {catholic.hq_realm} to improve our relations with {papacy}."
		"[{p}Once he arrives, we will pay an upkeep of {OnMissionInRomeStatus.upkeep}.]"
		]
	
	
	
	
	validate_prompts
	{
		text _enabled_condition = "{clr:red_bright}{papacy} does not exist{/clr}"
		text _unique = "{clr:red_bright}[{other_character_doing_the_same}|Another cleric of ours] is already on a mission in {catholic.hq_realm}{/clr}"
	}
	
	cancelled_message_caption = "Mission to Rome halted"
	cancelled_message_texts
	{
		text excommunicated = "Since {pope} excommunicated us, {owner} had to return from {catholic.hq_realm}."
		text papacy_destroyed = "Since {papacy} no longer exists, {owner} had to return from {catholic.hq_realm}."
	}
	
	outcomes
	{
		main success = 100
		{
			message
			{
				case src_kingdom
				{
					//sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_Diplomat_Success.png:UI_Illustration_Diplomat_Success#2" //GUID:d6566a05f3a2b6745ba0f25b165106f5
					text caption = "Our cleric arrived in {catholic.hq_realm}"
					text text = "Our {owner} is now in {catholic.hq_realm}. His primary goals are to warm our relations with the Papacy[{owner.kingdom.is_catholic:if} and follow the spiritual guidance of the holiest clerics|, gain some knowledge and improve our trade potential]."
				}
			}
		}
	}
}

def MissionInConstantinopleAction : ReligionSpecificAction
{
	name = "Go on a mission in {orthodox.hq_realm}"
	tooltip = "Send {owner} in {orthodox.hq_realm} to study[ ({income.books:bonus}{books_icon})] and [{owner.kingdom.is_orthodox:if}raise our piety[ ({income.piety:bonus}{piety_icon})]|improve our commercial potential[ ({income.trade:bonus}{trade_icon})]]." //[{own_kingdom.is_not_constantinople_kingdom:if} and try to improve our relations with {constantinople_kingdom}]
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_MissionInConstantinople.tga:Icon_CharacterAction_MissionInConstantinople#2" //GUID:277c42da6cab94f40a7338f510f58301
	
	condition = (own_kingdom.is_catholic || own_kingdom.is_orthodox) && !owner.is_ecumenical_patriarch
	//enabled_condition = (!constantinople_kingdom.defeated)
	
	decline_voice_line = "Decline"
	prepare_voice_line = "send_abroad"
	cancel_voice_line = "Recall"
	cancelled_voice_line = "mission_cancelled"
	success_voice_line = "arrived_abroad"
	
	unique
	unique_status = "OnMissionInConstantinopleStatus"
	
	cost
	{
		piety = 200
		gold = (SSum(owner.kingdom, 0.5, 100))
	}
	
	income = OnMissionInConstantinopleStatus.income
	
	upkeep : OnMissionInConstantinopleStatus.upkeep
	
	prepare_duration = 30
	prepare_status_text = $[
		"{owner} is travelling to {orthodox.hq_realm} to study." //not true - [{own_kingdom.is_not_constantinople_kingdom:if} and improve our relations with {constantinople_kingdom}]"
		"[{p}Once he arrives, we will pay an upkeep of {OnMissionInConstantinopleStatus.upkeep}.]"
		]
	
	
	validate_prompts
	{
		//text _enabled_condition = "{clr:red_bright}{byzantium} does not exist{/clr}"
		text _unique = "{clr:red_bright}[{other_character_doing_the_same}|Another cleric of ours] is already on a mission in {orthodox.hq_realm}{/clr}"
	}
	
	cancelled_message_caption = "Mission to Constantinople halted"
	
	outcomes
	{
		main success = 100
		{
			message
			{
				case src_kingdom
				{
					//sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_Diplomat_Success.png:UI_Illustration_Diplomat_Success#2" //GUID:d6566a05f3a2b6745ba0f25b165106f5
					text caption = "Our cleric arrived in {orthodox.hq_realm}"
					text text = "Our {owner} is now in {orthodox.hq_realm}. His primary goals are to look for precious knowledge in the vast archives of the Ecumenical Patriarchate and [{owner.kingdom.is_orthodox:if}raise his piety even further|improve our trade potential]."
				}
			}
		}
	}
}


def PacifyRebelsAction : ReligionSpecificOpportunity
{
	name = "Pacify"
	tooltip = "Have {owner} pacify the rebellion, lead by {target}.{p}{p}This action is risky and there is a chance that our {owner.kingdom.cleric_title} will be killed by the rebels, if he angers them."
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_PacifyRebels.tga:Icon_CharacterAction_PacifyRebels#2" //GUID:a3c543660c40df04da76075c0d27a0eb
	
	prepare_status_text = "{owner} is pacifying the rebellion, lead by {target}"
	
	decline_voice_line = "Decline"
	prepare_voice_line = "confirm_action"
	cancel_voice_line = "cancel_action"
	cancelled_voice_line = "action_failed"
	success_voice_line = "action_succeeded"
	fail_voice_line = "action_failed"
	
	target = "Character"
	mission = "Ignore"
	
	opportunity
	{
		chance_to_add_on_tick = 15
		chance_to_del_on_tick = 30
	}
	
	prepare_duration = (60 + target.class_level * 6)
	
	float success_base_chance = 50
	
	success_fail
	{
		perc sf_target_level = (-target.class_level * 2)
		{
			text name = "Rebel leader level (x2)"
		}
		perc sf_target_is_loyalist = (-target.rebellion.is_loyalist * 10)
		{
			text name = "Loyalist rebellion"
		}
		perc sf_target_loyal_to_other_religion = ((target.rebellion.is_loyalist && target.rebellion.loyal_to.religion != own_character.kingdom.religion) * -20)
		{
			text name = "Rebels follow other religion"
		}
	}
	
	cost
	{
		gold = (500 + target.class_level * 200)
		piety = (150 + target.class_level * 30)
	}
	
	src_messages
	{
		new_opportunity_caption = "{kingdom.cleric_title} opportunity: Pacify Rebels"
		new_opportunity = "{owner} can end {target:s} rebellion once and for all, by convincing the leader that his aggression goes against [{owner.kingdom.is_pagan:if}the will of the Gods|God's will]."
	}
	
	outcomes
	{
		main success
		{
			message
			{
				text caption = "Rebels pacified"
				text text = ["{owner} managed to convince {target}, that fighting against his own king is a great sin and that he should not follow the path of blood and killing anymore. As the rebels layed down their weapons, {owner} absolved them from their sins.",
							 "After days, spent among the military camps of {target}, {owner} managed to convince him, that our kingdom is ruled wisely and that there is a divine plan behind all that may seem confusing or wrong to the ordinary people.",
							 "{owner} discussed the demands of {target} and they agreed that all of the rebel's problems will be solved, with the aid of our {owner.kingdom.cleric_title:s}."]
				case Catholic = (owner.kingdom.is_catholic)
				{
					sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericCatholicSuccess_Catholic.tga:UI_Illustration_ClericCatholicSuccess_Catholic#2" //GUID:d50bd29a2cfed9a4a8f526143d77db82
				}
				case Orthodox = (owner.kingdom.is_orthodox)
				{
					sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericOrthodoxSuccess_Orthodox.tga:UI_Illustration_ClericOrthodoxSuccess_Orthodox#2" //GUID:ab2e4db5e7b911d45887323322eb0de6
				}
				case Muslim = (owner.kingdom.is_muslim)
				{
					sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ScholarSuccess_Muslim.tga:UI_Illustration_ScholarSuccess_Muslim#2" //GUID:9e3a87f41b11c12449836c70575107c2
				}
				case Pagan = (owner.kingdom.is_pagan)
				{
					sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ShamanSuccess_Pagan.tga:UI_Illustration_ShamanSuccess_Pagan#2" //GUID:17e9b4ba23b1c3345b48e0b1cfe311ac
				}
			}
			main join_rebel = (100 * (IsInCourt(own_kingdom, target) || IsRoyalRelative(own_kingdom, target)))
			{
				kingdom = (own_kingdom)
				also crown_authority = "forgive_court_rebel"
				{
					src_kingdom = (own_kingdom)
				}
			}
			option kill_target_character
		}
		option fail
		{
			main owner_killed = (10 + target.class_level * 2 + target.rebellion.is_loyalist * 20)
			{
				message
				{
					voice_line = null
					text caption = "Our {owner.kingdom.cleric_title} was killed"
					text text = ["The soldiers of {target} met {owner} with great hostility. Though he was a holy man, they chained him and after a day of unspeakable tortures, he sadly perished.",
							 	 "{target} agreed to speak with {owner}, but only got enraged by the words of our {owner.kingdom.cleric_title} and ordered him hanged. This mad dog will only understand force, not words."]
				}
			}
			option default
			{
				message
				{
					text caption = "{owner.kingdom.cleric_title} failed"
					text text = ["{target} didn't even agree to speak with {owner}, though the sneaky rebel accepted his gifts. We must find another way to deal with him.",
							 	 "{target} agreed to meet {owner}, but only got enraged by his words. The rebels refused to lay down their weapons.",
							 	 "{owner} was accepted in {target:s} camp and though they spoke hours and hours, the rebel could not be convinced that his demands will be really met, regardless the 'empty' promisses of {owner.kingdom.king}."]
					
					case Catholic = (owner.kingdom.is_catholic)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericFail_Catholic.tga:UI_Illustration_ClericFail_Catholic#2" //GUID:f81eb49bbb9aff049aef2f80864eb757
					}
					case Orthodox = (owner.kingdom.is_orthodox)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericFail_Orthodox.tga:UI_Illustration_ClericFail_Orthodox#2" //GUID:1c58a3de67288e241b3b2f2d1edf88a3
					}
					case Muslim = (owner.kingdom.is_muslim)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericFail_Muslim.tga:UI_Illustration_ClericFail_Muslim#2" //GUID:7bbc8c795dcfed047913442a8f598c2b
					}
					case Pagan = (owner.kingdom.is_pagan)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericFail_Pagan.tga:UI_Illustration_ClericFail_Pagan#2" //GUID:4d283451d8e4c7d458c7bfbf525aad7e
					}
				}
			}
		}
	}
	
	cancel_events
	{
		target dying
	}
	
	cancelled_message_caption = "Pacify attempt halted"
	cancelled_message_texts
	{
		text dying = "{target} died before our {owner.kingdom.cleric_title} could meet him! There will be no redemption for the rebel leader, but at least our problem is solved."
	}
}



def AppeaseClergyAction : ReligionSpecificOpportunity
{
	name = "Appease {owner.kingdom.opinions.ClergyOpinion.def.name}"
	tooltip = "Have {owner} appease our {owner.kingdom.opinions.ClergyOpinion.def.name} and increase their opinion towards the crown."
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_AppeaseClergy.tga:Icon_CharacterAction_AppeaseClergy#2" //GUID:0855deaeabd78784da0dbf1e85f9c182
	prepare_status_text = "{owner} is appeasing our {owner.kingdom.opinions.ClergyOpinion.def.name}"

	decline_voice_line = "Decline"
	prepare_voice_line = "confirm_action"
	cancel_voice_line = "cancel_action"
	cancelled_voice_line = "mission_cancelled"
	fail_voice_line = "action_failed"
	
	mission = "NotOnMission"
	
	prepare_duration = 60
	float success_base_chance = 50
	
	cost
	{
		gold = (SSum(owner.kingdom, 0.3, 50))
		piety = 300
	}
	
	int increase = 1/3
	
	opportunity
	{
		chance_to_add_on_tick = ((20 - owner.kingdom.opinions.ClergyOpinion.value) * (1 - owner.kingdom.opinions.ClergyOpinion.is_max))
		chance_to_del_on_tick = 30
	}
	
	src_messages
	{
		new_opportunity = "{owner} feels that the time is right to spend some time with our {owner.kingdom.opinions.ClergyOpinion.def.name}, in an attempt to convince them that {owner.kingdom.king} is a devout ruler chosen by [{owner.kingdom.is_pagan:if}the Gods|God]."
	}
	
	outcomes
	{
		main success
		{
			message
			{
				text caption = "Appease successful"
				text text = ["{owner} praised [{owner.is_king:if}his godly deeds|the deeds of {owner.kingdom.king}] among the other {owner.kingdom.cleric_title:s}. Surprisingly, they believed him.",
							 "When all importaint {owner.kingdom.cleric_title:s} made their annual gathering, {owner} spoke in front of them how [{owner.is_king:if}he|{owner.kingdom.king}] plans to bolster our religion and culture.",
							 "As some {owner.kingdom.cleric_title:s} were unhappy with {owner.kingdom.king:s} treatment of our religious institution, [{owner.is_king:if}he|{owner}] explained to them why were the kings' actions truely necessary.",
							 "There were quite a few  {owner.kingdom.cleric_title:s}, that spoke against our honorable {owner.kingdom.king}, so [{owner.is_king:if}he|{owner}] made sure that they will be denounced."]
				case Catholic = (owner.kingdom.is_catholic)
				{
					sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericCatholicSuccess_Catholic.tga:UI_Illustration_ClericCatholicSuccess_Catholic#2" //GUID:d50bd29a2cfed9a4a8f526143d77db82
					voice_line = "narrator_voice:opinion_increased_clergy"
				}
				case Orthodox = (owner.kingdom.is_orthodox)
				{
					sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericOrthodoxSuccess_Orthodox.tga:UI_Illustration_ClericOrthodoxSuccess_Orthodox#2" //GUID:ab2e4db5e7b911d45887323322eb0de6
					voice_line = "narrator_voice:opinion_increased_clergy"
				}
				case Muslim = (owner.kingdom.is_muslim)
				{
					sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ScholarSuccess_Muslim.tga:UI_Illustration_ScholarSuccess_Muslim#2" //GUID:9e3a87f41b11c12449836c70575107c2
					voice_line = "narrator_voice:opinion_increased_scholars"
				}
				case Pagan = (owner.kingdom.is_pagan)
				{
					sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ShamanSuccess_Pagan.tga:UI_Illustration_ShamanSuccess_Pagan#2" //GUID:17e9b4ba23b1c3345b48e0b1cfe311ac
					voice_line = "narrator_voice:opinion_increased_shamans"
				}
			}
			also opinion_change
			{
				opinion = "ClergyOpinion"
				amount = (rand_increase)
			}
		}
		option fail
		{
			message
			{
				text caption = "{owner.kingdom.cleric_title} failed"
				text text = ["{owner} failed to convince our {owner.kingdom.cleric_title:s}, that [{owner.is_king:if}his deeds|the deeds of our king] are rightful. Maybe they can be proved wrong by actions, not words.",
							 "No one believed {owner}, when he tried to convince our {owner.kingdom.cleric_title:s}, that [{owner.is_king:if}he|{owner.kingdom.king}] knows how to solve their problems.",
							 "Even {owner} couldn't defend the last decisions [{owner.is_king:if}he made|of {owner.kingdom.king}] in front of our {owner.kingdom.cleric_title:s} - some even wanted him denounced."]
				
				case Catholic = (owner.kingdom.is_catholic)
				{
					sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericFail_Catholic.tga:UI_Illustration_ClericFail_Catholic#2" //GUID:f81eb49bbb9aff049aef2f80864eb757
				}
				case Orthodox = (owner.kingdom.is_orthodox)
				{
					sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericFail_Orthodox.tga:UI_Illustration_ClericFail_Orthodox#2" //GUID:1c58a3de67288e241b3b2f2d1edf88a3
				}
				case Muslim = (owner.kingdom.is_muslim)
				{
					sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericFail_Muslim.tga:UI_Illustration_ClericFail_Muslim#2" //GUID:7bbc8c795dcfed047913442a8f598c2b
				}
				case Pagan = (owner.kingdom.is_pagan)
				{
					sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericFail_Pagan.tga:UI_Illustration_ClericFail_Pagan#2" //GUID:4d283451d8e4c7d458c7bfbf525aad7e
				}
			}
		}
	}
}


def GainNeighborsLoyaltyAction : ReligionSpecificOpportunity
{
	name = "Gain Province Loyalty"
	tooltip = "Have {owner} travel to {target.kingdom}, spread our culture among {target:s} population and to try to win their loyalty.{p}{p}However, this mission in a foreign kingdom holds a risk of imprisonment and even death."
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_GainNeighborsLoyalty.tga:Icon_CharacterAction_GainNeighborsLoyalty#2" //GUID:8d8be8f3bb908384ea0edaa63e3daa80
	prepare_status_text = "{owner} is in {target.kingdom}, trying to win the loyalty of {target:s} population"
	prepare_duration = (300 - owner.class_level * 5)
	
	cost
	{
		piety = 500
		gold = (SSum(owner.kingdom, 0.5, 100))
	}
	
	decline_voice_line = "Decline"
	prepare_voice_line = "confirm_action"
	cancel_voice_line = "cancel_action"
	cancelled_voice_line = "action_failed"
	fail_voice_line = "action_failed"
	
	target = "realm"
	mission = "NotOnMission"
	opportunity
	{
		chance_to_add_on_tick = 10
		chance_to_del_on_tick = 10
	}
	
	src_messages
	{
		new_opportunity = "{owner} is ready to travel to {target}, in order to spread our ways and gain the loyalty of the province."
	}
	
	float pop_majority_treshold = 85
	int min_our_neighboring_provinces = 2
	float majority_after_convertion = 60
	
	float success_base_chance = 40
	
	success_fail
	{
		//sf_different_religion; sf_same_religion_different_family; sf_we_are_at_war; sf_culture_distance
		sf_they_are_our_vassal = ((target.kingdom.vassal_of == own_kingdom) * 20)
		{
			text name = "They are our vassal"
		}
		perc sf_different_religion = (-30 * (ReligionDistance(target.realm, owner.kingdom) == 2))
		{
			text name = "Different religion"
		}
		perc sf_same_religion_different_family = (-15 * (ReligionDistance(target.realm, owner.kingdom) == 1))
		{
			text name = "Different religion family"
		}
		perc sf_culture_distance = (-5 * CultureDistance(target.realm, owner.kingdom))
		{
			text name = "Cultural differences"
		}
		perc sf_province_is_tc = (-20 * target.realm.is_trade_center)
		{
			text name = "Province is trade center"
		}
		perc sf_their_culture = (-round(target.kingdom.ks_culture/50))
		{
			text name = "Their culture"
		}
		perc sf_province_is_hq = (-50 * target.realm.is_religion_important)
		{
			text name = "Province is religious center"
		}
		perc sf_war = (-50 * AreEnemies(own_kingdom, target.kingdom))
		{
			text name = "We are at war"
		}
	}
	outcomes
	{
		main success
		{
			case src_kingdom
			{
				message
				{
					text caption = "We gained population's loyalty"
					text text = ["Learning more and more about our marvelous culture and speaking our language, thanks to {owner:s} efforts, the people in {target} no longer feel as part of {target.kingdom}. They are now loyal to us.",
								 "{owner} converted {target:s} population to our side. The people there now see, that they will be better off being a part of {owner.kingdom}, not {target.kingdom}."]
					
					case CatholicClericCatholicProvince = (owner.kingdom.is_catholic && target.is_catholic)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericCatholicSuccess_Catholic.tga:UI_Illustration_ClericCatholicSuccess_Catholic#2" //GUID:d50bd29a2cfed9a4a8f526143d77db82
					}
					case CatholicClericOrthodoxProvince = (owner.kingdom.is_catholic && target.is_orthodox)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericCatholicSuccess_Orthodox.tga:UI_Illustration_ClericCatholicSuccess_Orthodox#2" //GUID:e8929094b7a3f0c48bbd254a83817f7c
					}
					case CatholicClericMuslimProvince = (owner.kingdom.is_catholic && target.is_muslim)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericCatholicSuccess_Muslim.tga:UI_Illustration_ClericCatholicSuccess_Muslim#2" //GUID:d4ab6ad6ac84bd94e9d3448860997fa2
					}
					case CatholicClericPaganProvince = (owner.kingdom.is_catholic && target.is_pagan)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericCatholicSuccess_Pagan.tga:UI_Illustration_ClericCatholicSuccess_Pagan#2" //GUID:3a4bbb484f05d0042beeb3a9f3a0b279
					}
					case OrthodoxClericOrthodoxProvince = (owner.kingdom.is_orthodox && target.is_orthodox)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericOrthodoxSuccess_Orthodox.tga:UI_Illustration_ClericOrthodoxSuccess_Orthodox#2" //GUID:ab2e4db5e7b911d45887323322eb0de6
					}
					case OrthodoxClericCatholicProvince = (owner.kingdom.is_orthodox && target.is_catholic)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericOrthodoxSuccess_Catholic.tga:UI_Illustration_ClericOrthodoxSuccess_Catholic#2" //GUID:408b7d066bbaac644b5b3b2f5c5d2e9c
					}
					case OrthodoxClericMuslimProvince = (owner.kingdom.is_orthodox && target.is_muslim)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericOrthodoxSuccess_Muslim.tga:UI_Illustration_ClericOrthodoxSuccess_Muslim#2" //GUID:62170bf741d7eba479d9270fc62afaff
					}
					case OrthodoxClericPaganProvince = (owner.kingdom.is_orthodox && target.is_pagan)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericOrthodoxSuccess_Pagan.tga:UI_Illustration_ClericOrthodoxSuccess_Pagan#2" //GUID:777cd1332c0afdb4dae778f3ca4a63fb
					}
					case ScholarMuslimProvince = (owner.kingdom.is_muslim && target.is_muslim)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ScholarSuccess_Muslim.tga:UI_Illustration_ScholarSuccess_Muslim#2" //GUID:9e3a87f41b11c12449836c70575107c2
					}
					case ScholarCatholicProvince = (owner.kingdom.is_muslim && target.is_catholic)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ScholarSuccess_Catholic.tga:UI_Illustration_ScholarSuccess_Catholic#2" //GUID:8b5f66d5de2182b4790cd7051cc93c60
					}
					case ScholarOrthodoxProvince = (owner.kingdom.is_muslim && target.is_orthodox)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ScholarSuccess_Orthodox.tga:UI_Illustration_ScholarSuccess_Orthodox#2" //GUID:49d44e6694c65f24b95edd2360ed7e3c
					}
					case ScholarPaganProvince = (owner.kingdom.is_muslim && target.is_pagan)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ScholarSuccess_Pagan.tga:UI_Illustration_ScholarSuccess_Pagan#2" //GUID:7db76abcd476d1e4fbef26f19666c38a
					}
					case ShamanPaganProvince = (owner.kingdom.is_pagan && target.is_pagan)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ShamanSuccess_Pagan.tga:UI_Illustration_ShamanSuccess_Pagan#2" //GUID:17e9b4ba23b1c3345b48e0b1cfe311ac
					}
					case ShamanCatholicProvince = (owner.kingdom.is_pagan && target.is_catholic)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ShamanSuccess_Catholic.tga:UI_Illustration_ShamanSuccess_Catholic#2" //GUID:51d40e7649adecc4b814b51445ff45d4
					}
					case ShamanOrthodoxProvince = (owner.kingdom.is_pagan && target.is_orthodox)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ShamanSuccess_Orthodox.tga:UI_Illustration_ShamanSuccess_Orthodox#2" //GUID:b2641aaa35391d3459ad0d1013616355
					}
					case ShamanMuslimProvince = (owner.kingdom.is_pagan && target.is_muslim)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ShamanSuccess_Muslim.tga:UI_Illustration_ShamanSuccess_Muslim#2" //GUID:f3ae3fa432b928446a06ca2769bfc5d0
					}
				}
			}
		}
		option fail
		{
			main owner_imprisoned = (20 + 20 * (AreEnemies(own_kingdom, target.kingdom)))
			{
				case src_kingdom
				{
					message
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_RenouncedPrisoner.tga:UI_Illustration_RenouncedPrisoner#2" //GUID:78a79647b25462e4a8f727d68aa38f71
						text caption = "Our {owner.kingdom.cleric_title} was imprisoned"
						text text = ["{owner} was apprehended by guards in {target.kingdom}. As we could have expected, praising our culture in their kingdom was not well accepted.",
									 "It seems that {owner:s} intentions to culturally convert the people in {target} came to the attention of the {target.kingdom:ian} guards. They immediately threw him in their dungeon."]
					}
				}
				case target_kingdom
				{
					message
					{
						text caption = "Foreign {owner.kingdom.cleric_title} was imprisoned"
						text text = ["{owner} was caught, praising the {owner.kingdom:ian} culture among our people in {target}. He now rots in our dungeons.",
								     "Honest men from {target} brought us {owner} from {owner.kingdom}. It seems that he tried to brainwash our people and gain their loyalty."]
					}
				}
				also rel_change = -100
			}
			option owner_killed = (5 + 5 * (AreEnemies(own_kingdom, target.kingdom)))
			{
				case src_kingdom
				{
					message
					{
						voice_line = null
						text caption = "Our {owner.kingdom.cleric_title} was killed"
						text text = ["Due to his attempts to spread our culture in {target.kingdom}, {owner} was arrested by the guards and executed publicly. He died like a true martyr.",
									 "While trying to spread our culture in {target}, {target.kingdom}, {owner} was captured and killed by an angry mob of local fanatics. May he rest in peace."]
					}
				}
				case target_kingdom
				{
					message
					{
						text caption = "Foreign {owner.kingdom.cleric_title} was killed"
						text text = ["The {owner.kingdom:ian} {owner} was caught, trying to win over our people in {target}. Enraged, the local noblemen ordered him killed before we could bring the news to you, sire!",
								     "We learned about the death of {owner}, a {owner.kingdom:ian}, who tried to spread his culture among our people in {target}. A group of zealous patriots caught him and hung him in the town square."]
					}
				}
				also rel_change = -200
			}
			option default
			{
				case src_kingdom
				{
					message
					{
						text caption = "Our {owner.kingdom.cleric_title} failed"
						text text = ["{owner} was unable to gain the loyalty of the people in {target} - no one cared to listen about the greatness of our culture.",
									 "{owner} barely made it out {target.kingdom} alive! He reported, that the people in {target} are willing to kill anyone, trying to talk about foreign culture.",
									 "Sending {owner} in {target} turned out riskier than we thought - it seems that the {target.kingdom:ian} guards were instructed to arrest anyone, talking about foreign culture.",
									 "{target.kingdom:ian} guards deported {owner} from {target}, as his attempts to praise our culture among their people were neither unnoticed, nor well-received."]
						
						case Catholic = (owner.kingdom.is_catholic)
						{
							sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericFail_Catholic.tga:UI_Illustration_ClericFail_Catholic#2" //GUID:f81eb49bbb9aff049aef2f80864eb757
						}
						case Orthodox = (owner.kingdom.is_orthodox)
						{
							sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericFail_Orthodox.tga:UI_Illustration_ClericFail_Orthodox#2" //GUID:1c58a3de67288e241b3b2f2d1edf88a3
						}
						case Muslim = (owner.kingdom.is_muslim)
						{
							sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericFail_Muslim.tga:UI_Illustration_ClericFail_Muslim#2" //GUID:7bbc8c795dcfed047913442a8f598c2b
						}
						case Pagan = (owner.kingdom.is_pagan)
						{
							sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericFail_Pagan.tga:UI_Illustration_ClericFail_Pagan#2" //GUID:4d283451d8e4c7d458c7bfbf525aad7e
						}
					}
				}
			}
		}
	}

	cancel_events
	{
		target_realm kingdom_changed
	}
	cancelled_message_caption = "Loyalty conversion stopped"
	cancelled_message_texts
	{
		text kingdom_changed = "As {target} was just conquered, {owner:s} mission was interrupted - these dangerous times are not suitable for persuading the masses. When we establish control over the province, we'll find a way to gain their loyalty in time."
	}
}

def ReligionSpreadAction : ReligionSpecificOpportunity
{
	name = "Religion Spread"
	tooltip = "Have {owner} travel to {target.kingdom} and spread our religion in {target}.{p}{p}However, this mission in a foreign kingdom holds a risk of imprisonment and even death."
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_ReligionSpread.tga:Icon_CharacterAction_ReligionSpread#2" //GUID:7172a355ac6d35b458e6b13a788b7610
	prepare_status_text = "{owner} is spreading our religion in the province {target}, {target.kingdom}"
	prepare_duration = (300 - owner.class_level * 5 * (1 - (own_character.cs_conversion_rate_perc / 100)))
	
	decline_voice_line = "Decline"
	prepare_voice_line = "confirm_action"
	cancel_voice_line = "cancel_action"
	cancelled_voice_line = "action_failed"
	success_voice_line = "action_succeeded"
	fail_voice_line = "action_failed"
	
	target = "realm"
	mission = "NotOnMission"
	
	cost
	{
		piety = 500
		gold = (SSum(owner.kingdom, 0.5, 100))
	}
	
	opportunity
	{
		chance_to_add_on_tick = 10
		chance_to_del_on_tick = 10
	}
	
	src_messages
	{
		new_opportunity = "{owner} has arrived in our royal chambers with the divine request of spreading {owner.kingdom.religion:ism} among the {target.kingdom:ians} in {target}. Shall we send our {owner.class_name}?"
	}
	
	float success_base_chance = 50
	
	success_fail
	{
		sf_they_are_our_vassal = ((target.kingdom.vassal_of == own_kingdom) * 20)
		{
			text name = "They are our vassal"
		}
		sf_loyal_to_us = (20 * (target.majority_kingdom == own_kingdom))
		{
			text name = "They are loyal to us"
		}
		perc sf_different_religion = (-10 * (ReligionDistance(target.realm, owner.kingdom) == 2))
		{
			text name = "Completely different religion"
		}
		perc sf_loyal_to_them = (-10 * (target.majority_kingdom == target.kingdom))
		{
			text name = "They are loyal to {target.kingdom}"
		}
		perc sf_culture_distance = (-5 * CultureDistance(target.realm, owner.kingdom))
		{
			text name = "Cultural differences"
		}
		perc sf_province_is_tc = (-10 * target.realm.is_trade_center)
		{
			text name = "Province is trade center"
		}
		perc sf_province_is_hq = (-50 * target.realm.is_religion_important)
		{
			text name = "Province is religious center"
		}
		perc sf_their_culture = (-round(target.kingdom.ks_culture/50))
		{
			text name = "Their culture"
		}
		perc sf_war = (-50 * AreEnemies(own_kingdom, target.kingdom))
		{
			text name = "We are at war"
		}
	}
	outcomes
	{
		main success
		{
			case src_kingdom
			{
				message
				{
					text caption = "Religious conversion successful"
					text text = ["Due to {owner:s} efforts, the {target.kingdom:ians} in {target} accepted {owner.kingdom.religion:ism}!",
								 "{owner:s} mission in {target.kingdom} was a success - he opened the eyes of the people in {target}. Once heathens, they now walk the righteous path."]
					
					case CatholicClericCatholicProvince = (owner.kingdom.is_catholic && target.is_catholic)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericCatholicSuccess_Catholic.tga:UI_Illustration_ClericCatholicSuccess_Catholic#2" //GUID:d50bd29a2cfed9a4a8f526143d77db82
					}
					case CatholicClericOrthodoxProvince = (owner.kingdom.is_catholic && target.is_orthodox)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericCatholicSuccess_Orthodox.tga:UI_Illustration_ClericCatholicSuccess_Orthodox#2" //GUID:e8929094b7a3f0c48bbd254a83817f7c
					}
					case CatholicClericMuslimProvince = (owner.kingdom.is_catholic && target.is_muslim)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericCatholicSuccess_Muslim.tga:UI_Illustration_ClericCatholicSuccess_Muslim#2" //GUID:d4ab6ad6ac84bd94e9d3448860997fa2
					}
					case CatholicClericPaganProvince = (owner.kingdom.is_catholic && target.is_pagan)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericCatholicSuccess_Pagan.tga:UI_Illustration_ClericCatholicSuccess_Pagan#2" //GUID:3a4bbb484f05d0042beeb3a9f3a0b279
					}
					case OrthodoxClericOrthodoxProvince = (owner.kingdom.is_orthodox && target.is_orthodox)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericOrthodoxSuccess_Orthodox.tga:UI_Illustration_ClericOrthodoxSuccess_Orthodox#2" //GUID:ab2e4db5e7b911d45887323322eb0de6
					}
					case OrthodoxClericCatholicProvince = (owner.kingdom.is_orthodox && target.is_catholic)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericOrthodoxSuccess_Catholic.tga:UI_Illustration_ClericOrthodoxSuccess_Catholic#2" //GUID:408b7d066bbaac644b5b3b2f5c5d2e9c
					}
					case OrthodoxClericMuslimProvince = (owner.kingdom.is_orthodox && target.is_muslim)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericOrthodoxSuccess_Muslim.tga:UI_Illustration_ClericOrthodoxSuccess_Muslim#2" //GUID:62170bf741d7eba479d9270fc62afaff
					}
					case OrthodoxClericPaganProvince = (owner.kingdom.is_orthodox && target.is_pagan)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericOrthodoxSuccess_Pagan.tga:UI_Illustration_ClericOrthodoxSuccess_Pagan#2" //GUID:777cd1332c0afdb4dae778f3ca4a63fb
					}
					case ScholarMuslimProvince = (owner.kingdom.is_muslim && target.is_muslim)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ScholarSuccess_Muslim.tga:UI_Illustration_ScholarSuccess_Muslim#2" //GUID:9e3a87f41b11c12449836c70575107c2
					}
					case ScholarCatholicProvince = (owner.kingdom.is_muslim && target.is_catholic)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ScholarSuccess_Catholic.tga:UI_Illustration_ScholarSuccess_Catholic#2" //GUID:8b5f66d5de2182b4790cd7051cc93c60
					}
					case ScholarOrthodoxProvince = (owner.kingdom.is_muslim && target.is_orthodox)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ScholarSuccess_Orthodox.tga:UI_Illustration_ScholarSuccess_Orthodox#2" //GUID:49d44e6694c65f24b95edd2360ed7e3c
					}
					case ScholarPaganProvince = (owner.kingdom.is_muslim && target.is_pagan)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ScholarSuccess_Pagan.tga:UI_Illustration_ScholarSuccess_Pagan#2" //GUID:7db76abcd476d1e4fbef26f19666c38a
					}
					case ShamanPaganProvince = (owner.kingdom.is_pagan && target.is_pagan)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ShamanSuccess_Pagan.tga:UI_Illustration_ShamanSuccess_Pagan#2" //GUID:17e9b4ba23b1c3345b48e0b1cfe311ac
					}
					case ShamanCatholicProvince = (owner.kingdom.is_pagan && target.is_catholic)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ShamanSuccess_Catholic.tga:UI_Illustration_ShamanSuccess_Catholic#2" //GUID:51d40e7649adecc4b814b51445ff45d4
					}
					case ShamanOrthodoxProvince = (owner.kingdom.is_pagan && target.is_orthodox)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ShamanSuccess_Orthodox.tga:UI_Illustration_ShamanSuccess_Orthodox#2" //GUID:b2641aaa35391d3459ad0d1013616355
					}
					case ShamanMuslimProvince = (owner.kingdom.is_pagan && target.is_muslim)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ShamanSuccess_Muslim.tga:UI_Illustration_ShamanSuccess_Muslim#2" //GUID:f3ae3fa432b928446a06ca2769bfc5d0
					}
				}
			}
			case target_kingdom
			{
				message
				{
					
					def = ActionOutcomeMessage
					
					case same_religion = (owner.kingdom.religion = target.kingdom.religion)
					{
						text caption = "Our people accepted {owner.kingdom.religion:ism}"
						text text = ["A holy {owner.kingdom.cleric_title} from neighboring lands helped us convert our people in {target} to {owner.kingdom.religion:ism}. What a glorious day!",
								     "With the help of a foreign {owner.kingdom.cleric_title}, our people in {target} now proudly call themselves {owner.kingdom.religion:ans}!"]
						
						case sunni = (owner.kingdom.is_sunni)
						{
							sprite icon = "Assets/UI/Elements/msg_icons/Icon_Message_Sunni_Positive.png:Icon_Message_Sunni_Positive#2" //GUID:f5511aecdac645848b2848632094228f
							sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ScholarSuccess_Muslim.tga:UI_Illustration_ScholarSuccess_Muslim#2" //GUID:9e3a87f41b11c12449836c70575107c2
						}
						case shia = (owner.kingdom.is_shia)
						{
							sprite icon = "Assets/UI/Elements/msg_icons/Icon_Message_Shia_Positive.png:Icon_Message_Shia_Positive#2" //GUID:85f62290df2b3cf498ac54cedb6bd9a7
							sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ScholarSuccess_Muslim.tga:UI_Illustration_ScholarSuccess_Muslim#2" //GUID:9e3a87f41b11c12449836c70575107c2
						}
						case catholic = (owner.kingdom.is_catholic)
						{
							sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericCatholicSuccess_Catholic.tga:UI_Illustration_ClericCatholicSuccess_Catholic#2" //GUID:d50bd29a2cfed9a4a8f526143d77db82
							sprite icon = "Assets/UI/Elements/msg_icons/Icon_Message_Catholic_Positive.png:Icon_Message_Catholic_Positive#2" //GUID:8c1fb46dfa6825f4590d3d7e5cca7741
						}
						case orthodox = (owner.kingdom.is_orthodox)
						{
							sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericOrthodoxSuccess_Orthodox.tga:UI_Illustration_ClericOrthodoxSuccess_Orthodox#2" //GUID:ab2e4db5e7b911d45887323322eb0de6
							sprite icon = "Assets/UI/Elements/msg_icons/Icon_Message_Orthodox_Positive.png:Icon_Message_Orthodox_Positive#2" //GUID:19cfbfbc1496e2542ab505a7a2a91a83
						}
					}
					
					case foreign_religion = (owner.kingdom.religion != target.kingdom.religion)
					{
						text caption = "Foreign religion in our lands"
						text text = ["A visiting charlatan, {owner.kingdom.cleric_title} from neighboring lands has converted our people in {target} to {owner.kingdom.religion:ism}!",
								     "Our people in {target} now call themselves {owner.kingdom.religion:ans}! They were deceived by a foreign {owner.kingdom.cleric_title}, who was spreading his kingdom's beliefs behind our backs..."]
						
						case sunni = (owner.kingdom.is_sunni)
						{
							icon = "Assets/UI/Elements/msg_icons/Icon_Message_Sunni_Negative.png:Icon_Message_Sunni_Negative#2" //GUID:a38c9bc672bd0944c900424a7ebab08e
						}
						case shia = (owner.kingdom.is_shia)
						{
							icon = "Assets/UI/Elements/msg_icons/Icon_Message_Shia_Negative.png:Icon_Message_Shia_Negative#2" //GUID:f4f55f396dbd2894ebee69906cae7abc
						}
						case catholic = (owner.kingdom.is_catholic)
						{
							icon = "Assets/UI/Elements/msg_icons/Icon_Message_Catholic_Negative.png:Icon_Message_Catholic_Negative#2" //GUID:2cef172317bd25047bf6d8e6520f014e
						}
						case orthodox = (owner.kingdom.is_orthodox)
						{
							icon = "Assets/UI/Elements/msg_icons/Icon_Message_Orthodox_Negative.png:Icon_Message_Orthodox_Negative#2" //GUID:f288b32e1a0f09c438463931e7afbb19
						}
					}
					
				}
			}
		}
		option fail
		{
			main owner_imprisoned = (15 + 15 * (AreEnemies(own_kingdom, target.kingdom)))
			{
				case src_kingdom
				{
					message
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_RenouncedPrisoner.tga:UI_Illustration_RenouncedPrisoner#2" //GUID:78a79647b25462e4a8f727d68aa38f71
						text caption = "Our {owner.kingdom.cleric_title} was imprisoned"
						text text = ["{owner} was apprehended by guards in {target.kingdom}. As we could have expected, preaching our religion in their kingdom was not well accepted.",
									 "It seems that {owner:s} intentions to religiously convert the people in {target} came to the attention of the {target.kingdom:ian} guards. They immediately threw him in their dungeon."]
					}
				}
				case target_kingdom
				{
					message
					{
						text caption = "Foreign {owner.kingdom.cleric_title} was imprisoned"
						text text = ["{owner} was caught, preaching {owner.kingdom.religion:ism} among our people in {target}. He now rots in our dungeons.",
								     "Faithful men from {target} brought us {owner} from {owner.kingdom}. It seems that he tried to deceive our people, preaching foreign religion."]
					}
				}
				also rel_change = -100
			}
			option owner_killed = (10 + 10 * (AreEnemies(own_kingdom, target.kingdom)))
			{
				case src_kingdom
				{
					message
					{
						voice_line = null
						text caption = "Our {owner.kingdom.cleric_title} was killed"
						text text = ["Due to his attempts to spread our religion in {target.kingdom}, {owner} was arrested by the guards and executed publicly. He died like a true martyr.",
									 "While trying to spread our religion in {target}, {target.kingdom}, {owner} was captured and killed by an angry mob of local fanatics. May he rest in peace."]
					}
				}
				case target_kingdom
				{
					message
					{
						text caption = "Foreign {owner.kingdom.cleric_title} was killed"
						text text = ["The {owner.kingdom:ian} {owner} was caught, trying to preach our religion to the people in {target}. Enraged, local devotees ordered him killed before we could bring the news to you, sire!",
								     "We learned about the death of {owner}, a {owner.kingdom:ian}, who tried to spread his religion among our people in {target}. A group of zealous believers caught him and hung him in the town square."]
					}
				}
				also rel_change = -200
			}
			option default
			{
				case src_kingdom
				{
					message
					{
						text caption = "Our {owner.kingdom.cleric_title} failed"
						text text = ["{owner} was unable to preach our religion to the people in {target} - they refuse to hear stories for foreign gods.",
									 "{owner} barely made it out {target.kingdom} alive! He reported, that the people in {target} are willing to kill anyone, trying to talk about foreign religion.",
									 "Sending {owner} in {target} turned out riskier than we thought - it seems that the {target.kingdom:ian} guards were instructed to arrest anyone, talking about foreign religion.",
									 "{target.kingdom:ian} guards deported {owner} from {target}, as his attempts to preach our religion among their people were neither unnoticed, nor well-received."]
						
						case Catholic = (owner.kingdom.is_catholic)
						{
							sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericFail_Catholic.tga:UI_Illustration_ClericFail_Catholic#2" //GUID:f81eb49bbb9aff049aef2f80864eb757
						}
						case Orthodox = (owner.kingdom.is_orthodox)
						{
							sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericFail_Orthodox.tga:UI_Illustration_ClericFail_Orthodox#2" //GUID:1c58a3de67288e241b3b2f2d1edf88a3
						}
						case Muslim = (owner.kingdom.is_muslim)
						{
							sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericFail_Muslim.tga:UI_Illustration_ClericFail_Muslim#2" //GUID:7bbc8c795dcfed047913442a8f598c2b
						}
						case Pagan = (owner.kingdom.is_pagan)
						{
							sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericFail_Pagan.tga:UI_Illustration_ClericFail_Pagan#2" //GUID:4d283451d8e4c7d458c7bfbf525aad7e
						}
					}
				}
			}
		}
	}
	
	cancel_events
	{
		target_realm kingdom_changed
	}
	cancelled_message_caption = "Religion conversion stopped"
	cancelled_message_texts
	{
		text kingdom_changed = "As {target} was just conquered, {owner:s} mission was interrupted - these dangerous times are not suitable for converting the masses. When we establish control over the province, we'll find a way to spread our religion in time."
	}
}

def BolsterCultureAction : ReligionSpecificAction
{
	ai_validate = false // because otherwise they do it forever, other actions are more interesting ///TODO change this
	name = "Bolster Culture"
	tooltip = "Have {owner} strenghten the culture of our people in the entire kingdom. Thus, they will be more likely to become and remain loyal to {owner.kingdom}.{p}{p}Culture increase: {culture_increase}%"
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_BolsterCulture.tga:Icon_CharacterAction_BolsterCulture#2" //GUID:79cfeb4abbcfe6f4c954fe22d5eb8cec
	prepare_status_text = "{owner} is bolstering our culture.{p}{p}Culture increase: {culture_increase}%"
	success_voice_line = "action_succeeded"
	
	mission = "NotOnMission"
	prepare_duration = -1
	
	condition = (true) //used for the religion_changed cancel event, we dont care if we we changed religion
	
	unique
	
	cost
	{
		piety = 200
		gold = (SSum(owner.kingdom, 0.2, 100))
	}
	
	float gold_upkeep = (5 + SSum(owner.kingdom, 0.03, 5))
	
	float culture_increase = (5 + owner.class_level) //note that this is text only, it does not affect the actual value in stats.def
	
	decline_voice_line = "Decline"
	prepare_voice_line = "confirm_action"
	cancel_voice_line = "cancel_action"
	cancelled_voice_line = "mission_cancelled"
}

def ArrangePeaceAction : ReligionSpecificOpportunity
{
	name = "Arrange peace"
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_ArrangePeace_02.tga:Icon_CharacterAction_ArrangePeace_02#2" //GUID:d8fe90373b986234db7e8984c534e400
	other_leader = (GetEnemyLeader(arg0, target))
	tooltip = "Have {owner} convince {target.king} from {target} to try and end his war against {other_leader}."
	prepare_status_text = "{owner} is trying to stop {arg}"
	
	decline_voice_line = "Decline"
	prepare_voice_line = "confirm_action"
	cancel_voice_line = "cancel_action"
	cancelled_voice_line = "action_failed"
	success_voice_line = "action_succeeded"
	fail_voice_line = "action_failed"
	
	target = "kingdom"
	args = ["War"]
	mission = "NotOnMission"
	
	prepare_duration = 120/240
	
	opportunity
	{
		chance_to_add_on_tick = (5 + 20 * a_war_leader_is_our_vassal)
		chance_to_del_on_tick = 20
	}
	
	src_messages
	{
		new_opportunity = "Shall we send {owner} to {target}, in an attempt to convince {target.king} to end his senseless war against {other_leader}? After all, peace and salvation can only come through a well-timed divine intervention..."
	}
	
	float ssums_base = 0.75
	float ssums_bias = 0.75 // 0 only source, 1 only target, anything in between lerps (0.5 is defacto avg)
	
	cost
	{
		piety = 1000
		gold = (500 + ceil(MaxSSumsBlend(own_kingdom, target, ssums_base, ssums_bias,100)))
	}
	
	success_base_chance = 30
	
	success_fail
	{
		perc sf_culture_distance = (-10 * CultureDistance(target, own_kingdom))
		{
			text name = "Cultural differences"
		}
		perc sf_relationship = (map3_clamp(GetRelationship(target, own_kingdom), -1000, 0, 1000, -50, 0, 20))
		{
			text name = "Our relations"
		}
	}
	
	outcomes
	{
		main success
		{
			message
			{
				text caption = "Peace talks arranged"
				text text = ["{owner} convinced {target.king} to try and end their bloody war against {other_leader}.",
						     "{target.king} listened to the wise words of {owner} and agreed to finally end their war against {other_leader}, if they can agree on fair terms.",
						     "Our religious influence played a powerful role - {owner} managed to convince the {target:ians} to find a peacful solution to their quarrels with {other_leader}."]
				
				case CatholicClericCatholicKingdom = (owner.kingdom.is_catholic && target.is_catholic)
				{
					sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericCatholicSuccess_Catholic.tga:UI_Illustration_ClericCatholicSuccess_Catholic#2" //GUID:d50bd29a2cfed9a4a8f526143d77db82
				}
				case OrthodoxClericOrthodoxKingdom = (owner.kingdom.is_orthodox && target.is_orthodox)
				{
					sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericOrthodoxSuccess_Orthodox.tga:UI_Illustration_ClericOrthodoxSuccess_Orthodox#2" //GUID:ab2e4db5e7b911d45887323322eb0de6
				}
				case ScholarMuslimKingdom = (owner.kingdom.is_muslim && target.is_muslim)
				{
					sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ScholarSuccess_Muslim.tga:UI_Illustration_ScholarSuccess_Muslim#2" //GUID:9e3a87f41b11c12449836c70575107c2
				}
			}
		}
		option fail
		{
			message
			{
				text caption = "{owner.kingdom.cleric_title} failed"
				text text = ["{owner} failed to convince {target.king} to end their war against {other_leader} and was even threatened to be beaten, if he ever returns in {target}.",
						     "While having the best intents, {owner} only managed to anger {target.king}. Obviously, they do not want us to intervene in their diplomatic affaris.",
						     "It seems that there will be no peace between {target} and {other_leader} - {target.king} refused to even speak with {owner}, though he waited weeks and weeks for an audience."]
				
				case Catholic = (owner.kingdom.is_catholic)
				{
					sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericFail_Catholic.tga:UI_Illustration_ClericFail_Catholic#2" //GUID:f81eb49bbb9aff049aef2f80864eb757
				}
				case Orthodox = (owner.kingdom.is_orthodox)
				{
					sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericFail_Orthodox.tga:UI_Illustration_ClericFail_Orthodox#2" //GUID:1c58a3de67288e241b3b2f2d1edf88a3
				}
				case Muslim = (owner.kingdom.is_muslim)
				{
					sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericFail_Muslim.tga:UI_Illustration_ClericFail_Muslim#2" //GUID:7bbc8c795dcfed047913442a8f598c2b
				}
			}
			also rel_change = -100
		}
	}

	cancel_events
	{
		target_kingdom kingdom_destroyed
		target_kingdom war_ended = (!target_valid)
		target_kingdom left_war = (!target_valid)
		//arg_kingdom kingdom_destroyed - Will cause diplicate def key, but covered by war_ended.
	}
	cancelled_message_caption = "Arrange peace canceled"
	cancelled_message_texts
	{
		text kingdom_destroyed = "{target} was destroyed! This has rendered {owner:s} attempts to arrange peace quite useless, forcing his return to our royal court."
		text war_ended = "It seems [{owner.kingdom.is_christian:if}God's|Allah's] plans aligned with ours, as {target} has ended their war[ against {other_leader.kingdom}]. Thus, {owner:s} attempts to arrange peace are no longer needed."
		text left_war = "Sire, it seems {target} has left their war[ against {other_leader.kingdom}]. With his holy purpose fulfilled, {owner} packed his humble belongings and returned to our royal court."
	}
}

def ReligionSpecificMissionOpportunity : ReligionSpecificOpportunity
{
	opportunity
	{
		chance_to_add_on_tick = 10 //often gain, quickly lose
		chance_to_del_on_tick = 30
	}
	
	success_base_chance = 60
	
	success_fail
	{
		sf_loyal_to_us = (10 * (target.majority_kingdom == own_kingdom))
		{
			text name = "Town's population is loyal to us"
		}
		// sf_culture_distance = (-5 * CultureDistance(target.realm, own_kingdom))
		// {
		// 	text name = "Cultural differences"
		// }
	}
}

def ReligiousMissionAction : ReligionSpecificMissionOpportunity
{
	name = "Religious mission in {target:nolink}"
	tooltip = "Send {owner} to {target} to learn more about religious practices, artifacts and holy sites. If all goes to plan, our kingdom's {owner.kingdom.religion.piety} will increase."
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_MissionReligious.tga:Icon_CharacterAction_MissionReligious#2" //GUID:f7e0081d08066da4e95b8684414c84d0
	target = "realm"
	
	decline_voice_line = "Decline"
	prepare_voice_line = "send_abroad"
	cancel_voice_line = "Recall"
	cancelled_voice_line = "mission_cancelled"
	success_voice_line = "action_succeeded"
	fail_voice_line = "action_failed"
	
	condition = (own_kingdom.is_christian)
	
	prepare_duration = 120/240
	prepare_status_text = "{owner} is on a religious mission in the holy city of {target}."
	
	cost
	{
		gold = (ceil((200 + SSum(owner.kingdom, 0.3, 100)) , 100))
	}
	
	src_messages
	{
		new_opportunity_caption = "{kingdom.cleric_title} opportunity: Religious mission"
		new_opportunity = "An opportunity to send {owner} to {target} has arisen, Sire. His mission will be to strengthen our {owner.kingdom.religion.piety} by studying the holy city's religious practices, artifacts and holy sites."
	}
	
	outcomes
	{
		main success
		{
			message
			{
				case src_kingdom
				{
					text caption = "{owner.kingdom.cleric_title} strenghtened our {owner.kingdom.religion.piety}"
					text text = "{owner} returned from {target}, astonished from the holy sites he saw and the words of the wise men he met. Now he is anxious to tell many marvelous stories to the rest of our clergy."
					
					case CatholicClericCatholicProvince = (owner.kingdom.is_catholic && target.is_catholic)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericCatholicSuccess_Catholic.tga:UI_Illustration_ClericCatholicSuccess_Catholic#2" //GUID:d50bd29a2cfed9a4a8f526143d77db82
					}
					case CatholicClericOrthodoxProvince = (owner.kingdom.is_catholic && target.is_orthodox)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericCatholicSuccess_Orthodox.tga:UI_Illustration_ClericCatholicSuccess_Orthodox#2" //GUID:e8929094b7a3f0c48bbd254a83817f7c
					}
					case CatholicClericMuslimProvince = (owner.kingdom.is_catholic && target.is_muslim)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericCatholicSuccess_Muslim.tga:UI_Illustration_ClericCatholicSuccess_Muslim#2" //GUID:d4ab6ad6ac84bd94e9d3448860997fa2
					}
					case CatholicClericPaganProvince = (owner.kingdom.is_catholic && target.is_pagan)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericCatholicSuccess_Pagan.tga:UI_Illustration_ClericCatholicSuccess_Pagan#2" //GUID:3a4bbb484f05d0042beeb3a9f3a0b279
					}
					case OrthodoxClericOrthodoxProvince = (owner.kingdom.is_orthodox && target.is_orthodox)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericOrthodoxSuccess_Orthodox.tga:UI_Illustration_ClericOrthodoxSuccess_Orthodox#2" //GUID:ab2e4db5e7b911d45887323322eb0de6
					}
					case OrthodoxClericCatholicProvince = (owner.kingdom.is_orthodox && target.is_catholic)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericOrthodoxSuccess_Catholic.tga:UI_Illustration_ClericOrthodoxSuccess_Catholic#2" //GUID:408b7d066bbaac644b5b3b2f5c5d2e9c
					}
					case OrthodoxClericMuslimProvince = (owner.kingdom.is_orthodox && target.is_muslim)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericOrthodoxSuccess_Muslim.tga:UI_Illustration_ClericOrthodoxSuccess_Muslim#2" //GUID:62170bf741d7eba479d9270fc62afaff
					}
					case OrthodoxClericPaganProvince = (owner.kingdom.is_orthodox && target.is_pagan)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericOrthodoxSuccess_Pagan.tga:UI_Illustration_ClericOrthodoxSuccess_Pagan#2" //GUID:777cd1332c0afdb4dae778f3ca4a63fb
					}
					case ScholarMuslimProvince = (owner.kingdom.is_muslim && target.is_muslim)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ScholarSuccess_Muslim.tga:UI_Illustration_ScholarSuccess_Muslim#2" //GUID:9e3a87f41b11c12449836c70575107c2
					}
					case ScholarCatholicProvince = (owner.kingdom.is_muslim && target.is_catholic)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ScholarSuccess_Catholic.tga:UI_Illustration_ScholarSuccess_Catholic#2" //GUID:8b5f66d5de2182b4790cd7051cc93c60
					}
					case ScholarOrthodoxProvince = (owner.kingdom.is_muslim && target.is_orthodox)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ScholarSuccess_Orthodox.tga:UI_Illustration_ScholarSuccess_Orthodox#2" //GUID:49d44e6694c65f24b95edd2360ed7e3c
					}
					case ScholarPaganProvince = (owner.kingdom.is_muslim && target.is_pagan)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ScholarSuccess_Pagan.tga:UI_Illustration_ScholarSuccess_Pagan#2" //GUID:7db76abcd476d1e4fbef26f19666c38a
					}
					case ShamanPaganProvince = (owner.kingdom.is_pagan && target.is_pagan)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ShamanSuccess_Pagan.tga:UI_Illustration_ShamanSuccess_Pagan#2" //GUID:17e9b4ba23b1c3345b48e0b1cfe311ac
					}
					case ShamanCatholicProvince = (owner.kingdom.is_pagan && target.is_catholic)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ShamanSuccess_Catholic.tga:UI_Illustration_ShamanSuccess_Catholic#2" //GUID:51d40e7649adecc4b814b51445ff45d4
					}
					case ShamanOrthodoxProvince = (owner.kingdom.is_pagan && target.is_orthodox)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ShamanSuccess_Orthodox.tga:UI_Illustration_ShamanSuccess_Orthodox#2" //GUID:b2641aaa35391d3459ad0d1013616355
					}
					case ShamanMuslimProvince = (owner.kingdom.is_pagan && target.is_muslim)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ShamanSuccess_Muslim.tga:UI_Illustration_ShamanSuccess_Muslim#2" //GUID:f3ae3fa432b928446a06ca2769bfc5d0
					}
				}
			}
			also give_piety = ((0.0015 * own_kingdom.S1 + owner.class_level + 5) * RndI(30, 50, 5))
			also rel_change = (RndI(5,10,5) * + owner.cs_mission_passive_rel_increase)
		}
		option fail
		{
			message
			{
				case src_kingdom
				{
					text caption = "{owner.kingdom.cleric_title} failed"
					text text = ["{owner} returned disappointed from {target}. He said the city has lost its greatness and the clergymen there didn't pay him a lot of attention.",
							     "As great obstacles prevented {owner} from reaching {target} in time, he finally decided to return. It seems that this journey was not meant to be.",
							     "Illness struck {owner} cleric on his road to {target} and he had to abandon his journey. At least he returned safely and is now recovering in our royal infirmary.",
							     "{owner} returned from {target}, but it seems that he found nothing new or inspiring in that journey and has no new knowledge to share. Overall, it turned out a waste of time and funds."]
					
					case Catholic = (owner.kingdom.is_catholic)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericFail_Catholic.tga:UI_Illustration_ClericFail_Catholic#2" //GUID:f81eb49bbb9aff049aef2f80864eb757
					}
					case Orthodox = (owner.kingdom.is_orthodox)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericFail_Orthodox.tga:UI_Illustration_ClericFail_Orthodox#2" //GUID:1c58a3de67288e241b3b2f2d1edf88a3
					}
					case Muslim = (owner.kingdom.is_muslim)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericFail_Muslim.tga:UI_Illustration_ClericFail_Muslim#2" //GUID:7bbc8c795dcfed047913442a8f598c2b
					}
					case Pagan = (owner.kingdom.is_pagan)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericFail_Pagan.tga:UI_Illustration_ClericFail_Pagan#2" //GUID:4d283451d8e4c7d458c7bfbf525aad7e
					}
				}
			}
		}
	}
	
	cancel_events
	{
		target_realm kingdom_changed = (!target.kingdom.is_christian)
		papacy_destroyed
		{
			condition = (target == catholic.hq_realm)
			sender = (papacy)
			message = "kingdom_destroyed"
		}
	}
	cancelled_message_caption = "Religious mission canceled"
	cancelled_message_texts
	{
		text kingdom_changed = "{target} is no longer in the hands of a Christian kingdom and {owner} had no choice but to return, filled with resentment."
		text papacy_destroyed = "Vile armies invaded Rome and destroyed the Papacy. {owner} returned, his soul filled with fear and despair."
	}
	
}

def EnlightmentMissionAction : ReligionSpecificMissionOpportunity
{
	name = "Enlightenment mission in {target:nolink}"
	tooltip = "Send {owner} to study in {target}. If all goes to plan, he will return with some books, thus expanding our kingdom's knowledge."
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_MissionEnlightenment.tga:Icon_CharacterAction_MissionEnlightenment#2" //GUID:55ce16fde335aab4cb5b44478d4b5ba3
	target = "realm"
	
	decline_voice_line = "Decline"
	prepare_voice_line = "send_abroad"
	cancel_voice_line = "Recall"
	cancelled_voice_line = "mission_cancelled"
	success_voice_line = "action_succeeded"
	fail_voice_line = "action_failed"
	
	condition = (own_kingdom.is_christian)
	
	prepare_duration = 120/240
	prepare_status_text = "{owner} is on an enlightenment mission in {target}."
	
	cost
	{
		piety = (100 + (owner.class_level * 10))
		gold = (ceil((100 + SSum(owner.kingdom, 0.15, 50)) , 50))
	}
	
	src_messages
	{
		new_opportunity_caption = "{kingdom.cleric_title} opportunity: Enlightenment mission"
		new_opportunity = "An opportunity to send {owner} to {target} has arisen, Sire. His mission will be one of enlightenment, where he will study in the sacred libraries of the holy Orthodox city."
	}
	
	outcomes
	{
		main success
		{
			message
			{
				case src_kingdom
				{
					text caption = "{owner.kingdom.cleric_title} broadened our knowledge"
					text text = "{owner} returned enlightened from {target}. He is now eager to pass on the new knowledge to the wisemen in {owner.kingdom}."
					
					case CatholicClericCatholicProvince = (owner.kingdom.is_catholic && target.is_catholic)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericCatholicSuccess_Catholic.tga:UI_Illustration_ClericCatholicSuccess_Catholic#2" //GUID:d50bd29a2cfed9a4a8f526143d77db82
					}
					case CatholicClericOrthodoxProvince = (owner.kingdom.is_catholic && target.is_orthodox)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericCatholicSuccess_Orthodox.tga:UI_Illustration_ClericCatholicSuccess_Orthodox#2" //GUID:e8929094b7a3f0c48bbd254a83817f7c
					}
					case CatholicClericMuslimProvince = (owner.kingdom.is_catholic && target.is_muslim)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericCatholicSuccess_Muslim.tga:UI_Illustration_ClericCatholicSuccess_Muslim#2" //GUID:d4ab6ad6ac84bd94e9d3448860997fa2
					}
					case CatholicClericPaganProvince = (owner.kingdom.is_catholic && target.is_pagan)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericCatholicSuccess_Pagan.tga:UI_Illustration_ClericCatholicSuccess_Pagan#2" //GUID:3a4bbb484f05d0042beeb3a9f3a0b279
					}
					case OrthodoxClericOrthodoxProvince = (owner.kingdom.is_orthodox && target.is_orthodox)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericOrthodoxSuccess_Orthodox.tga:UI_Illustration_ClericOrthodoxSuccess_Orthodox#2" //GUID:ab2e4db5e7b911d45887323322eb0de6
					}
					case OrthodoxClericCatholicProvince = (owner.kingdom.is_orthodox && target.is_catholic)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericOrthodoxSuccess_Catholic.tga:UI_Illustration_ClericOrthodoxSuccess_Catholic#2" //GUID:408b7d066bbaac644b5b3b2f5c5d2e9c
					}
					case OrthodoxClericMuslimProvince = (owner.kingdom.is_orthodox && target.is_muslim)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericOrthodoxSuccess_Muslim.tga:UI_Illustration_ClericOrthodoxSuccess_Muslim#2" //GUID:62170bf741d7eba479d9270fc62afaff
					}
					case OrthodoxClericPaganProvince = (owner.kingdom.is_orthodox && target.is_pagan)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericOrthodoxSuccess_Pagan.tga:UI_Illustration_ClericOrthodoxSuccess_Pagan#2" //GUID:777cd1332c0afdb4dae778f3ca4a63fb
					}
					case ScholarMuslimProvince = (owner.kingdom.is_muslim && target.is_muslim)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ScholarSuccess_Muslim.tga:UI_Illustration_ScholarSuccess_Muslim#2" //GUID:9e3a87f41b11c12449836c70575107c2
					}
					case ScholarCatholicProvince = (owner.kingdom.is_muslim && target.is_catholic)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ScholarSuccess_Catholic.tga:UI_Illustration_ScholarSuccess_Catholic#2" //GUID:8b5f66d5de2182b4790cd7051cc93c60
					}
					case ScholarOrthodoxProvince = (owner.kingdom.is_muslim && target.is_orthodox)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ScholarSuccess_Orthodox.tga:UI_Illustration_ScholarSuccess_Orthodox#2" //GUID:49d44e6694c65f24b95edd2360ed7e3c
					}
					case ScholarPaganProvince = (owner.kingdom.is_muslim && target.is_pagan)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ScholarSuccess_Pagan.tga:UI_Illustration_ScholarSuccess_Pagan#2" //GUID:7db76abcd476d1e4fbef26f19666c38a
					}
					case ShamanPaganProvince = (owner.kingdom.is_pagan && target.is_pagan)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ShamanSuccess_Pagan.tga:UI_Illustration_ShamanSuccess_Pagan#2" //GUID:17e9b4ba23b1c3345b48e0b1cfe311ac
					}
					case ShamanCatholicProvince = (owner.kingdom.is_pagan && target.is_catholic)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ShamanSuccess_Catholic.tga:UI_Illustration_ShamanSuccess_Catholic#2" //GUID:51d40e7649adecc4b814b51445ff45d4
					}
					case ShamanOrthodoxProvince = (owner.kingdom.is_pagan && target.is_orthodox)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ShamanSuccess_Orthodox.tga:UI_Illustration_ShamanSuccess_Orthodox#2" //GUID:b2641aaa35391d3459ad0d1013616355
					}
					case ShamanMuslimProvince = (owner.kingdom.is_pagan && target.is_muslim)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ShamanSuccess_Muslim.tga:UI_Illustration_ShamanSuccess_Muslim#2" //GUID:f3ae3fa432b928446a06ca2769bfc5d0
					}
				}
			}
			also give_books = ((0.0015 * own_kingdom.S1 + owner.class_level + 5) * RndI(30, 50, 5))
			also rel_change = (RndI(5,10,5) * + owner.cs_mission_passive_rel_increase)
		}
		option fail
		{
			message
			{
				case src_kingdom
				{
					text caption = "{owner.kingdom.cleric_title} failed"
					text text = ["{owner} returned disappointed from {target}. He said the city has lost its greatness and the clergymen there didn't pay him a lot of attention.",
							     "As great obstacles prevented {owner} from reaching {target} in time, he finally decided to return. It seems that this journey was not meant to be.",
							     "Illness struck {owner} cleric on his road to {target} and he had to abandon his journey. At least he returned safely and is now recovering in our royal infirmary.",
							     "{owner} returned from {target}, but it seems that he he couldn't find anything interesting in the libraries of the town. Overall, it turned out a waste of time and funds."]
					
					case Catholic = (owner.kingdom.is_catholic)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericFail_Catholic.tga:UI_Illustration_ClericFail_Catholic#2" //GUID:f81eb49bbb9aff049aef2f80864eb757
					}
					case Orthodox = (owner.kingdom.is_orthodox)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericFail_Orthodox.tga:UI_Illustration_ClericFail_Orthodox#2" //GUID:1c58a3de67288e241b3b2f2d1edf88a3
					}
					case Muslim = (owner.kingdom.is_muslim)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericFail_Muslim.tga:UI_Illustration_ClericFail_Muslim#2" //GUID:7bbc8c795dcfed047913442a8f598c2b
					}
					case Pagan = (owner.kingdom.is_pagan)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericFail_Pagan.tga:UI_Illustration_ClericFail_Pagan#2" //GUID:4d283451d8e4c7d458c7bfbf525aad7e
					}
				}
			}
		}
	}
	
	cancel_events
	{
		target_realm kingdom_changed = (!target.kingdom.is_christian)
	}
	cancelled_message_caption = "Enlightment mission canceled"
	cancelled_message_texts
	{
		text kingdom_changed = "{target} is no longer in the hands of a Christian kingdom and {owner} had no choice but to return, filled with resentment."
	}
}

def DiplomaticMissionAction : ReligionSpecificMissionOpportunity
{
	name = "Diplomatic mission in {target:nolink}"
	tooltip = "Send {owner} to {target} to improve our relations with {target.kingdom}."
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_Mission.tga:Icon_CharacterAction_Mission#2" //GUID:5c3c4a86b74a52f40a253486d743eac7
	target = "realm"
	
	decline_voice_line = "Decline"
	prepare_voice_line = "send_abroad"
	cancel_voice_line = "Recall"
	cancelled_voice_line = "mission_cancelled"
	success_voice_line = "action_succeeded"
	fail_voice_line = "action_failed"
	
	condition = (own_kingdom.is_christian)
	
	prepare_duration = 120/240
	prepare_status_text = "{owner} is on a diplomatic mission in {target}."
	
	cost
	{
		piety = (100 + (owner.class_level * 10))
		gold = (ceil((100 + SSum(owner.kingdom, 0.15, 50)) , 50))
	}
	
	src_messages
	{
		new_opportunity_caption = "{kingdom.cleric_title} opportunity: Diplomatic mission"
		new_opportunity = "An opportunity to send {owner} to {target} has arisen, Sire. His mission will be one of diplomacy, where he will attempt to improve our relations with {target.kingdom}."
	}
	
	outcomes
	{
		main success
		{
			message
			{
				case src_kingdom
				{
					text caption = "{owner.kingdom.cleric_title} improved our relations"
					text text = "Our {owner} visited {target} and had long and fruitful talks with the local clergymen. They managed to find solutions to many of our religious differences and problems."
					
					case CatholicClericCatholicProvince = (owner.kingdom.is_catholic && target.is_catholic)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericCatholicSuccess_Catholic.tga:UI_Illustration_ClericCatholicSuccess_Catholic#2" //GUID:d50bd29a2cfed9a4a8f526143d77db82
					}
					case CatholicClericOrthodoxProvince = (owner.kingdom.is_catholic && target.is_orthodox)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericCatholicSuccess_Orthodox.tga:UI_Illustration_ClericCatholicSuccess_Orthodox#2" //GUID:e8929094b7a3f0c48bbd254a83817f7c
					}
					case CatholicClericMuslimProvince = (owner.kingdom.is_catholic && target.is_muslim)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericCatholicSuccess_Muslim.tga:UI_Illustration_ClericCatholicSuccess_Muslim#2" //GUID:d4ab6ad6ac84bd94e9d3448860997fa2
					}
					case CatholicClericPaganProvince = (owner.kingdom.is_catholic && target.is_pagan)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericCatholicSuccess_Pagan.tga:UI_Illustration_ClericCatholicSuccess_Pagan#2" //GUID:3a4bbb484f05d0042beeb3a9f3a0b279
					}
					case OrthodoxClericOrthodoxProvince = (owner.kingdom.is_orthodox && target.is_orthodox)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericOrthodoxSuccess_Orthodox.tga:UI_Illustration_ClericOrthodoxSuccess_Orthodox#2" //GUID:ab2e4db5e7b911d45887323322eb0de6
					}
					case OrthodoxClericCatholicProvince = (owner.kingdom.is_orthodox && target.is_catholic)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericOrthodoxSuccess_Catholic.tga:UI_Illustration_ClericOrthodoxSuccess_Catholic#2" //GUID:408b7d066bbaac644b5b3b2f5c5d2e9c
					}
					case OrthodoxClericMuslimProvince = (owner.kingdom.is_orthodox && target.is_muslim)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericOrthodoxSuccess_Muslim.tga:UI_Illustration_ClericOrthodoxSuccess_Muslim#2" //GUID:62170bf741d7eba479d9270fc62afaff
					}
					case OrthodoxClericPaganProvince = (owner.kingdom.is_orthodox && target.is_pagan)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericOrthodoxSuccess_Pagan.tga:UI_Illustration_ClericOrthodoxSuccess_Pagan#2" //GUID:777cd1332c0afdb4dae778f3ca4a63fb
					}
					case ScholarMuslimProvince = (owner.kingdom.is_muslim && target.is_muslim)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ScholarSuccess_Muslim.tga:UI_Illustration_ScholarSuccess_Muslim#2" //GUID:9e3a87f41b11c12449836c70575107c2
					}
					case ScholarCatholicProvince = (owner.kingdom.is_muslim && target.is_catholic)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ScholarSuccess_Catholic.tga:UI_Illustration_ScholarSuccess_Catholic#2" //GUID:8b5f66d5de2182b4790cd7051cc93c60
					}
					case ScholarOrthodoxProvince = (owner.kingdom.is_muslim && target.is_orthodox)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ScholarSuccess_Orthodox.tga:UI_Illustration_ScholarSuccess_Orthodox#2" //GUID:49d44e6694c65f24b95edd2360ed7e3c
					}
					case ScholarPaganProvince = (owner.kingdom.is_muslim && target.is_pagan)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ScholarSuccess_Pagan.tga:UI_Illustration_ScholarSuccess_Pagan#2" //GUID:7db76abcd476d1e4fbef26f19666c38a
					}
					case ShamanPaganProvince = (owner.kingdom.is_pagan && target.is_pagan)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ShamanSuccess_Pagan.tga:UI_Illustration_ShamanSuccess_Pagan#2" //GUID:17e9b4ba23b1c3345b48e0b1cfe311ac
					}
					case ShamanCatholicProvince = (owner.kingdom.is_pagan && target.is_catholic)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ShamanSuccess_Catholic.tga:UI_Illustration_ShamanSuccess_Catholic#2" //GUID:51d40e7649adecc4b814b51445ff45d4
					}
					case ShamanOrthodoxProvince = (owner.kingdom.is_pagan && target.is_orthodox)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ShamanSuccess_Orthodox.tga:UI_Illustration_ShamanSuccess_Orthodox#2" //GUID:b2641aaa35391d3459ad0d1013616355
					}
					case ShamanMuslimProvince = (owner.kingdom.is_pagan && target.is_muslim)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ShamanSuccess_Muslim.tga:UI_Illustration_ShamanSuccess_Muslim#2" //GUID:f3ae3fa432b928446a06ca2769bfc5d0
					}
				}
			}
			also rel_change = (RndI(50,200, 10) + owner.class_level * 10 + (RndI(5,10,5) * + owner.cs_mission_passive_rel_increase))
		}
		option fail
		{
			message
			{
				case src_kingdom
				{
					text caption = "{owner.kingdom.cleric_title} failed"
					text text = ["{owner} returned disappointed from {target}. He said the city has lost its greatness and the clergymen there didn't pay him a lot of attention.",
							     "As great obstacles prevented {owner} from reaching {target} in time, he finally decided to return. It seems that this journey was not meant to be.",
							     "Illness struck {owner} cleric on his road to {target} and he had to abandon his journey. At least he returned safely and is now recovering in our royal infirmary.",
							     "{owner} returned from {target} and he was furious of their insolent clergymen. He couldn't further our relations in any way, but at least he avoided any scandals that would have worsened them."]
					
					case Catholic = (owner.kingdom.is_catholic)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericFail_Catholic.tga:UI_Illustration_ClericFail_Catholic#2" //GUID:f81eb49bbb9aff049aef2f80864eb757
					}
					case Orthodox = (owner.kingdom.is_orthodox)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericFail_Orthodox.tga:UI_Illustration_ClericFail_Orthodox#2" //GUID:1c58a3de67288e241b3b2f2d1edf88a3
					}
					case Muslim = (owner.kingdom.is_muslim)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericFail_Muslim.tga:UI_Illustration_ClericFail_Muslim#2" //GUID:7bbc8c795dcfed047913442a8f598c2b
					}
					case Pagan = (owner.kingdom.is_pagan)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericFail_Pagan.tga:UI_Illustration_ClericFail_Pagan#2" //GUID:4d283451d8e4c7d458c7bfbf525aad7e
					}
				}
			}
		}
	}
	
	cancel_events
	{
		target_realm kingdom_changed = (!target.kingdom.is_christian)
		papacy_destroyed
		{
			condition = (target == catholic.hq_realm)
			sender = (papacy)
			message = "kingdom_destroyed"
		}
	}
	cancelled_message_caption = "Religious mission canceled"
	cancelled_message_texts
	{
		text kingdom_changed = "{target} is no longer in the hands of a Christian kingdom and {owner} had no choice but to return, filled with resentment."
		text papacy_destroyed = "Vile armies invaded Rome and destroyed the Papacy. {owner} returned, his soul filled with fear and despair."
	}
}


def ClericStudyAction : ReligionSpecificAction
{
	ai_validate = false // still no way for ai to stop these, converting realm religion/fixing disorder is more important
	name = "Study"
	tooltip = "Send {owner} to learn in foreign kingdoms and expand our knowledge[ ({income.books:bonus}{books_icon})]."
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_Study.tga:Icon_CharacterAction_Study#2" //GUID:a2202d72f02c90d49a2b109513e13942
	success_voice_line = "action_succeeded"
	target = "kingdom"
	condition = (own_kingdom.is_pagan)
	
	unique
	unique_status = "OnStudyStatus"
	
	cost
	{
		piety = 200
		gold = (SSum(owner.kingdom, 0.5, 100))
	}
	
	income = OnStudyStatus.income
	
	upkeep : OnStudyStatus.upkeep
	
	prepare_duration = 30
	prepare_status_text = $[
		"{owner} is travelling to {target} to study."
		"[{p}Once he arrives, his will require an upkeep of {OnStudyStatus.upkeep}.]"
		]
	
	validate_prompts
	{
		text _unique = "{clr:red_bright}[{other_character_doing_the_same}|Another {owner.kingdom.cleric_title} of ours] is already sent to widen our knowledge.{/clr}"
	}
	
	outcomes
	{
		main success = 100
		{
			message
			{
				case src_kingdom
				{
					text caption = "{owner.kingdom.cleric_title} arrived in {target}"
					text text = "{owner} reached {target}, where he was accommodated. He can now study in their great libraries and grasp precious knowledge from {target.kingdom:ian} scholars."
					
					case ShamanCatholicProvince = (owner.kingdom.is_pagan && target.is_catholic)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ShamanSuccess_Catholic.tga:UI_Illustration_ShamanSuccess_Catholic#2" //GUID:51d40e7649adecc4b814b51445ff45d4
					}
					case ShamanOrthodoxProvince = (owner.kingdom.is_pagan && target.is_orthodox)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ShamanSuccess_Orthodox.tga:UI_Illustration_ShamanSuccess_Orthodox#2" //GUID:b2641aaa35391d3459ad0d1013616355
					}
					case ShamanMuslimProvince = (owner.kingdom.is_pagan && target.is_muslim)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ShamanSuccess_Muslim.tga:UI_Illustration_ShamanSuccess_Muslim#2" //GUID:f3ae3fa432b928446a06ca2769bfc5d0
					}
				}
			}
		}
	}
}


def PopeLeaveAction : CharacterAction
{
	name = "Break ties with the Pope"
	tooltip = "Force {owner} to leave the royal court"
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_PopeLeave.tga:Icon_CharacterAction_PopeLeave#2" //GUID:8097ca46fb6b56b42a9b6afdb7877606
	show_in_character_widnow = true
	
	prepare_voice_line = "Exile"
	
	confirmation_message = PopeLeaveConfirmMessage
	outcomes
	{
		main success = 100
		{
			message
			{
				def = ActionOutcomeMessage
				sprite icon = "Assets/UI/Elements/msg_icons/Icon_Message_Papacy_Negative.png:Icon_Message_Papacy_Negative#2" //GUID:f0551ed801c7eea4399d528cf21b09e0
				text caption = "Pope left our court"
				text text = "{plr_kingdom.king} dismissed [{pope}|The Pope] from his key role in our court, as he is now preoccupied with his heavenly duties. The Pope seemed a bit displeased from this act, and so is our clergy."
			}
			also rel_change = -50
			{
				//src_kingdom = (own_kingdom)
				tgt_kingdom = (papacy)
			}
			also opinion_change
			{
				opinion = "ClergyOpinion"
				amount = -1
				reason = "pope_removed_court"
			}
		}
	}
}

def PopeLeaveConfirmMessage : Message
{
	caption = "Break ties with the Pope"
	body = $[
		"Dismiss the pope from your royal court?{p}{tab}{blt} Court slot will be freed.{p}{tab}{blt} All pope's benefits and actions will be lost.{p}{tab}{blt} Relations with papacy and clergy's opinion will decrease."
	]
	
	buttons
	{
		text ok = "&Yes"
		text cancel = "&Nevermind"
	}
}

template CourtPopeAction : CharacterAction //called when the Pope, who is in your court, refuses to perform something (i.e.. the action fails)
{
	outcomes
	{
		option fail
		{
			option excommunicate = 20
			{
				message
				{
					voice_line = "decline_papacy_excommunicated"
				}
				text bullet = "{pope} has excommunicated us!"
			}
			option pope_leave = 25
			{
				message
				{
					voice_line = "decline_papacy_leave_court"
				}
				text bullet = "{pope} has left our court and returned to {catholic.hq_realm}"
			}
		}
	}
}

def AskToExcommunicateEnemyAction : CourtPopeAction
{
	name = "[Excommunicate {target}|Ask for excommunication]"
	tooltip = "Convince {owner} to excommunicate [{target}|one of our enemies] from the Catholic church"
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_AskToExcommunicateEnemy.tga:Icon_CharacterAction_AskToExcommunicateEnemy#2" //GUID:c96eb531e261a004c92780eda904f621
	target = "kingdom"
	
	prepare_voice_line = null
	success_voice_line = "confirm_excommunicate"
	fail_voice_line = "decline_excommunicate"
	
	//!!! not implemented: success / fail
	sf_per_target = true
	
	validate_prompts
	{
		text _no_possible_targets = "{clr:red_bright}We have no wars with Catholic kingdoms.{/clr}"
		text _cooldown = "{clr:red_bright}We cannot excommunicate so many kingdoms so quickly.{/clr}"
	}
	
	cost
	{
		piety = 500
		gold = (max( own_kingdom.S2, 3000 ))
	}
	
	outcomes
	{
		//relations are more as defense than offense if positive, e.g. if both kingdoms are +1000, chance to excommunicate is 0
		main success = (50 + own_kingdom.relation_with_pope / 20 - target.relation_with_pope / 10)
		{
			message
			{
				def = ActionOutcomeMessage
				text caption = "Pope accepted excommunication"
				text text = ["{owner} excommunicated {target}. Their kingdom has truly lost its path and respect to the Catholic world and now they will suffer the consequences of their ignorance!",
					         "Anathema! Anathema! Anathema! Those filthy sinners, the {target:ians} were excommunicated by His Holiness, {pope}!",
	 						 "Finally, the sinners from {target} were rightfully excommunicated and are no longer part of the Catholic world!",
	 						 "It took only a little convincing on our side for {pope} to excommunicate those filthy dogs, {target}!"]
				
			}
		}
		
		option fail
		{
			message
			{
				def = ActionOutcomeMessage
				text caption = "Pope refused excommunication"
				text text = "{owner} refused to excommunicate {target}. Though they have sinned, they are still a valuable member of the Catholic world."
			}
		}
	}
}


def AskForCrusadeAction : CourtPopeAction
{
	name = "Ask for Crusade[ against {target}]"
	tooltip = "Convince {owner} to call a crusade[ against {target}]"
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_AskForCrusade.tga:Icon_CharacterAction_AskForCrusade#2" //GUID:53badb4016bbdc64e9259cb791ac0576
	target = "kingdom"
	
	prepare_voice_line = null
	success_voice_line = "confirm_crusade"
	fail_voice_line = "Decline"
	
	validate_prompts
	{
		text _active_crusade = "{clr:red_bright}There is an ongoing crusade[ against {crusade.target}] already.{/clr}"
		text _active_lead_offer = "{clr:red_bright}[{pope}|The Pope] is already preparing a crusade[ against {catholic.lead_crusade_offer.target}].{/clr}"
		text _no_possible_leaders = "{clr:red_bright}There are no suitable marshals who can lead the crusade.{/clr}"
	}
	
	cost
	{
		piety = 500
		gold = (max( own_kingdom.S2, 3000 ))
	}
	
	//!!! not implemented: success / fail
	sf_per_target = true
	
	outcomes
	{
		main success = (50 + own_kingdom.relation_with_pope / 20 - target.relation_with_pope / 10) //target's relation should be bad for this to happen
		{
			option AI_leader
			{
				message
				{
					def = null // a generic message that new crusade has started will show
				}
			}
			
			option own_leader
			{
				message
				{
					def = ActionOutcomeMessage
					sprite icon = "Assets/UI/Elements/msg_icons/Icon_Message_Papacy_Positive.png:Icon_Message_Papacy_Positive#2" //GUID:1a1da5afa360d31489c3ea31d9f612f2
					text caption = "Pope agreed to call for a crusade"
					text text = "{owner} agreed to call for a crusade against {target} and chose {leader} as its leader."
				}
			}
			
			option another_player_leader
			{
				message
				{
					def = ActionOutcomeMessage
					sprite icon = "Assets/UI/Elements/msg_icons/Icon_Message_Papacy_Neutral.png:Icon_Message_Papacy_Neutral#2" //GUID:1b90021079a31ed4fa818d054ce911da
					text caption = "Pope agreed to call for a crusade"
					text text = "{owner} agreed to call for a crusade against {target} and requested {leader} from {leader.kingdom} to lead it."
				}
			}
		}
		
		option fail
		{
			message
			{
				def = ActionOutcomeMessage
				sprite icon = "Assets/UI/Elements/msg_icons/Icon_Message_Papacy_Negative.png:Icon_Message_Papacy_Negative#2" //GUID:f0551ed801c7eea4399d528cf21b09e0
				text caption = "Pope refused to call for a crusade"
				text text = "{owner} refused to call for a crusade against {target}. He said that this is not when and where the brave knights of the Catholic world should march."
			}
			
			also rel_change = -100 // also -100 temp
			{
				//src_kingdom = (own_kingdom)
				tgt_kingdom = (papacy)
			}
			
			also rel_change_with_kingdoms = -100 //why?
			{
				//src_kingdom = (own_kingdom)
				filter = (k.is_catholic && !k.excommunicated && !k.is_papacy)
				text kingdoms_text = "Catholic kingdoms"
			}
		}
	}
}

def ForcedCrusadeAction : CourtPopeAction
{
	name = "Lead Crusade"
	tooltip = $[
		"Ask {pope} to start a new crusade led by {owner}."
		"{p}The Pope will NOT be pleased!"
		]
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_ForcedCrusade.tga:Icon_CharacterAction_ForcedCrusade#2" //GUID:ab77f4d2893b8a9448171784659f975b
	prepare_voice_line = null
	success_voice_line = "crusade_confirmed"
	fail_voice_line = "Decline"
	secondary = true
	target = "kingdom"
	
	//cost = "5000g 1000p"
	
	validate_prompts
	{
		text _active_crusade = "{clr:red_bright}There is an ongoing crusade[ against {crusade.target}] already.{/clr}"
		text _active_lead_offer = "{clr:red_bright}[{pope}|The Pope] is already preparing a crusade[ against {catholic.lead_crusade_offer.target}].{/clr}"
	}
	
	success_fail
	{
		sf_base = (30)
		{
			text name = "Base chance"
			show_always = false
		}
		sf_class_level = (own_character.class_level * 2)
		{
			text name = "Class level (x2)"
		}
		sf_relationship = (map3_clamp(GetRelationship(own_kingdom, papacy), -1000, 0, 1000, -100, 0, 50))
		{
			text name = "Our relations"
		}
		sf_opinions = (map3_clamp(own_kingdom.opinions.ClergyOpinion, -10, 0, 10, -50, 0, 25))
		{
			text name = "Clergy Opinion"
		}
	}
	
	outcomes
	{
		main success
		{
			message
			{
				text caption = "{WeLeadCrusadeMessage.caption}"
				text text = $[
					"{pope} agreed to call a crusade against {target} led by {owner}."
					]
				sprite icon = "Assets/UI/Elements/msg_icons/Icon_Message_Papacy_Positive.png:Icon_Message_Papacy_Positive#2" //GUID:1a1da5afa360d31489c3ea31d9f612f2
				illustration = WeLeadCrusadeMessage.illustration
			}
		}
		
		option fail
		{
			message
			{
				def = ActionOutcomeMessage
				sprite icon = "Assets/UI/Elements/msg_icons/Icon_Message_Papacy_Positive.png:Icon_Message_Papacy_Positive#2" //GUID:1a1da5afa360d31489c3ea31d9f612f2
				text caption = "Crusade refused"
				text text = "{pope} refused to call for a crusade against {target}."
			}
			
			option excommunicate = 10
			option pope_leave
		}
		
		also rel_change = -300 //!!! pope pissed a lot mod
		{
			//src_kingdom = (own_kingdom)
			tgt_kingdom = (papacy)
		}
		
		// also rel_change_with_kingdoms = -200
		// {
		// 	//src_kingdom = (own_kingdom)
		// 	filter = (k.is_catholic && !k.excommunicated && !k.is_papacy)
		// 	text kingdoms_text = "Catholic kingdoms"
		// }			
	}
}

// this is the "internal" action the Pope executes to excommunicate another kingdom
def ExcommunicateAction : CharacterAction
{
	name = "Excommunicate Kidgdom"
	tooltip = "Have {owner} excommunicate a kingdom from the Catholic church"
	icon = "Assets/UI/Elements/Common/Icons/Icon_RefuseSupport.png:Icon_RefuseSupport#2" //GUID:f7857ad2aaab712429518a9e4da674d0
	
	// outcomes
	// {
	// 	main success = 100
	// 	{
	// 		message
	// 		{
	// 			def = ActionOutcomeMessage
	// 			text caption = "{pope} excommunicated [{target}|a kingdom]"
	// 			text text = ["Anathema! Anathema! Anathema! Those filthy sinners, the {target:ians} were excommunicated by His Holiness, {pope}!",
	// 						 "Finally, the sinners from {target} were rightfully excommunicated and are no longer part of the Catholic world!",
	// 						 "It took only a little convincing on our side for {pope} to excommunicate those filthy dogs, {target}!"]
	// 		}
	// 	}
	// }
	
	target = "kingdom"
	show_in_action_bar = false
	prepare_voice_line = null
}

// this is the "internal" action the Pope executes to start a crusade against another kingdom
def CrusadeAction : CharacterAction
{
	name = "Call Crusade"
	tooltip = "Have {owner} call for a crusade aginst a kingdom"
	icon = "Assets/UI/Elements/Common/Icons/Icon_District_Military.png:Icon_District_Military#2" //GUID:c87ecd3f92b6fa1478e5faeb4e7764ba
	target = "kingdom"
	show_in_action_bar = false
	
	prepare_voice_line = null
}

def PopeGrantIndependanceAction : CourtPopeAction
{
	name = "Arrange independence"
	tooltip = "Ask {owner} to arrange our independence[ from {own_kingdom.vassal_of}]"
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_PopeGrantIndependence.tga:Icon_CharacterAction_PopeGrantIndependence#2" //GUID:1059dbbce62be7145a4f250405cad827
	prepare_voice_line = null
	success_voice_line = "confirm_independence"
	fail_voice_line = "Decline"
	
	cost
	{
		piety = 1000
		gold = (max( own_kingdom.S3, 5000 ))
	}
	
	outcomes
	{
		main success = (50 + own_kingdom.relation_with_pope / 20 - own_kingdom.vassal_of.relation_with_pope / 10)
		{
			case src_kingdom // = (player == own_kingdom)
			{
				message
				{
					def = ActionOutcomeMessage
					sprite icon = "Assets/UI/Elements/msg_icons/Icon_Message_Papacy_Positive.png:Icon_Message_Papacy_Positive#2" //GUID:1a1da5afa360d31489c3ea31d9f612f2
					text caption = "Pope arranged our independence"
					text text = "A blessed day for {plr_kingdom}!. His Holiness, {owner}, agreed to arrange our independence[ from {own_kingdom.vassal_of}]. They were not very happy from that event, but dared not deny his request."
				}
			}
			
			case liege_kingdom = (player == own_kingdom.vassal_of)
			{
				message
				{
					def = ActionOutcomeMessage
					sprite icon = "Assets/UI/Elements/msg_icons/Icon_Message_Papacy_Negative.png:Icon_Message_Papacy_Negative#2" //GUID:f0551ed801c7eea4399d528cf21b09e0
					text caption = "Pope arranged independence to our vassal"
					text text = "{owner} insisted us to grant independence to our vassal {own_kingdom}. This was a very unjust act towards us, undoubtedly a result of {own_kingdom:s} priest and diplomats actions, but we cannot oppose the decision of the Holy See."
				}
			}
			case default
			{
				message
				{
					def = null
				}
			}
			
			also rel_change = 200
			{
				src_kingdom = (papacy)
				tgt_kingdom = (own_kingdom)
			}
			also rel_change2 = -100
			{
				src_kingdom = (papacy)
				tgt_kingdom = (own_kingdom.vassal_of)
			}
			also rel_change3 = -300
			{
				//src_kingdom = (own_kingdom)
				tgt_kingdom = (own_kingdom.vassal_of)
			}
			
			also rel_change_with_kingdoms = -100 //why? 
			{
				//src_kingdom = (own_kingdom)
				filter = (k.is_catholic && !k.excommunicated && !k.is_papacy)
				text kingdoms_text = "Catholic kingdoms"
			}
		}
		
		option fail
		{
			case src_kingdom // = (player == own_kingdom)
			{
				message
				{
					def = ActionOutcomeMessage
					sprite icon = "Assets/UI/Elements/msg_icons/Icon_Message_Papacy_Negative.png:Icon_Message_Papacy_Negative#2" //GUID:f0551ed801c7eea4399d528cf21b09e0
					text caption = "Pope refused to grant us independence"
					text text = "Sadly, {owner} denied our plea for independence[ from {own_kingdom.vassal_of}]. It seems that for now he prefers to avoid intervention in the policy of our kingdoms."
				}
			}
			case default
			{
				message
				{
					def = null
				}
			}
		}
	}
}

def AutocephalyAction : CharacterAction
{
	name = "Claim Autocephaly"
	tooltip = "Claim independence from the Ecumenical Patriarch. Relations with some orthodox kingdoms will be worsened and in case of failure, crown authority will be lowered.[{owner.is_married:if}{p}If {owner} succeeds, he will have to divorce his wife, {owner.spouse}.]"
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_ClaimAutocephaly.tga:Icon_CharacterAction_ClaimAutocephaly#2" //GUID:af2935f06583d1141b39f72201c8fccd
	cost = "2500g 1000p"
	prepare_duration = (240 - owner.class_level * 8)
	prepare_status_text = "{owner} is organizing the transition of our church to an autocephalous one."
	float success_base_chance = 5
	
	decline_voice_line = "Decline"
	prepare_voice_line = "autocephaly_action"
	cancel_voice_line = "cancel_autocephaly_action"
	cancelled_voice_line = "action_failed"
	success_voice_line = "action_succeeded"
	fail_voice_line = "action_failed"
	
	condition = (own_kingdom.is_orthodox && own_kingdom.subordinated && !own_kingdom.is_ecumenical_patriarchate && !owner.is_king)
	
	success_fail
	{
		sf_base = (success_base_chance)
		{
			text name = "Base chance"
		}
		sf_class_level = (own_character.class_level)
		{
			text name = "Cleric's level"
		}
		sf_king_religion_ability = (own_kingdom.king_religion_ability * 2)
		{
			text name = "Our king's religion ability (x2)"
		}
		sf_king_diplomacyn_ability = (own_kingdom.king_diplomacy_ability)
		{
			text name = "Our king's diplomacy ability"
		}
		sf_crown_authority = 0/10
		{
			text name = "Our positive crown authority (x2)"
		}
		sf_relationship_with_constantinople
		{
			float min = 0 //map(0, -1000, 0, min)
			float max = 20 //map(0, 1000, 0, max)
			text name = "Our relations with Constantinople ({ecumenical_patriarch_kingdom:nolink})"
		}
		sf_positive_relationship_with_orthodox_kingdoms = 20
		{
			text name = "Our relations with orthodox kingdoms"
		}
		sf_our_princess_in_constantinople = 15
		{
			text name = "Our Princess in {ecumenical_patriarch_kingdom:nolink}"
		}
		sf_our_queen_in_constantinople = 30
		{
			text name = "Our Princess is a Queen of {ecumenical_patriarch_kingdom:nolink}"
		}
		sf_constantinople_is_our_vassal = 25
		{
			text name = "{ecumenical_patriarch_kingdom:nolink} is our vassal"
		}
		
		perc sf_crown_authority2 = -25/0
		{
			text name = "Our negative crown authority (x5)"
		}
		perc sf_wars = -10
		{
			text name = "Active wars (x10)"
		}
		perc sf_war_with_constantinople = (-50 * AreEnemies(own_kingdom, ecumenical_patriarch_kingdom))
		{
			text name = "War with {ecumenical_patriarch_kingdom:nolink}"
		}
		perc sf_clergy_opinion = (map3_clamp(own_kingdom.opinions.ClergyOpinion, -10, 0, 10, -40, 0, 0))
		{
			text name = "Negative clergy opinion (x4)"
		}
		perc sf_nobility_opinion = (map3_clamp(own_kingdom.opinions.NobilityOpinion, -10, 0, 10, -20, 0, 0))
		{
			text name = "Negative nobility opinion (x2)"
		}
		perc sf_independent_kingdoms = -10 // -10 per independent kingdom (except EP)
		{
			text name = "Other independent churches (x10)"
		}
		perc sf_negative_relationship_with_orthodox_kingdoms = -50
		{
			text name = "Our relations with orthodox kingdoms"
		}
	}
	
	outcomes
	{
		main success
		{
			message
			{
				text caption = "Autocephaly claimed successfully"
				text text = "Sire, our claim was successful and we are now an autocephalous church! We no longer report to the Ecumenical Patriarch, who personally acknowledged our request."
				sprite icon = "Assets/UI/Elements/msg_icons/Icon_Message_Orthodox_Positive.png:Icon_Message_Orthodox_Positive#2" //GUID:19cfbfbc1496e2542ab505a7a2a91a83
				sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericOrthodoxSuccess_Orthodox.tga:UI_Illustration_ClericOrthodoxSuccess_Orthodox#2" //GUID:ab2e4db5e7b911d45887323322eb0de6
			}
			also rel_change_with_orthodox_constantinople = -200
			{
				text bullet = "Relations with {ecumenical_patriarch_kingdom}: {outcome.amount:bonus_dark}"
				amount = (outcome.value)
			}
			also rel_change_with_independent_orthodox = -100
			{
				text bullet = "Relations with autocephalous churches: {outcome.amount:bonus_dark}"
				amount = (outcome.value)
			}
		}
		option fail
		{
			message
			{
				text caption = "Autocephaly claim failed"
				text text = "Our plea to become an autocephalous church was sadly refused by the Ecumenical Patriarch."
				sprite icon = "Assets/UI/Elements/msg_icons/Icon_Message_Orthodox_Negative.png:Icon_Message_Orthodox_Negative#2" //GUID:f288b32e1a0f09c438463931e7afbb19
				sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericFail_Orthodox.tga:UI_Illustration_ClericFail_Orthodox#2" //GUID:1c58a3de67288e241b3b2f2d1edf88a3
			}
			also crown_authority = "AutocephalyActionFail"
			also rel_change_with_orthodox_constantinople = -200
			{
				text bullet = "Relations with {ecumenical_patriarch_kingdom}: {outcome.amount:bonus_dark}"
				amount = (outcome.value)
			}
			also rel_change_with_independent_orthodox = -50
			{
				text bullet = "Relations with autocephalous churches: {outcome.amount:bonus_dark}"
				amount = (outcome.value)
			}
		}
	}
}

def SubordinateAction : CharacterAction
{
	name = "Subordinate"
	tooltip = "Subordinate to the Ecumenical Patriarch"
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_Subordinate.tga:Icon_CharacterAction_Subordinate#2" //GUID:3074c1fd0d7356c44861fcfd6448871b
	condition = (owner.is_patriarch && !owner.is_ecumenical_patriarch)
	confirmation_message = SubordianteConfirmMessage
	outcomes
	{
		main success
		{
			message
			{
				text caption = "Subordinated"
				text text = "We are now subordinated to the Ecumenical Patriarchy of Constantinople and our clergy will follow the wise guidance of His All-Holiness {ecumenical_patriarch}."
				sprite icon = "Assets/UI/Elements/msg_icons/Icon_Message_Orthodox_Positive.png:Icon_Message_Orthodox_Positive#2" //GUID:19cfbfbc1496e2542ab505a7a2a91a83
				voice_line = "narrator_voice:our_kingdom_subordinated"
			}
			also rel_change_with_orthodox_constantinople = 100
			{
				text bullet = "Relations with {ecumenical_patriarch_kingdom}: {outcome.amount:bonus_dark}"
				amount = (outcome.value)
			}
		}
	}
}


def SubordianteConfirmMessage : Message
{
	caption = "Subordinate"
	body = $[
	"Are you sure you wish to subject your church to the ecumenical patriarchy?"	
	"{p}{tab}{blt} All bonuses from autocephaly will be lost."
	"{p}{tab}{blt} Relations with {ecumenical_patriarch_kingdom} will be improved."
	]
	
	buttons
	{
		text ok = "&Yes"
		text cancel = "&Nevermind"
	}
}

def HelpTheWeakAction : CharacterAction
{
	//ai_validate = true
	name = "Commit to Charity"
	tooltip = "Have {owner} travel across {owner.kingdom:s} lands and increase its stability by helping the poor and needy."
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_HelpTheWeak.tga:Icon_CharacterAction_HelpTheWeak#2" //GUID:75f449f165652b846b1cfeeed832315a
	cost
	{
		piety = 100
	}

	gold_upkeep = (owner.help_the_weak_upkeep)
	
	prepare_voice_line = "help_the_weak"
	cancel_voice_line = "help_the_weak_recall"
}

def TeachAction : CharacterAction
{
	name = "Teach"
	tooltip = "Seek a great person to learn new skills"
	icon = "Assets/UI/Elements/Common/Icons/Icon_Action_Hire.png:Icon_Action_Hire#2" //GUID:d4fe8fa9831b578449168a76465e5d8e
	target = "great_person"
	show_in_character_widnow = true
}


def AdoptPopulationAction : CharacterAction
{
	ai_validate = true
	
	name = "Adopt population[ in {target}]"
	tooltip = "Have {owner} lift the disorder in [{target}|one of our towns]"
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_AdoptPopulation.tga:Icon_CharacterAction_AdoptPopulation#2" //GUID:08075e65055e78f4293af4b1d86d0c15
	prepare_status_text = "{owner} is attempting to ease the situation in {action.target} and lift the disorder"
	target = "own_realm"
	prepare_duration = (180 - owner.class_level * 4)
	
	decline_voice_line = "Decline"
	prepare_voice_line = "confirm_action"
	cancel_voice_line = "action_failed"
	cancelled_voice_line = "action_failed"
	success_voice_line = "action_succeeded"
	fail_voice_line = "action_failed"
	
	cost
	{
		piety = (400 + owner.class_level * 40)
		books = (200 + owner.class_level * 20)
		gold = (100 + SSum(owner.kingdom, 0.5, 50))
	}
	
	validate_prompts
	{
		text _no_possible_targets = "{clr:red_bright}We have no provinces where we can end disorder right now.{/clr}"
		text _cleric_already_adopting = "{clr:red_bright}Our {kingdom.cleric_title} is already adopting the population of a province.{/clr}"
	}
	
	cancel_events
	{
		target_realm disorder_state_changed
		target_realm kingdom_changed
		target_realm trade_centre_lost
		target_realm battle_started
	}
	
	cancelled_message_caption = "Province adoption stopped"
	cancelled_message_texts
	{
		text disorder_state_changed = "{target} is no longer in disorder, thus {owner} has nothing more to do there and has returned to our royal court."
		text kingdom_changed = "As we lost contol over {target}, {owner} had to abandon his attempts to adopt its population. He is back in our royal court."
		text trade_centre_lost = "Alas, we lost control over the trade center in {target}, which put an end to {owner:s} attempts to adopt its population. We barely managed to convinced him to leave and return to our court!"
		text battle_started = "The turmoil in {target}, caused by the besiegers from {target.castle.battle.attacker_kingdom}, forced {owner} to stop adopting the town's population."
	}
	
	
	level_buff = (2 + (owner.is_patriarch || owner.is_cardinal))
	
	sf_per_target = true
	
	success_fail = 5
	{
		sf_base = (60)
		{
			text name = "Base chance"
		}
		
		sf_class_level = (own_character.class_level * level_buff)
		{
			text name = "Cleric level (x{level_buff})"
		}
		
		sf_religion_diff = (-5 * ReligionDistance(target.realm, owner.kingdom))
		{
			text name = "Religious differences"
		}
		
		sf_culture_diff = (-5 * CultureDistance(target.realm, owner.kingdom))
		{
			text name = "Cultural differences"
		}
		
		sf_holding_pope = (20 * owner.kingdom.has_pope)
		{
			text name = "We hold the pope"
		}
	}
	
	outcomes
	{
		main success
		{
			case src_kingdom
			{
				message
				{
					def = ActionOutcomeMessage
					sprite icon = "Assets/UI/Elements/msg_icons/Icon_Message_Population_Positive.png:Icon_Message_Population_Positive#2" //GUID:cec01322685fc60459994cbb8e1b06ce
					sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ProvinceDisorderLifted.tga:UI_Illustration_ProvinceDisorderLifted#2" //GUID:2e3c56c1331ba5848a0d436143eca251
					text caption = "Population adopted"
					text text = "{owner} successfully lifted the disorder in {target} in a peaceful manner."
				}
			}
		}
		option fail
		{
			case src_kingdom
			{
				message
				{
					def = ActionOutcomeMessage
					text caption = "Population adoption failed"
					text text = "{owner} could not manage to lift the disorder in {target}, due to our [{target.religion_distance:if}{target.culture_distance:if}religious and cultural|{target.religion_distance:if}religious|{target.culture_distance:if}cultural] differences with the population."
					
					case Catholic = (owner.kingdom.is_catholic)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericFail_Catholic.tga:UI_Illustration_ClericFail_Catholic#2" //GUID:f81eb49bbb9aff049aef2f80864eb757
					}
					case Orthodox = (owner.kingdom.is_orthodox)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericFail_Orthodox.tga:UI_Illustration_ClericFail_Orthodox#2" //GUID:1c58a3de67288e241b3b2f2d1edf88a3
					}
					case Muslim = (owner.kingdom.is_muslim)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericFail_Muslim.tga:UI_Illustration_ClericFail_Muslim#2" //GUID:7bbc8c795dcfed047913442a8f598c2b
					}
					case Pagan = (owner.kingdom.is_pagan)
					{
						sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ClericFail_Pagan.tga:UI_Illustration_ClericFail_Pagan#2" //GUID:4d283451d8e4c7d458c7bfbf525aad7e
					}
				}
			}
		}
	}
	
}

def GoOnAJourneyAction : ReligionSpecificAction
{
	name = "Journey[ to {target}]"
	tooltip = "Send {owner} on a journey to distant lands, so he can gather knowledge and spread our ways along the way."
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_GoOnAJourney.tga:Icon_CharacterAction_GoOnAJourney#2" //GUID:e9de3a007858b5b4ba756eb461a8fb72
	
	decline_voice_line = "Decline"
	prepare_voice_line = "go_on_a_journey"
	cancel_voice_line = "Recall"
	cancelled_voice_line = "mission_cancelled"
	fail_voice_line = "action_failed"
	
	
	condition = (own_kingdom.is_muslim)
	
	opportunity
	{
		activate_message = NewJourneyAvailableMessage
		deactivate_message = null
		min_active_time = 300
	}
	
	int min_targets = 2
	int max_targets = 4
	// min/max distance (in number of realm hops) from our kingdom to the target realm, 1 is neighbour to us
	int min_tgt_dist = 5
	int max_tgt_dist = 10
	
	cost
	{
		piety = (300 + owner.class_level * 30)
		gold = (100 + SSum(owner.kingdom, 0.2))
	}
		
	gold_upkeep = (ceil(5 + 0.01 * own_kingdom.S1, 5))

	
	bool final_realm = (owner.mission_realm == target.realm)
	
	prepare_duration = 120/300 // per town
	prepare_status_text = "{owner} is currently headed towards {owner.mission_realm}[{final_realm:if}, his final destination| on his way to {target}].{p}His journey cost us an upkeep of {upkeep}."
	
	//int num_outcomes = 1/2 // how many positive outcomes to happen (min/max)
	
	float fail_chance = (ceil((1 + CL) * rel * war, 1))
	{
		CL = (MapCL(owner, 4, 1))
		rel = (MapRelationship(owner.kingdom, owner.mission_realm.kingdom, 2, 0.5, 0))
		war = (AreEnemies(owner.kingdom, owner.mission_realm.kingdom) and 4 or 1)
	}
	
	float killed_chance = (rel * war) //this chance is the chance to be killed IF he fails (multiply both numbers to receive actual value)
	{
		rel = (MapRelationship(owner.kingdom, owner.mission_realm.kingdom, 2, 0.5, 0))
		war = (AreEnemies(owner.kingdom, owner.mission_realm.kingdom) and 4 or 1)
	}
	
	text flavor_text = [
		"[{final_realm:if_not}On his way to {target}, ]{owner} reached the great city of {owner.mission_realm}[{final_realm:if}, his destination]. ",
		"After a long travel, {owner} reached {owner.mission_realm}[{final_realm:if}, the destination of his journey| and decided to spend several months in that marvelous town, before continuing to {target}]. ",
		"[{final_realm:if_not}There was still a long way to go to {target} but ]{owner} already arrived in {owner.mission_realm} and was really amazed by the local traditions and folklore. ",
		"[{final_realm:if_not}While travelling to {target}, ]{owner} was accepted as a honorable guest in {owner.mission_realm}[{final_realm:if} as they were flattered that he made all that effort to visit their kingdom]. ",
		"After several weeks, {owner} entered the gates of {owner.mission_realm}[{final_realm:if}, his heart was filled with joy| and decided to stop there for a while]. ",
		"Though he encountered many difficulties on his path, {owner} arrived safely at {owner.mission_realm}[{final_realm:if}, finally reaching the city he was so eager to see]. ",
		"Tired, hungry and almost dehydrated, {owner} barely made it to {owner.mission_realm}. [{final_realm:if}He could have perished so close to his destination|He needed to rest and recover before continuing to {target}]. ",
		"Chased by bandits, {owner} got nearly killed, but local soldiers rescued him and escorted him to {owner.mission_realm}. ",
		"{owner:s} mount got sick and died on the moment he reached {owner.mission_realm}. [{final_realm:if}With his final breath, the poor animal had brought him to his destination|As he searched for a new one, he liked the town and postponed his departure to {target}]. ",
		"After an uneventful week of travelling, {owner:s} reached {owner.mission_realm}. "
	]
	
	chance_to_succeed = (100 - fail_chance) //used for the tooltip
	
	outcomes // per realm
	{
		option success
		{
			message
			{
				case src_kingdom
				{
					sprite icon = "Assets/UI/Elements/msg_icons/Icon_Message_Action_Positive.png:Icon_Message_Action_Positive#2" //GUID:c0d9b6f451a156247aa4fb49231585a9
					sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_GoOnAJourney.tga:UI_Illustration_GoOnAJourney#2" //GUID:16465353ec1a83648ac14b39d15ec166
					text caption = "Journey"
					switch_value = (final_realm)
					case 0 : 
					{
						text caption = "Journey continues"
						text add_text = ["{p}{final_realm:if_not}He is planning to visit {next_realm} next.",
									 	 "{p}{final_realm:if_not}Now he is already travelling towards {next_realm}.",
									 	 "{p}{final_realm:if_not}Without further to do there, he continued his road to {next_realm}.",
										 "{p}{final_realm:if_not}He is now impatient to reach his next destination - {next_realm}.",
									 	 "{p}{final_realm:if_not}His road will probably lead him to {next_realm} next.",
									 	 "{p}{final_realm:if_not}His journey now continues to {next_realm}.",
									 	 "{p}{final_realm:if_not}If he is lucky, he will reach {next_realm} soon.",
									 	 "{p}{final_realm:if_not}Unless God wishes otherwise, he will reach {next_realm} within few weeks.",
									 	 "{p}{final_realm:if_not}Though tired and weary, he continued his journey to {next_realm}."]
						string voice_line = "journey_continues"
					}
					case default : 
					{
						text caption = "Journey completed"
						text add_text = ["{p}He has now returned to {owner.kingdom}, telling marvelous stories of his adventures.",
									 	 "{p}Enchanted of everything that he had seen, our scholar started planning his next journey immediately after his return.",
										 "{p}As he now returned to {owner.kingdom} and finished his book, describing many wonders encountered, he is ready for new great deeds."]
						string voice_line = "journey_completed"
					}
					
					
					switch_value2 = (kingdom.religion.key)
					case Sunni
					{
						sprite icon = "Assets/UI/Elements/msg_icons/Icon_Message_Sunni_Positive.png:Icon_Message_Sunni_Positive#2" //GUID:f5511aecdac645848b2848632094228f
					}
					case Shia
					{
						sprite icon = "Assets/UI/Elements/msg_icons/Icon_Message_Shia_Positive.png:Icon_Message_Shia_Positive#2" //GUID:85f62290df2b3cf498ac54cedb6bd9a7
					}
				}
				
			}
			
			//important note - average sum of chances are around 200, so divide value by 2 to see expectations;
			main convert_province_religion = (!owner.mission_realm.is_religion_important and (owner.mission_realm.religion != owner.religion) and (5 + owner.class_level) or 0)
			{
				message
				{
					case src_kingdom
					{
						text text = ["{flavor_text}He spoke with such devotion about our religion, that the people there pronounced him as a true prophet and accepted {owner.religion:ism}.",
									"{flavor_text}Following his wise words, the people there accepted {owner.religion} Islam as their new religion.",
									"{flavor_text}As he taught the people there about the greatness of our God, they listened and now follow {owner.religion} with real devotion."]
					}
					case mission_kingdom
					{
						def = ActionOutcomeMessage
						case foreign_muslim_religion = (owner.mission_realm.kingdom.is_muslim && owner.kingdom.is_muslim && owner.mission_realm.kingdom.religion != owner.kingdom.religion)
						{
							text caption = "Foreign religion in our lands"
							text text = "Sire, a scholar from a foreign Muslim kingdom has been preaching in {owner.mission_realm}! Our people there now favor {owner.mission_realm.kingdom.religion} Islam."
							
							case sunni = (owner.kingdom.is_sunni)
							{
								icon = "Assets/UI/Elements/msg_icons/Icon_Message_Sunni_Negative.png:Icon_Message_Sunni_Negative#2" //GUID:a38c9bc672bd0944c900424a7ebab08e
							}
							case shia = (owner.kingdom.is_shia)
							{
								icon = "Assets/UI/Elements/msg_icons/Icon_Message_Shia_Negative.png:Icon_Message_Shia_Negative#2" //GUID:f4f55f396dbd2894ebee69906cae7abc
							}
						}
						case same_muslim_religion = (owner.mission_realm.kingdom.religion = owner.kingdom.religion)
						{
							text caption = "Our province became {owner.mission_realm.kingdom.religion}"
							text text = "With the help of a foreign visiting scholar, our people in {owner.mission_realm} now proudly call themselves {owner.religion}!"
							
							case sunni = (owner.mission_realm.kingdom.is_sunni)
							{
								icon = "Assets/UI/Elements/msg_icons/Icon_Message_Sunni_Positive.png:Icon_Message_Sunni_Positive#2" //GUID:f5511aecdac645848b2848632094228f
							}
							case shia = (owner.mission_realm.kingdom.is_shia)
							{
								icon = "Assets/UI/Elements/msg_icons/Icon_Message_Shia_Positive.png:Icon_Message_Shia_Positive#2" //GUID:85f62290df2b3cf498ac54cedb6bd9a7
							}
						}
						case default
						{
							text caption = "Foreign religion in our lands"
							text text = "Our people in {owner.mission_realm} have turned their backs on us and accepted {owner.religion:ism}! They were visited by a scholar from {owner.kingdom} and seemed enthraled by his verses and preachings..."
							
							case sunni = (owner.kingdom.is_sunni)
							{
								icon = "Assets/UI/Elements/msg_icons/Icon_Message_Sunni_Negative.png:Icon_Message_Sunni_Negative#2" //GUID:a38c9bc672bd0944c900424a7ebab08e
							}
							case shia = (owner.kingdom.is_shia)
							{
								icon = "Assets/UI/Elements/msg_icons/Icon_Message_Shia_Negative.png:Icon_Message_Shia_Negative#2" //GUID:f4f55f396dbd2894ebee69906cae7abc
							}
						}
						
						illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ProvinceReligionConverted_Muslim.tga:UI_Illustration_ProvinceReligionConverted_Muslim#2" //GUID:c71bcd52bed8e7a45afba61664acb575
					}
				}
				
				realm = (owner.mission_realm)
				religion = (owner.religion)
			}
			
			option _piety = 35
			{
				text message = ["{flavor_text}He spoke a lot with the wisemen there and got really enlightened by their religious teachings and practices.",
								"{flavor_text}As he enetered many debates with the local wisemen, he got even more convinced of the superiority of our realigious teachings.",
								"{flavor_text}He managed to see some holy relics and described them in great detail in a letter to our most prominent scholars."]
				also give_piety = ((0.0015 * own_kingdom.S1 + owner.class_level) * RndI(20, 80, 5))
				{
					kingdom = (own_kingdom)
				}
				also rel_change = (RndI(5,10,5) * owner.cs_mission_passive_rel_increase)
				{
					tgt_kingdom = (owner.mission_realm.kingdom)
				}
			}
			
			option _gold = 25
			{
				text message = ["{flavor_text}Unexpectedly, he found out that they desperately need some goods that we have in abundance and we managed to make some profit.",
								"{flavor_text}Luckily, he found out that we can import some goods at much lower prices, and we quickly saved a lot of gold."]
				also give_gold = ((0.1 * own_kingdom.S1 + owner.class_level * 20) * RndI(2, 8, 1))
				{
					kingdom = (own_kingdom)
				}
				also rel_change = (RndI(5,10,5) * owner.cs_mission_passive_rel_increase)
				{
					tgt_kingdom = (owner.mission_realm.kingdom)
				}
			}
			
			option _rel_change = 45
			{
				main _positive = 70
				{
					text message = ["{flavor_text}He spoke with the local noblemen and tried to help them see the worlds as we do.",
									"{flavor_text}Speaking with the governor and other notable people, he explained why we do things the way do them in {owner.kingdom}.",
									"{flavor_text}As many important people came to see this 'strange' guest, he managed to talk about some of the problems between our kingdoms and to straighten them.",
									"{flavor_text}A lot of his time there he devoted in ensuring the local noblemen about the good intentions of the {owner.kingdom:ians} towards {owner.mission_realm.kingdom}."]
					also rel_change = (RndI(50,200, 10) + owner.class_level * 10 + (RndI(5,10,5) * owner.cs_mission_passive_rel_increase))
					{
						tgt_kingdom = (owner.mission_realm.kingdom)
					}
				}
				option _negative
				{
					text message = ["{flavor_text}His presence was rather offensive for the local nobility and finally they banished him. From then on, travellers from {owner.kingdom} are no longer welcome there.",
									"{flavor_text}His preaching and stories about the greatness of {owner.kingdom} got the governor mad and our scholar barely escaped unharmed.",
									"{flavor_text}It seems that many people there got offended by his preaching, though, and his visit was treated as an attempt from us to convert their beliefs and loyalty."]
					also rel_change = (RndI(-400,-200, 10))
					{
						tgt_kingdom = (owner.mission_realm.kingdom)
					}
				}
			}
			
			option _books = 50 //!!! attention - leave one option without wait, so we always have at least 1 thing happening if chance is below 100; or make sure chance is always above 100
			{
				text message = ["{flavor_text}He spoke a lot with the local scholars and got enlightened by their wisdom.",
							    "{flavor_text}He spent most of his time in their great library, filled with precious knowledge.",
							    "{flavor_text}Visiting the local schools, he saw great new methods of education, that we could use in {owner.kingdom}.",
							    "{flavor_text}Before his departure, he received several extremely interesting books as a present from a rich local nobleman, that he was a guest of."]
				also give_books = ((0.0015 * own_kingdom.S1 + owner.class_level) * RndI(20, 60, 5))
				{
					kingdom = (own_kingdom)
				}
				also rel_change = (RndI(5,10,5) * owner.cs_mission_passive_rel_increase)
				{
					tgt_kingdom = (owner.mission_realm.kingdom)
				}
			}
			
			// ["{owner} wrote us that he {owner.mission_realm} turned out to be rather boring and uninteresting place and he see no use of staying there longer.",
			// 					"{owner} spent several days in the libraries of {owner.mission_realm}, but it seems that he couldn't find anything of interest there.",
			// 					"{owner} was greeted with hostility in {owner.mission_realm}. For his sake, he had to quickly leave the place and"]
		}
		
		option fail = (fail_chance)
		{
			main no_results
			{
				text message = ["After his arrival in {owner.mission_realm}, {owner} got very sick. His condition improved, but he had to abandon his journey and return home to completely recovers.",
								"{owner} was greeted with hostility in {owner.mission_realm} and had to flee. As a man in his entourage was wounded, he had to return to {owner.kingdom} and abandon his journey.",
								"{owner} got robbed and beaten in {owner.mission_realm}. He had to return to {owner.kingdom} but, regardless of this incident, he is willing to prepare for another journey.",
								"As the weather in {owner.mission_realm} became to dire to travel, {owner} had to return to {owner.kingdom} and at least postpone his journey.",
								"{owner} got too tired on his long journey and after he reached {owner.mission_realm}, he decided to return to {owner.kingdom}.",
								"After his arrival in {owner.mission_realm}, {owner} received ill news that his beloved grandfather had passed. He decided to postpone his journey for now and to return to {owner.kingdom}."]
			}
			option owner_killed = (killed_chance)
			{
				voice_line = null
				sprite icon = "Assets/UI/Elements/msg_icons/Icon_Message_KnightKilled_Negative.png:Icon_Message_KnightKilled_Negative#2" //GUID:c69ba8b66f7a190468fa7cddb596098c
				text message = ["We received a worrying message from {owner}, saying that he has encountered great difficulties in {owner.mission_realm}. We never heard of him again.",
								"A merchant just returned to our capitol and brought news of the death of {owner} in {owner.mission_realm} - he was beaten to death by an agry mob.",
								"We have received a message from {owner.mission_realm.kingdom:anian} diplomat, informing us about the passing of {owner}, presumably robbed and killed by bandits.",
								"A terrible sickness struck {owner}. The healers in {owner.mission_realm} tried to cure him, but their efforts were in vain.",
								"We just received sad news of the death of {owner}, killed by {owner.mission_realm.kingdom:ian} guards in {owner.mission_realm}."]
			}
			option owner_imprisoned = (killed_chance * 2)
			{
				tgt_kingdom = (owner.mission_realm.kingdom)
				text message = ["We received a message from {owner.mission_realm.kingdom:anian} diplomat, stating that {owner} was convicted for illegal religious practices.",
								"As {owner} arrived in {owner.mission_realm}, he was immediately held by the guards. The {owner.mission_realm.kingdom:ian} said they have a proof that he was a spy.",
								"In {owner.mission_realm}, {owner} was convicted of disturbing the order and aggressive behaviour towards the local guards.",
								"For unknown reasons, {owner} was held by soldiers in {owner.mission_realm}. The {owner.mission_realm.kingdom:ians} refused to explain to us why.",
								"As {owner} arrived in {owner.mission_realm}, he was immediately held in the dungeon. We received a mocking message from {owner.mission_realm.kingdom.king}, begging us to send more scolars in their kingdom.",
								"Our {owner} was held hostage by the guards in {owner.mission_realm}. The {owner.mission_realm.kingdom:ians} warned us, that this will happen with all of our scholars, passing through their lands."]
				
				sprite icon = "Assets/UI/Elements/msg_icons/Icon_Message_KnightImprisoned_Negative.png:Icon_Message_KnightImprisoned_Negative#2" //GUID:576cf88267f938d479147e5ac18e45d9
			}
		}
	}
}

def NewJourneyAvailableMessage : Message
{
	icon = "Assets/UI/Elements/msg_icons/Icon_Message_Opportunity_Cleric_Positive.png:Icon_Message_Opportunity_Cleric_Positive#2" //GUID:8e0b16e0ea2d1f4419df7d953df5d71f
	caption = "{kingdom.cleric_title} opportunity: {name}"
	body = "{owner} has an opportunity to go on a journey to {target}."
	buttons
	{
		action activate = (action)
		{
			text text = "&Go on a journey"
		}
		cancel_opportunity cancel_op
		{
			text text = "&Forget opportunity"
		}
		text ok = "&Let me think"
	}
	
	//ui_prefab = "Assets/UI/Messages/UIP_NewPlotAvailableMessage.prefab" //GUID:1fe9b0b7d73ffe948983be83cb6265ae
	sound_effect = "event:/sound_effects/notification/message/opportunity_default" //sound effect not ready
}

// ----------------------------------------------------------//
// -----------------  OTHER OR MILITARY  --------------------//
// ----------------------------------------------------------//

def AppointNewArmyLeaderAction : CharacterAction
{
	name = "Choose a new leader"
	tooltip = "Place a new leader in charge of the deceased knight's army"
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_CallToArms.tga:Icon_CharacterAction_CallToArms#2" //GUID:4021825c1208b2141a4196298c68cc4a
	secondary = true
	show_in_action_bar = true
	show_in_character_widnow = true
	show_in_status = DeadStatus
	prepare_voice_line = "select_character_voice_line"
	//confirmation_message = StopGoverningMessage
}

def FortifyAction : CharacterAction //!!! placeholder
{
	name = "Fortify"
	tooltip = "Order {owner:s} army to set-up a fortified camp."
	icon = "Assets/UI/Elements/Common/Icons/Icon_Action_Camp.png:Icon_Action_Camp#2" //GUID:5c58e187e33af194cadf2cad6216c61f
	prepare_duration = 10 //add relation to rank?
	prepare_status_text = "{owner} is fortifying his army's positions [in {owner.army.realm_in}]"
	show_in_action_bar = false
}

def StormTheWallsAction : CharacterAction //!!! placeholder
{
	name = "Storm the Walls"
	tooltip = "Order {owner:s} army to assault the town they are besieging."
	icon = "Assets/UI/Elements/Common/Icons/Icon_Action_Camp.png:Icon_Action_Camp#2" //GUID:5c58e187e33af194cadf2cad6216c61f
	show_in_action_bar = false
}

def EstablishOrderAction : ArmyAction
{
	name = "Establish Order"
	// target is the realm the owner is in
	// target kingdom is the realm pop majority kingdom
	tooltip = "Attempt to subdue {realm:s} population by force."
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_EstablishOrder.tga:Icon_CharacterAction_EstablishOrder#2" //GUID:9f13131e2dac91c4d9465b93999f325b
	prepare_duration = 120
	confirmation_message = EstablishOrderConfirmMessage
	prepare_status_text = "{owner} is attempting to crush disorder in {realm}."
	prepare_voice_line = "confirm_action"
	cancel_voice_line = "cancel_action"
	cancelled_voice_line = "action_cancelled"
	//success_voice_line = "" //string disorder_ended = "narrator_voice:disorder_ended" sounds.def 
	fail_voice_line = "narrator_voice:establish_order_failed"
	
	cost
	{
		//gold = (SSum(own_kingdom, 1))
		levy = 200
	}
	expense_category = "Military" // or maybe Diplomacy?
	
	int rel_drop_all_max_dist = 2
	int population_drop = -1
	
	//tooltip vars
	int CA_drop = (CrownAuthority.establish_order)
	rel_drop_kingdom = (RelationModifiers["rel_establish_order_owner"])
	rel_drop_all = (RelationModifiers["rel_establish_order_rest"])

success_fail
	{
		sf_base = (40)
		{
			text name = "Base chance"
		}

		sf_knight_level = (2 * owner.class_level)
		{
			text name = "Knight's level (x2)"
		}
		sf_iron_fist = (owner.cs_establish_order_CTS)
		{
			text name = "{IronFistSkill.name} skill"
		}
		sf_crown_authority = (kingdom.crown_authority * 3)
		{
			text name = "Our crown authority"
		}
		sf_we_have_the_pope = (20 * kingdom.has_pope)
		{
			text name = "The pope is from our kingdom"
		}
	}
	outcomes
	{
		main success //= (clamp((50 + owner.cs_establish_order_CTS + owner.class_level * 2 + kingdom.crown_authority * 3 + 20 * kingdom.has_pope), 0, 95))
		{
			message
			{
				sprite icon = "Assets/UI/Elements/msg_icons/Icon_Message_Disorder_Positive.png:Icon_Message_Disorder_Positive#2" //GUID:6585b9b6b528c7e448ba64878eabbb7f
				sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ProvinceDisorderLifted.tga:UI_Illustration_ProvinceDisorderLifted#2" //GUID:2e3c56c1331ba5848a0d436143eca251
				text caption = "Disorder ended"
				text text = "{owner} successfully ended all disorder in {realm}"
			}
			
			// also target_crown_authority = CA_drop
			// establish_order
			// {
			// 	text bullet = "{outcome.field} crown authority for {target_kingdom}"
			// }
		}
		option fail
		{
			message
			{
				text caption = "Establish order failed"
				text text = "{owner} failed to quell the disorder in {realm}, and now a rebellion has taken over the town"
			}
		}
	}
	
	cancel_events
	{
		owner_realm disorder_state_changed
		owner_realm battle_started
		owner_castle army_changed
	}
	
	cancelled_message_caption = "Establish order stopped"
	cancelled_message_texts
	{
		text disorder_state_changed = "{owner} is no longer attempting to enforce order in {realm}, now that the province is no longer in disorder."
		text battle_started = "{owner:s} attempts to enforce order in {realm} were halted by the sudden arrival of {realm.castle.battle.attacker.kingdom:ian} forces! He is now busy fending off the invaders."
		text army_changed = "{owner} was forced to halt his attempts to enforce order in {realm}, as he was forced out of the town's walls by another knight of ours."
	}
}

def EstablishOrderConfirmMessage : Message
{
	caption = "Establish Order"
	body = $[
	"Are you sure you wish to subdue {realm:s} population? This will have the following negative effects:{p}"
	"[{blt}{CA_drop:if}{CA_drop:bonus} crown authority{p}]"
	"{blt}{population_drop:bonus}{workers_icon} in province{p}" //is this the proper population icon? If not, fix.
	"[{realm.pop_majority.kingdom.is_defeated:if_not}{blt}{rel_drop_kingdom:bonus} relations with {realm.pop_majority.kingdom}{p}]"
	"{blt}{rel_drop_all:bonus} relations with kingdoms in our region{p}"
	"{blt}{EstablishOrderModifier.value:bonus} {RealmStats.rs_stability_establish_order.name} (fades over time)"	
	]
	
	buttons
	{
		text ok = "&Yes"
		text cancel = "&Nevermind"
	}
}

def ImproveOpinionsAction : CharacterAction
{
	name = "Improve opinions"
	tooltip = "Oversee and improve the opinion of the different social group in our kingdom towards the rulership of our {kingdom.king.title}.{p}It will require an upkeep of {ImprovingOpinionsStatus.upkeep}."
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_ImproveOpinions.tga:Icon_CharacterAction_ImproveOpinions#2" //GUID:5f5afb8280e195b48976a5d9e07a778d
	prepare_duration = 0
	prepare_status_text = "{owner} is preparing to improve the opinions in the kingdom.[{p}That requires an upkeep of {upkeep}.]"
	
	prepare_voice_line = "improve_opinions"
	cancel_voice_line = "improve_opinions_recall"
	
	unique
	unique_status = "ImprovingOpinionsStatus"
	
	upkeep : ImprovingOpinionsStatus.upkeep
}

def CancelMainAction : CharacterAction
{
	name = "Cancel character action"
	tooltip = "Cancle current character action"
	icon = "Assets/UI/Elements/Common/Icons/Icon_Action_DefendBorders.png:Icon_Action_DefendBorders#2" //GUID:3632a1e0941b3d6489b68edb320300df
	show_in_action_bar = false
	confirmation_message = ConfirmCancelActionMessage
	prepare_voice_line = null
}

def OpenAudienceAction : CharacterAction
{
	name = "Open audience"
	tooltip = "Begin diplomatic negotiations with {own_character.mission_kingdom}"
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_OpenAudience.tga:Icon_CharacterAction_OpenAudience#2" //GUID:6225698e245eebd47a2bc9047595dc33
}

def OpenChoosePatriarchAction : CharacterAction
{
	name = "Choose a new[{kingdom.is_ecumenical_patriarchate:if} ecumenical] patriarch"
	tooltip = "Elect the new head of our Orthodox Church, among a list of worthy candidates."
	icon = "Assets/UI/Elements/Actions/Icon_KingdomAction_ChooseNewPatriarch.tga:Icon_KingdomAction_ChooseNewPatriarch#2" //GUID:a8263d200479b874cbcce5250099159f
}

def PromotePaganBeliefAction : CharacterAction
{
	mission = "Ignore"
	ai_validate = true
	name = "Promote belief"
	tooltip = "Promote a belief. This will [{current_upkeep:if}increase the upkeep of our beliefs from {current_upkeep}{gold_icon} to {next_upkeep}{gold_icon}|require an upkeep of {next_upkeep}{gold_icon}]."
	prepare_status_text = "{owner} is praising amongst our people the sanctity of a new belief."
	
	decline_voice_line = "Decline"
	prepare_voice_line = "promote_pagan_belief"
	cancel_voice_line = "cancel_pagan_belief"
	cancelled_voice_line = "action_falied"
	success_voice_line = "pagan_belief_adopted"
	
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_PromotePaganBelief.tga:Icon_CharacterAction_PromotePaganBelief#2" //GUID:de635e675e8459f4496e24de6f3276ae
	cost
	{
		gold = (SSum(own_kingdom, 1))
		piety = 200
	}
	args = ["string"]
	
	//gold_upkeep = 500
	
	secondary = true
	show_in_action_bar = false
	show_in_status = NoPaganBeliefStatus
	
	prepare_duration = (90 - own_character.class_level * 2)
	
	outcomes
	{
		main success = 100
		{
			message
			{
				case src_kingdom
				{
					def = ActionOutcomeMessage
					text caption = "A new belief was adopted"
					text text = "Our people accepted a new belief and now praise {new_belief} and often perform sacred rituals, devoted to it. Their new zealous following already provides great benefits to our kingdom, but maintaing that belief costs a lot of effort to {owner}, as well as gold."
					sprite icon = "Assets/UI/Elements/msg_icons/Icon_Message_Pagans_Positive.png:Icon_Message_Pagans_Positive#2" //GUID:4ed6e9507eb2bc24180cbc6ef7ee7bee
					sprite illustration = "Assets/UI/Messages/Illustrations/UI_Illustration_ShamanSuccess_Pagan.tga:UI_Illustration_ShamanSuccess_Pagan#2" //GUID:17e9b4ba23b1c3345b48e0b1cfe311ac
				}
			}
		}
	}
}

def ChangePaganBeliefAction : CharacterAction
{
	mission = "Ignore"
	name = "Replace the belief in {belief}"
	tooltip = "Replace the sacred belief in {belief} with another one.{p}{p}Changing a belief will not be well accepted by the people and will lead to crown authority loss."
	prepare_status_text = "{owner} is convincing our people that a new belief is more sacred than an old one."
	secondary = true
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_ChangePaganBelief.tga:Icon_CharacterAction_ChangePaganBelief#2" //GUID:9a08ec7aec2ea934f8587d4d4a0f4017
	cost
	{
		gold = (SSum(own_kingdom, 1))
		piety = 200 //makes no sense to be more than the one for adopting, since you can abandon and then adopt
	}
	args = ["string"]
	
	decline_voice_line = "Decline"
	prepare_voice_line = "promote_pagan_belief"
	cancel_voice_line = "cancel_pagan_belief"
	cancelled_voice_line = "action_falied"
	success_voice_line = "pagan_belief_adopted"
	
	show_in_action_bar = false
	show_in_status = PaganBeliefStatus
	
	prepare_duration = (180 - own_character.class_level * 4)
	
	outcomes
	{
		main success = 100
		{
			message
			{
				case src_kingdom
				{
					def = ActionOutcomeMessage
					text caption = "Belief replaced"
					text text = "Though there was great uproar, {owner} managed to convince our people in the sanctity of {new_belief} and now this is what they praise."
					sprite icon = "Assets/UI/Elements/msg_icons/Icon_Message_Pagans_Positive.png:Icon_Message_Pagans_Positive#2" //GUID:4ed6e9507eb2bc24180cbc6ef7ee7bee
				}
			}
			also crown_authority = "stopPromotingPaganBelief"
		}
	}
}
def StopPromotingPaganBeliefAction : CharacterAction
{
	mission = "Ignore"
	secondary = true
	name = "Abandon the belief in {belief}"
	tooltip = "Stop promoting our sacred belief in {belief}.{p}{p}Abandoning a belief will not be well accepted by the people and will lead to crown authority loss."
	prepare_status_text = "{owner} is convincing our people that there there is not much sanctity in {belief} and we should no longer praise that or perform any rituals."
	icon = "Assets/UI/Elements/Actions/Icon_CharacterAction_StopAction.tga:Icon_CharacterAction_StopAction#1" //GUID:9fc339caa7b06dc41bdd4d2c34bd58f5
	
	show_in_action_bar = false
	show_in_status = PaganBeliefStatus
	
	prepare_voice_line = "cancel_pagan_belief"
	
	outcomes
	{
		main success = 100
		{
			message
			{
				case src_kingdom
				{
					def = ActionOutcomeMessage
					text caption = "Belief abandoned"
					text text = "Our people no longer praise {belief} or perform any related rituals. Some of them were furious due to that decision of {owner}."
					sprite icon = "Assets/UI/Elements/msg_icons/Icon_Message_Pagans_Positive.png:Icon_Message_Pagans_Positive#2" //GUID:4ed6e9507eb2bc24180cbc6ef7ee7bee
				}
			}
			also crown_authority = "stopPromotingPaganBelief"
		}
	}
}


def ChangeHeirAction : CharacterAction
{
	show_in_action_bar = false
	name = "[{own_character.is_heir:if}Heir of the crown|Select as new heir]"
	tooltip = $[
		"{own_character} "
		"[{own_character.is_heir_eligable:if} is ready to rule the {own_kingdom.KingdomType} when the time comes.|[{own_character.heir_is_patriarch:if}cannot rule {own_kingdom} as a patriarch.|{own_character.is_pope:if} is the pope and cannot become a king.|{own_character.is_cardinal:if}cannot rule {own_kingdom} as a cardinal.|{own_character.is_rebel:if}cannot rule as a rebel.|is not yet ready to carry the burden of the crown.]]"
		"[{own_character.is_heir:if} He is chosen by the {own_kingdom.king.title} as the rightful heir.|[{own_character.is_rebel:if}| His brother, {own_kingdom.heir}, is chosen by the king to succeed the crown.]]"
	]
	confirmation_message = ChangeHeirConfirmMessage
	bool heir_is_patriarch = (own_character.is_patriarch || own_character.is_ecumenical_patriarch)
	
	validate_prompts
	{
		text cant_be_heir = "[{own_character.is_heir:if_not}{clr:red_bright}[{own_character.heir_is_patriarch:if}Patriarchs cannot inherit the crown.|{own_character.is_rebel:if}While opposing the crown, a prince cannot inherit it.|{own_character.is_pope:if}The pope cannot inherit the crown of our kingdom.|Princes must be at least juvenile to become eligible heirs.]{/clr}]"
		text is_heir = null
	}
	
	cost
	{
		gold = (SSum(own_kingdom, 1))
		piety = 1000
		books = 500
	}
	
	outcomes
	{
		message
		{
			def = null
		}
		main success
		{
			also crown_authority = "change_heir"
			trigger heir_changed
			{
				target = (own_kingdom)
				param = (old_heir)
			}
		}
	}
}

def ChangeHeirConfirmMessage : Message
{
	caption = "Change heir?"
	body = "Are you sure you want to announce {own_character} as the new heir of the crown?{p}{tab}{blt} Crown Authority: {CrownAuthority.change_heir:bonus} {p}{tab}{blt} Nobility Opinion: {ChangeHeirNobilityOpinionRule.amount:bonus}{p}{tab}{blt} Elder princes might rebel upon coronation."
	buttons
	{
		text ok = "&Yes"
		text cancel = "&Nevermind"
	}
}